<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>棋盘格角点检测</title>
    <link href="/2022/06/29/Digital-Image/X-Corner/"/>
    <url>/2022/06/29/Digital-Image/X-Corner/</url>
    
    <content type="html"><![CDATA[<h2id="a-new-sub-pixel-detector-for-x-corners-in-camera-calibration-targets">ANew Sub-Pixel Detector for X-Corners in Camera Calibration Targets</h2><blockquote><p>基于海塞矩阵的方法</p></blockquote><p>一个标准的 X-Corners 如下图所示：</p><p><img src="/img/X-Corners/2a.png" /></p><p>其表达式为： <span class="math display">\[f(x,y)=\begin{cases}0,&amp;xy\le0\\1,&amp;xy&gt;0\end{cases}\]</span>由于实际的图像中存在噪点，所以需要对图像进行低通滤波，这里使用高斯算子：<span class="math display">\[g(x,y)=\frac{1}{2\pi\sigma^2}e^{-\frac{x^2+y^2}{2\sigma^2}}\]</span> 高斯算子平滑的 X-Corner 的强度分布模型： <spanclass="math display">\[r(x,y)=g(x,y)\otimes f(x,y)=\Phi(x)\Phi(y)+\Phi(-x)\Phi(-y)\quad (2)\]</span> 其中，<spanclass="math inline">\(\Phi(x)=\frac{1}{\sqrt{2\pi}\sigma}\int_{-\infty}^xe^{-\frac{t^2}{2\sigma^2}}dt\)</span>.</p><p>对于 X-Corner，我们可以使用由图像函数的 Hessian矩阵的特征值推导出的新形状算子。</p><p>Hessian矩阵的特征值对应曲面的最小和最大二阶导数，它们的相关特征向量是二阶导数极值的方向，并且相互正交.将图像函数中一个像素的邻域视为一个表面块，Hessian 矩阵表示为 <spanclass="math display">\[\mathbf{H}=\begin{bmatrix}r_{xx}&amp;r_{xy}\\r_{xy}&amp;r_{yy}\end{bmatrix}\]</span> <span class="math inline">\(r_{xx},r_{xy},r_{yy}\)</span>是图像函数 <span class="math inline">\(r(x,y)\)</span> 的二阶偏导数.Hessian 矩阵的两个特征值为: <span class="math display">\[\lambda_1=\frac{1}{2}(r_{xx}+r_{yy}+D),\lambda_2=\frac{1}{2}(r_{xx}+r_{yy}-D).\]</span> 对应的归一化特征向量是： <span class="math display">\[\mathbf{n}_1=\begin{bmatrix}\sqrt{\frac{1}{2}\left(1-\frac{f_{yy}-f_{xx}}{D}\right)}&amp;\sqrt{\frac{1}{2}\left(1+\frac{f_{yy}-f_{xx}}{D}\right)}\end{bmatrix}^T\\\mathbf{n}_2=\begin{bmatrix}\sqrt{\frac{1}{2}\left(1+\frac{f_{yy}-f_{xx}}{D}\right)}&amp;-\sqrt{\frac{1}{2}\left(1-\frac{f_{yy}-f_{xx}}{D}\right)}\end{bmatrix}^T\]</span></p><p>其中，<spanclass="math inline">\(D=\sqrt{(r_{xx}-r_{yy})^2+4r_{xy}^2}\)</span>.</p><p>对于方程（2）中的 X-Corner，对应的 Hessian 矩阵的最大特征值 <spanclass="math inline">\(\lambda_1\)</span> 是正的，最小特征值 <spanclass="math inline">\(\lambda_2\)</span>是负的，因此我们可以得到一个新的简单算子来检测x角点的像素位置： <spanclass="math display">\[S=\lambda_1\cdot\lambda_2=r_{xx}r_{yy}-r_{xy}^2.\]</span> 待检测角是 <span class="math inline">\(S\)</span>的局部负极值点. 基于这个约束，我们可以确定 X-Corner 的像素位置 <spanclass="math inline">\((x_0,y_0)\)</span>.</p><p><strong>亚像素检测：</strong></p><p>很明显，X-Corner 真正的亚像素位置必须位于 <spanclass="math inline">\((x_0,y_0)\)</span> 附近。我们假设它的实际位置是<span class="math inline">\((x_0+s,y_0+t)\)</span>. <spanclass="math inline">\((s,t)\in[-0.5,0.5]\times[-0.5,0.5]\)</span>.对于每个X-Corner，我们可以使用第二个泰勒多项式来描述它周围的局部强度分布： <spanclass="math display">\[r(x_0+s,y_0+t)=r+\begin{pmatrix}s&amp;t\end{pmatrix}\begin{pmatrix}r_x\\r_y\end{pmatrix}+\frac{1}{2}\begin{pmatrix}s&amp;t\end{pmatrix}\begin{pmatrix}r_{xx}&amp;r_{xy}\\r_{xy}&amp;r_{yy}\end{pmatrix}\begin{pmatrix}s\\t\end{pmatrix}\quad (3)\]</span> <span class="math inline">\(r\)</span> 是图像函数 <spanclass="math inline">\(r(x,y)\)</span> 在点 <spanclass="math inline">\((x_0,y_0)\)</span> 的值. <spanclass="math inline">\(r_x,r_y\)</span> 是 <spanclass="math inline">\(r(x,y)\)</span> 在点 <spanclass="math inline">\((x_0,y_0)\)</span> 的一阶偏导，<spanclass="math inline">\(r_{xx},r_{xy},r_{yy}\)</span> 是 <spanclass="math inline">\(r(x,y)\)</span> 在点 <spanclass="math inline">\((x_0,y_0)\)</span> 的二阶偏导.</p><p>如上所述，X-Corner 就是强度剖面的鞍点. 我们可以将 式（3）沿 <spanclass="math inline">\(s\)</span> 和 <spanclass="math inline">\(t\)</span> 的一阶导数设为0： <spanclass="math display">\[\begin{cases}r_{xx}s+r_{xy}t+r_x=0\\r_{xy}s+r_{yy}t+r_y=0\end{cases}\]</span> 然后我们就可以得到亚像素的位置 <spanclass="math inline">\((x_0+s,y_0+t)\)</span>： <spanclass="math display">\[s=\frac{r_yr_{xy}-r_xr_{yy}}{r_{xx}r_{yy}-r_{xy}^2},t=\frac{r_xr_{xy}-r_yr_{xx}}{r_{xx}r_{yy}-r_{xy}^2}.\]</span> <strong>Detection of X-corners in DiscreteSpace</strong>：</p><p>对于离散图像，只需要做一个修改，即在离散空间中实现卷积。这里我们选择标准高斯核作为卷积掩码：<span class="math display">\[g(m,n)=\frac{1}{2\pi\sigma^2}e^{-\frac{m^2+n^2}{2\sigma^2}}\]</span> 掩码的维度为 <spanclass="math inline">\((2N+1)\times(2N+1)\)</span>，其中 <spanclass="math inline">\(N\)</span> 为 <spanclass="math inline">\(4[\sigma]\)</span>.然后将离散图像与相应的微分核进行卷积，得到离散图像的偏导数。</p><h3 id="图像求导问题">图像求导问题</h3><h4 id="一阶导数">一阶导数</h4><p>导数的的定义： <span class="math display">\[f&#39;(x)=\lim\limits_{\Delta x\rightarrow0}\frac{f(x+\Deltax)-f(x)}{\Delta x}\qquad (1)\]</span> 由于图像的像素是离散的，所以通常采用差分的形式，取 $x=1$，在图像中 <span class="math inline">\((x,y)\)</span> 处的方向导数为：<span class="math display">\[\frac{\partial f}{\partial x}=f(x+1,y)-f(x,y) \qquad (2)\]</span></p><p>关于差分： <span class="math display">\[\begin{align*}&amp;向前差分：f&#39;(x)\approx\frac{f(x+h)-f(x)}{h}\\&amp;向后差分：f&#39;(x)\approx\frac{f(x)-f(x-h)}{h} \\&amp;中心差分：f&#39;(x)\approx\frac{f(x+0.5h)-f(x-0.5)}{h}\end{align*}\]</span></p><p>Sobel 算子计算梯度的方式略有不同.</p><p><img src="/img/X-Corners/sobel.png" /></p><p>根据式（2）计算 <span class="math inline">\(P\)</span>点处的方向导数为： <span class="math display">\[P&#39;_x=D-P,\quad P&#39;_y = F-P\]</span> <img src="/img/X-Corners/diff.png" /></p><p>对于 sobel 算子为： <span class="math display">\[P&#39;_x=2*D+C+E-2*H-A-G,\\P&#39;_y=2*F+G+E-2*B-A-C\]</span> <img src="/img/X-Corners/sobel1.png" /></p><p>使用 sobel 算子计算 <span class="math inline">\(P\)</span>点的梯度有： <span class="math display">\[\grad(f)=\vert P&#39;_x\vert+\vert P&#39;_y\vert\]</span> 对角线方向导数有： <span class="math display">\[P&#39;_{xy} = 2*G+H+F-2*C-B-D\\P&#39;_{yx} = 2*E+F+D-2*A-H-B\]</span> <img src="/img/X-Corners/sobel2.png" /></p><h4 id="二阶导数">二阶导数</h4><p>数学定义为： <span class="math display">\[f&#39;&#39;(x)=\lim\limits_{\Delta x\rightarrow0}\frac{f&#39;(x+\Deltax)-f&#39;(x)}{\Delta x} \qquad (3)\]</span> 向前差分： <span class="math display">\[\frac{\partial^2f(x,y)}{\partialx^2}=f&#39;_x(x+1,y)-f&#39;_x(x,y)\qquad (4)\]</span> 由 <spanclass="math inline">\(f&#39;_x(x,y)=f(x+1,y)-f(x,y)\)</span>，<spanclass="math inline">\(f&#39;_x(x+1,y)=f(x+2,y)-f(x+1,y)\)</span> 得：<span class="math display">\[\begin{align*}\frac{\partial^2f(x,y)}{\partialx^2}&amp;=f(x+2,y)-f(x+1,y)-f(x+1,y)+f(x,y)\\&amp;=f(x+2,y)-2f(x+1,y)+f(x,y)\end{align*}\]</span> 向后差分： <span class="math display">\[\begin{align*}f&#39;&#39;_{xx}(x,y)&amp;=f&#39;_x(x,y)-f&#39;_x(x-1,y)\\&amp;=f(x+1,y)-f(x,y)-f(x,y)-f(x-1,y)\\&amp;=f(x+1,y)-2f(x,y)-f(x-1,y)\end{align*}\]</span> 同理： <span class="math display">\[f&#39;&#39;_{yy}(x,y)=f(x,y+1)-2f(x,y)-f(x,y-1)\]</span> 对于 <spanclass="math inline">\(\frac{\partial^2f(x,y)}{\partial x\partialy}\)</span> ，向后差分: <span class="math display">\[\begin{align*}\frac{\partial^2f(x,y)}{\partial x\partialy}&amp;=\frac{f&#39;_x(x,y)}{\partial y}\\&amp;=f&#39;_x(x,y)-f&#39;_x(x,y-1)\\&amp;=f(x+1,y)-f(x,y)-[f(x+1,y-1)-f(x,y-1)]\\&amp;=f(x+1,y)-f(x+1,y-1)-f(x,y)+f(x,y-1)\end{align*}\]</span> 向后差分： <span class="math display">\[\begin{align*}\frac{\partial^2f(x,y)}{\partial x\partialy}&amp;=\frac{f&#39;_x(x,y)}{\partial y}\\&amp;=f&#39;_x(x,y+1)-f&#39;_x(x,y)\\&amp;=f(x+1,y+1)-f(x,y+1)-[f(x+1,y)-f(x,y)]\\&amp;=f(x+1,y+1)-f(x,y+1)+f(x,y)-f(x+1,y)\end{align*}\]</span></p><p><img src="/img/X-Corners/2-order-diff.png" /></p><h4 id="hessian-矩阵">Hessian 矩阵</h4><p><span class="math display">\[\mathbf{Hessian} = \begin{bmatrix}f&#39;&#39;_{xx}&amp;f&#39;&#39;_{xy}\\f&#39;&#39;_{yx}&amp;f&#39;&#39;_{yy}\end{bmatrix}\]</span></p><p>二元函数泰勒公式的近似表达式： <span class="math display">\[f(x,y)=f(x_0,y_0)+\begin{pmatrix}dx&amp;dy\end{pmatrix}\begin{pmatrix}f&#39;_x\\f&#39;_y\end{pmatrix}+\frac{1}{2}\begin{pmatrix}dx&amp;dy\end{pmatrix}\begin{pmatrix}f&#39;&#39;_{xx}&amp;f&#39;&#39;_{xy}\\f&#39;&#39;_{yx}&amp;f&#39;&#39;_{yy}\end{pmatrix}\begin{pmatrix}dx\\dy\end{pmatrix}\]</span> 其极值情况可由 <spanclass="math inline">\(\mathbf{Hessian}\)</span> 矩阵来判定，令 <spanclass="math inline">\(\Delta\mathbf{x}=\begin{pmatrix}dx&amp;dy\end{pmatrix}\)</span>，<spanclass="math inline">\(\mathbf{H}=\begin{pmatrix}f&#39;&#39;_{xx}&amp;f&#39;&#39;_{xy}\\f&#39;&#39;_{yx}&amp;f&#39;&#39;_{yy}\end{pmatrix}\)</span>.当 <span class="math inline">\((f&#39;_x,f&#39;_y)=0\)</span>时，如果对于任意向量 <spanclass="math inline">\(\Delta\mathbf{x}\)</span>，都有 <spanclass="math inline">\(\Delta\mathbf{x}\mathbf{H}\Delta\mathbf{x}^T\)</span>为正，那么 <span class="math inline">\(\mathbf{H}\)</span>为正定矩阵，函数具有局部极小值. 如果对于任意向量 <spanclass="math inline">\(\Delta\mathbf{x}\)</span>，都有 <spanclass="math inline">\(\Delta\mathbf{x}\mathbf{H}\Delta\mathbf{x}^T\)</span>为负，那么 <span class="math inline">\(\mathbf{H}\)</span>为负定矩阵，函数具有局部极大值.</p><p><font color='pink'>当 Hessian矩阵同时具有正负特征值时，该点为鞍点.</font></p>]]></content>
    
    
    <categories>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>相机标定</tag>
      
      <tag>角点检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 基础入门</title>
    <link href="/2022/06/24/Linux/Docker%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2022/06/24/Linux/Docker%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="核心概念与安装配置">核心概念与安装配置</h2><p>Docker 的三大核心概念：</p><ul><li>镜像(Image)</li><li>容器(Container)</li><li>仓库(Repository)</li></ul><h3 id="核心概念">核心概念</h3><ol type="1"><li>Docker 镜像</li></ol><p>Docker 镜像可以将其理解为一个只读的模板。它是 docker容器的基础。用户可以从网络上下载已经配置好的镜像，并直接使用。</p><ol start="2" type="1"><li>Docker 容器</li></ol><p>Docker容器类似于一个轻量级的沙箱，用于运行和隔离应用。<font color='geen'>容器是从镜像创建的应用运行实例。</font>可以将其启动、开始、停止和删除。</p><p class="note note-primary">镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层</p><ol start="3" type="1"><li>Docker 仓库</li></ol><p>Docker 仓库是 Docker 集中存放镜像文件的场所。</p><p>Docker 仓库的类型：</p><ul><li>公开仓库(Public)</li><li>私有仓库(Private)</li></ul><h3 id="docker-的安装">Docker 的安装</h3><h4 id="ubuntu-环境下安装-docker">Ubuntu 环境下安装 Docker</h4><p>推荐至少使用 <code>14.04 LTS</code> 版本。</p><p>为了让 Docker 使用 aufs 存储，推荐安装 <code>linux-image-extra</code>软件包：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y linux-image-extra-$(<span class="hljs-built_in">uname</span> -r)</span><br></code></pre></div></td></tr></table></figure><p><strong>添加镜像源</strong>：</p><p>安装 <code>apt-transport-https</code> 包支持 HTTP 协议的源：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y apt-transport-https</span><br></code></pre></div></td></tr></table></figure><p>添加源的 gpg 密钥：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys</span> <br>    58118E89F3A912897C070ADBF76221572C52609D<br></code></pre></div></td></tr></table></figure><p>获取当前操作系统的代号：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">lsb_release -c</span><br>Codename:       trusty<br></code></pre></div></td></tr></table></figure><p>接下来就可以添加Docker的官方apt软件源了。通过下面的命令创建<code>/etc/apt/sources.list.d/docker.list</code>文件，并写入源的地址内容。非 trusty版本的系统注意修改为自己对应的代号：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/apt/sources.list.d/docker.list</span></span><br>deb https://apt.dockerproject.org/repo ubuntu-trusty main<br>EOF<br></code></pre></div></td></tr></table></figure><p>更新 apt 软件包缓存：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br></code></pre></div></td></tr></table></figure><p><strong>安装 Docker</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y docker-engine</span><br></code></pre></div></td></tr></table></figure><p>通过脚本自动化安装 Docker：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo curl -sSL https://get.docker.com/ | sh</span><br></code></pre></div></td></tr></table></figure><p>启动 docker 服务：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start docker</span><br></code></pre></div></td></tr></table></figure><h4 id="centos-环境下安装-docker">CentOS 环境下安装 Docker</h4><p>添加 yum 软件源：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">tee</span> /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span></span><br>[dockerrepo]<br>name=Docker Repository<br>baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/<br>enabled=1<br>gpgcheck=1<br>gpgkey=https://yum.dockerproject.org/gpg<br>EOF<br></code></pre></div></td></tr></table></figure><p>安装 docker：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install -y docker-engine</span><br></code></pre></div></td></tr></table></figure><h4 id="使用脚本安装">使用脚本安装</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL https://get.docker.com/ | sh</span><br></code></pre></div></td></tr></table></figure><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget -qO- https://get.docker.com/ | sh</span><br></code></pre></div></td></tr></table></figure><h3 id="配置-docker-服务">配置 Docker 服务</h3><p>将当前用户加入 docker 用户组：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -aG docker USER_NAME</span><br></code></pre></div></td></tr></table></figure><p>Docker 服务的默认配置文件：<code>/etc/default/docker</code></p><p>可以通过修改 <code>DOCKER_OPTS</code> 来修改服务启动的参数。</p><p>Docker 服务的管理脚本：<code>/etc/init.d/docker</code></p><p>查看版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker verison</span><br>Client: Docker Engine - Community<br> Version:           20.10.17<br> API version:       1.41<br> Go version:        go1.17.11<br> Git commit:        100c701<br> Built:             Mon Jun  6 23:02:56 2022<br> OS/Arch:           linux/amd64<br> Context:           default<br> Experimental:      true<br><br>Server: Docker Engine - Community<br> Engine:<br>  Version:          20.10.17<br>  API version:      1.41 (minimum version 1.12)<br>  Go version:       go1.17.11<br>  Git commit:       a89b842<br>  Built:            Mon Jun  6 23:01:02 2022<br>  OS/Arch:          linux/amd64<br>  Experimental:     false<br> containerd:<br>  Version:          1.6.6<br>  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1<br> runc:<br>  Version:          1.1.2<br>  GitCommit:        v1.1.2-0-ga916309<br> docker-init:<br>  Version:          0.19.0<br>  GitCommit:        de40ad0<br><br></code></pre></div></td></tr></table></figure><h2 id="docker-镜像">Docker 镜像</h2><p>Docker 运行容器前需要本地存在对应的镜像，若本地无镜像，Docker将从默认的镜像仓库下载，用户可以通过配置，使用自定义的镜像仓库。</p><h3 id="镜像获取">镜像获取</h3><p>使用 <code>docker pull</code> 命令从 <code>Docker Hub</code>镜像仓库下载镜像。</p><p>命令格式：<code>docker pull Image-Name[: TAG]</code> (TAG通常是版本信息)</p><p>没有指定 TAG，默认为 <code>latest</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull ubuntu</span><br>Using default tag: latest<br>latest: Pulling from library/ubuntu<br>405f018f9d1d: Pull complete<br>Digest:sha256:b6b83d3c331794420340093eb706a6f152d9c1fa51b262d9bf34594887c2c7ac<br>Status: Downloaded newer image for ubuntu:latest<br>docker.io/library/ubuntu:latest<br></code></pre></div></td></tr></table></figure><p>镜像文件一般由若干层(layer)组成，每个层都有一个唯一的 ID(如：<code>405f018f9d1d</code>)。使用 <code>docker pull</code>命令下载时会获取并输出镜像的各层信息。当不同的镜像包括相同的层时，本地仅存储层的一份内容，减小了需要的存储空间。</p><p>镜像名称之前应该加上仓库地址前缀，使用官方仓库时默认省略，即：<code>docker pull ubuntu：14.04</code>相当于<code>docker pull registry.hub.docker.com/ubuntu：14.04</code>。</p><p><font color='pink'>若从非官方仓库下载镜像，则必须指定仓库地址前缀。</font></p><p><code>pull</code> 子命令支持的选项：</p><p><code>-a,--all-tags=true|false</code> -是由获取仓库中所有镜像，默认为 否。</p><h3 id="查看镜像信息">查看镜像信息</h3><h4 id="列出所有镜像">列出所有镜像</h4><p>命令：<code>docker images</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span><br>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE<br>ubuntu       latest    27941809078c   2 weeks ago   77.8MB<br></code></pre></div></td></tr></table></figure><ul><li>REPOSITORY - 来自于那个仓库</li><li>TAG - 版本信息</li><li>IMAGE ID - 唯一标识镜像</li><li>CREATED - 镜像的最后更新时间</li><li>SIZE - 镜像大小</li></ul><p><code>images</code> 子命令主要支持的选项：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-a, --all=true|false: 列出所有镜像（包含临时文件），默认为 否；<br>--digests=true|false: 列出镜像的数字摘要值，默认为 否；<br>-f, --filter=[]: 过滤列出镜像；<br>--format=&quot;TEMPLATE&quot;: 控制输出格式，.ID代表ID信息，.Repository代币哦仓库信息；<br>--no-trunc=true|false: 对输出结果中太长的部分是否进行截断，默认为 是；<br>-q, --quiet=true|false: 仅输出ID信息，默认为　否<br></code></pre></div></td></tr></table></figure><p>使用 <code>man docker-images</code> 查看更多命令选项。</p><h4 id="添加镜像标签">添加镜像标签</h4><p>使用 <code>tag</code>命令来为一个本地镜像添加新的标签，以方便使用：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker tag ubuntu:latest myubuntu:latest</span><br></code></pre></div></td></tr></table></figure><h4 id="查看详细信息">查看详细信息</h4><p>使用 <code>inspect</code> 命令获取镜像的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker inspect ubuntu:14.04</span><br></code></pre></div></td></tr></table></figure><p>返回的消息为 JSON 格式的消息，如果只想获取其中一项，使用<code>-f</code> 参数来指定：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker inspect -f &#123;&#123;<span class="hljs-string">&quot;.Architecture&quot;</span>&#125;&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="查看镜像的历史">查看镜像的历史</h4><p>使用 <code>history</code> 命令来查看镜像的历史：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">history</span> ubuntu:14.04</span><br></code></pre></div></td></tr></table></figure><p>可以查看各个层的内容具体的创建信息。</p><h3 id="搜索镜像">搜索镜像</h3><p>使用 <code>docker search</code>命令来搜索远程仓库中的镜像，默认使用官方仓库。</p><p>支持的参数有 ：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">--no-trunc=true|false: 输出信息不截断显示，默认为 否；<br>-f, --filter=[]: 基于条件过滤输出<br>--limit=25: 搜索结果的最大数量<br></code></pre></div></td></tr></table></figure><p>搜索所有自动创建的评价为1+的带nginx关键字的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker search --<span class="hljs-built_in">limit</span>=10 nginx</span><br></code></pre></div></td></tr></table></figure><h3 id="删除镜像">删除镜像</h3><p>使用 <code>docker rmi</code> 命令来删除镜像：</p><h4 id="使用标签删除">使用标签删除</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker rmi ubuntu:latest</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>当一个镜像拥有多个标签时，删除某一个标签并不会影响原来的镜像</p>          </div><h4 id="使用镜像-id-删除">使用镜像 ID 删除</h4><p>当使用 ID 进行删除时，所有的镜像标签包括原始镜像本身都会被删除。</p><div class="note note-success">            <p>若镜像创建的容器存在时，则该镜像文件将无法被删除。</p>          </div><p>如果需要强制删除，可以使用 <code>-f</code> 参数。</p><h3 id="创建镜像">创建镜像</h3><p>有三种方式创建镜像：</p><ul><li>基于已有镜像的容器创建</li><li>基于本地模板导入</li><li>基于 Dockerfile 创建</li></ul><h4 id="基于已有镜像的容器创建">基于已有镜像的容器创建</h4><p>使用 <code>docker commit</code> 命令来创建。</p><p>主要选项包括：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-a, --author=&quot;&quot;: 作者信息<br>-c, --change=[]: 提交的执行 Dockerfile 指令<br>-m, --message=&quot;&quot;: 提交信息<br>-p, --pause=true: 提交时暂停容器的运行<br></code></pre></div></td></tr></table></figure><p>提交时使用容器的 ID 或名称来指定容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker commit -m <span class="hljs-string">&quot;Added a new file&quot;</span> -a <span class="hljs-string">&quot;Anson&quot;</span> a925cb40b3f0 <span class="hljs-built_in">test</span>:0.1</span><br></code></pre></div></td></tr></table></figure><h4 id="基于本地模板导入">基于本地模板导入</h4><p>使用 <code>docker inport</code> 命令来创建。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04</span><br></code></pre></div></td></tr></table></figure><h3 id="存出和载入镜像">存出和载入镜像</h3><h4 id="存出镜像">存出镜像</h4><p>使用 <code>docker save</code> 来存出镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></code></pre></div></td></tr></table></figure><h4 id="载入镜像">载入镜像</h4><p>使用 <code>docker load</code> 来载入镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker load --input ubuntu_14.04.tar</span><br></code></pre></div></td></tr></table></figure><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker load &lt; ubuntu_14.04.tar</span><br></code></pre></div></td></tr></table></figure><h3 id="上传镜像">上传镜像</h3><p>使用 <code>docker push</code> 命令来上传镜像到仓库，默认为官方 DockerHub仓库：</p><p><code>docker push NAME[:TAG] | [REGISTRY_HOST[:REGISTRY_PORT]/]NAME[:TAG]</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker tag <span class="hljs-built_in">test</span>:latest user/test:latest</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker push user/test:latest</span><br></code></pre></div></td></tr></table></figure><h2 id="docker-容器">Docker 容器</h2><p>容器是镜像运行的实例。镜像是静态的只读文件，而容器带有运行时需要的可写文件层。</p><h3 id="创建容器">创建容器</h3><h4 id="新建容器">新建容器</h4><p>使用 <code>docker create</code> 命令来创建一个容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker create -it ubuntu:latest</span><br></code></pre></div></td></tr></table></figure><p>此时容器处于停止状态，可以使用 <code>docker start</code>命令来启动它。</p><h4 id="启动容器">启动容器</h4><p>使用 <code>docker start</code> 命令来启动一个已经创建的容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker start af</span><br>af<br></code></pre></div></td></tr></table></figure><h4 id="新建并启动容器">新建并启动容器</h4><p>使用 <code>docker run</code> 命令来创建并执行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run ubuntu /bin/echo <span class="hljs-string">&#x27;Hello world&#x27;</span></span><br>Hello world<br></code></pre></div></td></tr></table></figure><p>启动一个 bash 终端：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -it ubuntu:14.04 /bin/bash</span><br></code></pre></div></td></tr></table></figure><ul><li><code>-t</code> - 让 Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</li><li><code>-i</code> - 让容器的标准输入保持打开</li></ul><p><code>Ctrl + d</code> 或 输入 exit 退出容器。</p><h4 id="守护态运行">守护态运行</h4><p>通过添加 <code>-d</code> 参数实现：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d ubuntu  /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;<br></code></pre></div></td></tr></table></figure><h3 id="终止容器">终止容器</h3><p>使用 <code>docker stop</code> 命令来终止一个运行中的容器。</p><p><code>docker stop[-t|--time[=10]][CONTAINER...]</code></p><p>首先向容器发送 SIGTERM 信号，等待一段超时时间（默认为10秒）后，再发送SIGKILL信号来终止容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker stop ce5</span><br>ce5<br></code></pre></div></td></tr></table></figure><p><font color='red'><code>docker kill</code> 命令会直接发送 SIGKILL信号来强行终止容器。</font></p><p>重新启动一个容器使用 <code>docker restart</code> 命令。</p><h3 id="进入容器">进入容器</h3><p>进入容器的方法：</p><ul><li><code>attach</code></li><li><code>exec</code></li><li><code>nsenter</code></li><li>...</li></ul><h4 id="attach-命令"><code>attach</code> 命令</h4><p><code>docker attach [--detach-keys[=[]]] [--no-stdin] [--sig-proxy[=true]] CONTAINER</code></p><p>主要选项：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">--detach-keys=&quot;&quot;: 重写用于退出容器的键序列<br>--no-stdin[=false]: 是否关闭标准输入<br>--sig-proxy[=true]: 代理进程接收到的所有信号<br><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>当多个窗口同时使用 attach命令连接到同一个容器时，所有的窗口都会同步显示。当某个窗口阻塞时，其他窗口也无法执行操作了。</p>          </div><h4 id="exec-命令"><code>exec</code> 命令</h4><p>主要参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-i, --interactive[=false]: 使用标准输入接受用户命令<br>--privileged[=false]: 赋予命令拓展权限<br>-t, --tty[=false]: 分配 pseudo-TTY<br>-u, --user=&quot;&quot;: 用户名或 UID (format:[:])<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it 55c0389b9d7c /bin/bash</span><br></code></pre></div></td></tr></table></figure><h4 id="nsenter-工具">nsenter 工具</h4><ol type="1"><li><p>找到容器进程的 PID，命令如下：</p><p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">PID=$(docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; &lt;container&gt;)<br></code></pre></div></td></tr></table></figure></p></li><li><p>通过 PID 连接到容器</p><p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nsenter --target <span class="hljs-variable">$PID</span> --mount --uts --ipc --net --pid</span><br></code></pre></div></td></tr></table></figure></p></li></ol><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -idt ubuntu</span><br>243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps</span><br>CONTAINER ID   IMAGE   COMMAND   CREATED  STATUS   PORTS  NAMES<br>243c32535da7  ubuntu:latest   &quot;/bin/bash&quot;  18 seconds ago  Up 17 seconds <br>    nostalgic_hypatia<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">PID=$(docker-pid 243c32535da7)</span><br>10981<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nsenter --target 10981 --mount --uts --ipc --net --pid</span><br>root@243c32535da7:/#<br></code></pre></div></td></tr></table></figure><h3 id="删除容器">删除容器</h3><p>使用 <code>docker rm</code> 命令来删除容器。</p><p>主要参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-f, --force[=false]: 强制删除正在运行的容器<br>-l,--link[=false]: 删除指定的链接，但保留容器<br>-v, --volumes[=false]: 删除容器挂载的数据卷<br></code></pre></div></td></tr></table></figure><h3 id="导入和导出容器">导入和导出容器</h3><p>在需要将容器从一个系统迁移到另一个系统的情况下，可以使用 Docker的导入和导出功能。</p><h4 id="导出容器">导出容器</h4><p>使用 <code>docker export</code> 命令来导出容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">export</span> -o test_for_run.tar ce5</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">export</span> e81 &gt; test_for_stop.tar</span><br></code></pre></div></td></tr></table></figure><h4 id="导入容器">导入容器</h4><p>使用 <code>docker import</code> 命令来导入容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker import test_for_run.tar - <span class="hljs-built_in">test</span>/ubuntu:v1.0</span><br></code></pre></div></td></tr></table></figure><h2 id="访问-docker-仓库">访问 Docker 仓库</h2><p>仓库（Repository）是集中存放镜像的地方，分公共仓库和私有仓库。</p><h3 id="docker-hub公共镜像市场">Docker Hub公共镜像市场</h3><p>Docker官方维护了一个公共镜像仓库 https://hub.docker.com</p><h3 id="时速云镜像市场">时速云镜像市场</h3><p>访问地址 https://hub.tenxcloud.com</p><h3 id="搭建本地私有仓库">搭建本地私有仓库</h3><h4 id="使用-registry-镜像创建私有仓库">使用 registry镜像创建私有仓库</h4><p>使用 <code>registry</code> 镜像来简单搭建一套本地私有仓库环境：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 5000:5000 registry</span><br></code></pre></div></td></tr></table></figure><p>默认情况下，会将仓库创建在容器的 <code>/tmp/registry</code>目录下。使用参数 <code>-v</code> 将镜像文件存放在本地的指定路径。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</span><br><br></code></pre></div></td></tr></table></figure><h4 id="管理私有仓库">管理私有仓库</h4><p>使用 <code>docker tag</code> 命令将这个镜像标记为10.0.2.2：5000/test</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker tag ubuntu:14.04 10.0.2.2:5000/test</span><br></code></pre></div></td></tr></table></figure><p>使用 <code>docker push</code> 上传标记的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker push 10.0.2.2:5000/test</span><br></code></pre></div></td></tr></table></figure><h2 id="docker-数据管理">Docker 数据管理</h2><p>生产环境中使用 Docker的过程中，往往需要对数据进行持久化，或者需要在多个容器之间进行数据共享，这必然涉及容器的数据管理操作。</p><p>容器中管理数据主要有两种方式：</p><ul><li>数据卷(Data Volumes)：容器内数据直接映射到本地主机环境；</li><li>数据卷容器(Data Volume Containers)：使用特定容器维护数据卷。</li></ul><h3 id="数据卷">数据卷</h3><p>数据卷的特性：</p><ul><li>数据卷可以在容器之间共享和重用，容器间传递数据将变得高效方便；</li><li>对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作；</li><li>对数据卷的更新不会影响镜像，解耦了应用和数据；</li><li>卷会一直存在，直到没有容器使用，可以安全地卸载它。</li></ul><h4 id="在容器内创建一个数据卷">在容器内创建一个数据卷</h4><p>在 <code>docker run</code> 命令下，使用参数 <code>-v</code>在容器内创建一个数据卷。重复使用可创建多个。</p><p>例：</p><p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -P --name web -v /webapp training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure></p><h4 id="挂载一个主机目录作为数据卷">挂载一个主机目录作为数据卷</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><p>加载主机的 <code>/src/webapp</code> 目录到容器的<code>/opt/webapp</code> 目录</p><p>注：本地目录的路径必须是绝对路径，如果目录不存在，Docker会自动创建。</p><p>Docker 挂载数据卷的默认权限是读写（rw），用户也可以通过 ro指定为只读：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -P --name web -v /src/webapp:/opt/webapp:ro</span><br>training/webapp python app.py<br></code></pre></div></td></tr></table></figure><h4id="挂载一个本地主机文件作为数据卷">挂载一个本地主机文件作为数据卷</h4><p><code>-v</code>也可以从主机挂载单个文件到容器中作为数据卷（不推荐）。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --<span class="hljs-built_in">rm</span> -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</span><br></code></pre></div></td></tr></table></figure><h3 id="数据卷容器">数据卷容器</h3><p>如果用户需要在多个容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器。数据卷容器也是一个容器，但是它的目的是专门用来提供数据卷供其他容器挂载。</p><ol type="1"><li><p>创建一个数据卷容器 dbdata，并在其中创建一个数据卷挂载到/dbdata:</p><p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -it -v /dbdata --name dbdata ubuntu</span><br>root@3ed94f279b6f:/#<br></code></pre></div></td></tr></table></figure></p></li><li><p>然后，可以在其他容器中使用 <code>--volumes-from</code> 来挂载dbdata 容器中的数据卷，例如创建 db1 和 db2两个容器，并从dbdata容器挂载数据卷：</p><p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -it --volumes-from dbdata --name db1 ubuntu</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -it --volumes-from dbdata --name db2 ubuntu</span><br></code></pre></div></td></tr></table></figure></p></li></ol><div class="note note-success">            <p>使用 <code>--volumes-from</code>参数所挂载数据卷的容器自身并不需要保持在运行状态。</p><p>如果删除了挂载的容器（包括dbdata、db1和db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用<code>docker rm-v</code> 命令来指定同时删除关联的容器。</p>          </div><h3 id="利用数据卷容器来迁移数据">利用数据卷容器来迁移数据</h3><ol type="1"><li>备份</li></ol><p>备份 dbdata 数据卷容器内的数据卷：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --volumes-from dbdata -v $(<span class="hljs-built_in">pwd</span>):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata</span><br></code></pre></div></td></tr></table></figure><ul><li>镜像：ubuntu</li><li>容器：worker</li><li><code>-v $(pwd):/backup</code>：挂载本地的当前目录到 worker 容器的<code>/backup</code> 目录</li><li><code>--volumes-from dbdata</code>：让 worker 容器挂载 dbdata容器的数据卷</li><li><code>tar cvf/backup/backup.tar /dbdata</code>：将<code>/dbdata</code> 下内容备份为容器内的<code>/backup/backup.tar</code></li></ul><ol start="2" type="1"><li>恢复</li></ol><p>将数据恢复到一个容器：</p><p>首先创建一个带有数据卷的容器 dbdata2：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span><br></code></pre></div></td></tr></table></figure><p>然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所挂载的容器卷中：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --volumes-from dbdata2 -v $(<span class="hljs-built_in">pwd</span>):/backup busybox tar xvf /backup/backup.tar</span><br></code></pre></div></td></tr></table></figure><h2 id="端口映射与容器互联">端口映射与容器互联</h2><h3 id="端口映射实现访问容器">端口映射实现访问容器</h3><ol type="1"><li>从外部访问容器应用</li></ol><p>在启动容器的时候，如果不指定对应的参数，在容器外部是无法通过网络来访问容器内的网络应用和服务的。</p><p>当容器中运行一些网络应用，要让外部访问这些应用时，可以通过<code>-P</code> 或 <code>-p</code> 参数来指定端口映射。当使用<code>-P</code> 参数时，Docker会随机映射一个 49000~49900的端口到内部容器开放的网络端口：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d -P training/webapp python app.py<br></code></pre></div></td></tr></table></figure><p>可以使用 <code>docker logs</code> 命令来查看应用的信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker logs -f nostalgic_morse</span><br></code></pre></div></td></tr></table></figure><p><code>-p</code>可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有<code>IP：HostPort：ContainerPort</code>、<code>IP：：ContainerPort</code>、<code>HostPort：ContainerPort</code>。</p><ol start="2" type="1"><li>映射所有接口地址</li></ol><p>使用 <code>HostPort：ContainerPort</code> 格式将本地的 5000端口映射到容器的 5000 端口，可以执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 5000:5000 training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><p>多次使用 <code>-p</code> 参数可以绑定多个端口。</p><ol start="3" type="1"><li>映射到指定地址的指定端口</li></ol><p>可以使用 <code>IP：HostPort：ContainerPort</code>格式指定映射使用一个特定地址，比如localhost 地址 127.0.0.1：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><ol start="4" type="1"><li>映射到指定地址的任意端口</li></ol><p>使用 <code>IP：：ContainerPort</code> 绑定 localhost的任意端口到容器的 5000端 口，本地主机会自动分配一个端口：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><p>还可以使用 upd 标记来指定 UDP 端口：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><ol start="5" type="1"><li>查看映射端口配置</li></ol><p>使用 <code>docker port</code>命令来查看当前映射的端口配置，也可以查看绑定的地址：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker port nostalgic_morse 5000</span><br>127.0.0.1:49155<br></code></pre></div></td></tr></table></figure><h3 id="互联机制实现便捷互访">互联机制实现便捷互访</h3><p>容器的互联（linking）是一种让多个容器中应用进行快速交互的方式。它会在源和接收容器之间创建连接关系，接收容器可以通过容器名快速访问到源容器，而不用指定具体的IP 地址。</p><ol type="1"><li>自定义容器命名</li></ol><p>使用 <code>--name</code> 参数可以为容器自定义命名：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -P --name web training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>容器的名称是唯一的。</p>          </div><ol start="2" type="1"><li>容器互联</li></ol><p>使用 <code>--link</code> 参数可以让容器之间安全地进行交互。</p><p>创建一个新的数据库容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --name db training/postgres</span><br></code></pre></div></td></tr></table></figure><p>创建一个新的 web 容器，并将它连接到 db 容器：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -P --name web --<span class="hljs-built_in">link</span> db:db training/webapp python app.py</span><br></code></pre></div></td></tr></table></figure><p><code>--link</code> 参数的格式为<code>--link name: alias</code>，其中 name 是要连接的容器名称，alias是这个连接的别名。</p><p>web 容器连接到 db 容器，这允许web容器访问db容器的信息。</p><p>Docker通过两种方式为容器公开连接信息：</p><ul><li>更新环境变量</li><li>更新 <code>/etc/hosts</code> 文件</li></ul><h2 id="使用-dockerfile-创建镜像">使用 Dockerfile 创建镜像</h2><p>Dockerfile 是一个文本格式的配置文件，用户可以使用 Dockerfile来快速创建自定义的镜像。</p><h3 id="基本结构">基本结构</h3><p>Dockerfile 由一行行命令语句组成，并且支持以 <code>#</code>开头的注释行。</p><p>一般而言，Dockerfile分为四部分：</p><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="指令说明">指令说明</h3><p>指令的一般格式为 <code>INSTRUCTION arguments</code></p><table><colgroup><col style="width: 15%" /><col style="width: 84%" /></colgroup><thead><tr class="header"><th>指令</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>FROM</td><td>指定所创建镜像的基础镜像</td></tr><tr class="even"><td>MAINTAINER</td><td>指定维护者信息</td></tr><tr class="odd"><td>RUN</td><td>运行命令</td></tr><tr class="even"><td>CMD</td><td>指定启动容器时默认执行的命令</td></tr><tr class="odd"><td>LABEL</td><td>指定生成镜像的元数据标签信息</td></tr><tr class="even"><td>EXPOSE</td><td>声明镜像内服务所监听的端口</td></tr><tr class="odd"><td>ENV</td><td>指定环境变量</td></tr><tr class="even"><td>ADD</td><td>复制指定的 <src> 路径下的内容到容器的 <dest> 路径下，<src> 可以为URL；如果为 tar 文件，会自动解压到 <dest> 路径下</td></tr><tr class="odd"><td>CPOY</td><td>复制本地主机的 <src> 路径下的内容到镜像中的 <dest>路径下；一般情况下推荐使用 COPY，而不是 ADD</td></tr><tr class="even"><td>ENTERPOINT</td><td>指定镜像的默认入口</td></tr><tr class="odd"><td>VOLUME</td><td>创建数据卷挂载点</td></tr><tr class="even"><td>USER</td><td>指定运行容器时的用户名或 UID</td></tr><tr class="odd"><td>WORKDIR</td><td>配置工作目录</td></tr><tr class="even"><td>ARG</td><td>指定镜像使用的参数</td></tr><tr class="odd"><td>ONBUILD</td><td>配置当所创建的镜像为其他镜像的基础镜像时，所执行的创建操作指令</td></tr><tr class="even"><td>STOPSIGNAL</td><td>容器退出的信号值</td></tr><tr class="odd"><td>HEALTHCHECK</td><td>如何进行健康检查</td></tr><tr class="even"><td>SHELL</td><td>指定使用 shell 时的默认 shell 类型</td></tr></tbody></table><h4 id="from">FROM</h4><p>指定所创建镜像的基础镜像，如果本地不存在，则默认会去 Docker Hub下载指定镜像。</p><p>格式：<code>FROM &lt;image&gt;</code> or<code>FROM &lt;imgae&gt;: &lt;tag&gt;</code> or<code>FROM &lt;image&gt;@&lt;digest&gt;</code></p><p><font color='pink'> 任何 Dockerfile 中的第一条指令必须为 FROM指令。并且，如果在同一个Dockerfile中创建多个镜像，可以使用多个FROM指令（每个镜像一次）。</font></p><h4 id="maintainer">MAINTAINER</h4><p>指定维护者信息。</p><p>格式：<code>MAINTAINER &lt;name&gt;</code></p><h4 id="run">RUN</h4><p>运行指定命令。</p><p>格式：<code>RUN &lt;command&gt;</code> or<code>RUN ["executable", "param1", "param2"]</code></p><p>注：必须使用双引号</p><p>前者默认将在 shell 终端中运行命令，即/bin/sh-c；后者则使用 exec执行，不会启动shell环境。</p><h4 id="cmd">CMD</h4><p>指定启动容器时默认执行的命令。</p><p>格式：</p><ul><li><code>CMD ["executable", "param1", "param2"]</code> 使用 exec执行</li><li><code>CMD command param1 param2</code> 在 <code>/bin/sh</code>中执行</li><li><code>CMD ["param1", "param2"]</code> 提供给 ENTERPOINT的默认参数</li></ul><p><font color='pink'>每个Dockerfile只能有一条 CMD命令。如果指定了多条命令，只有最后一条会被执行。</font></p><h4 id="label">LABEL</h4><p>用来指定生成镜像的元数据标签信息。</p><p>格式：<code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></p><h4 id="expose">EXPOSE</h4><p>声明镜像内服务所监听的端口。</p><p>格式：<code>EXPOSE &lt;port&gt; [&lt;port&gt; ...]</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">EXPOSE 22 80 8443<br></code></pre></div></td></tr></table></figure><p><font color='pink'>注意，该指令只是起到声明作用，并不会自动完成端口映射。</font></p><h4 id="env">ENV</h4><p>指定环境变量，在镜像生成过程中会被后续 RUN指令使用，在镜像启动的容器中也会存在。</p><p>格式：<code>ENV &lt;key&gt;&lt;value&gt;</code> or<code>ENV &lt;key&gt;=value</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ENV PG_MAJOR 9.3<br>ENV PG_VERSION 9.3.4<br>RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/<br>    postgress &amp;&amp; …<br><br><br>ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH<br></code></pre></div></td></tr></table></figure><h4 id="add">ADD</h4><p>该命令将复制指定的<src>路径下的内容到容器中的<dest>路径下。</p><p>格式：<code>ADD &lt;src&gt; &lt;dest&gt;</code></p><p><font color='geen'>路径支持正则格式。</font></p><h4 id="copy">COPY</h4><p>格式：<code>COPY &lt;src&gt; &lt;dest&gt;</code></p><h4 id="entrypoint">ENTRYPOINT</h4><p>指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有传入值作为该命令的参数。</p><p>格式：</p><ul><li><code>ENTRYPOINT ["executable", "param1", "param2"]</code> exec调用执行</li><li><code>ENTRYPOINT command param1, param2</code> shell 中执行</li></ul><p><font color='pink'>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个时，只有最后一个有效。</font></p><h4 id="volume">VOLUME</h4><p>创建一个数据卷挂载点。</p><p>格式：<code>VOLUME ["/data"]</code></p><h4 id="user">USER</h4><p>指定运行容器时的用户名或UID，后续的RUN等指令也会使用指定的用户身份。</p><p>格式：<code>USER daemon</code></p><h4 id="workdir">WORKDIR</h4><p>为后续的 RUN、CMD 和 ENTRYPOINT 指令配置工作目录。</p><p>格式：<code>WORKDIR /path/to/workdir</code></p><p>可以使用多个 WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</p><h4 id="arg">ARG</h4><p>指定一些镜像内使用的参数，这些参数在执行 <code>docker build</code>命令时才以 <code>--build-arg&lt;varname&gt;=&lt;value&gt;</code>格式传入。</p><p>格式：<code>ARG &lt;name&gt;[=&lt;default value&gt;]</code></p><h4 id="onbuild">ONBUILD</h4><p>配置当所创建的镜像作为其他镜像的基础镜像时，所执行的创建操作指令。</p><p>格式：<code>ONBUILD[INSTRUCTION]</code></p><h4 id="stopsignal">STOPSIGNAL</h4><p>指定所创建镜像启动的容器接收退出的信号值。例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">STOPSIGNAL signal<br></code></pre></div></td></tr></table></figure><h4 id="healthcheck">HEALTHCHECK</h4><p>配置所启动容器如何进行健康检查（如何判断健康与否），自Docker1.12开始支持。</p><p>格式：</p><ul><li><code>HEALTHCHECK [OPTIONS] CMD command</code>：根据所执行命令返回值是否为0来判断；</li><li><code>HEALTHCHECK NONE</code>：禁止基础镜像中的健康检查。</li></ul><p>OPTIONS：</p><ul><li><code>--interval=DURATION</code>（默认为：30s）：过多久检查一次；</li><li><code>--timeout=DURATION</code>（默认为：30s）：每次检查等待结果的超时；</li><li><code>--retries=N</code>（默认为：3）：如果失败了，重试几次才最终确定失败。</li></ul><h4 id="shell">SHELL</h4><p>指定其他命令使用 shell 时的默认 shell 类型。</p><h3 id="创建镜像-1">创建镜像</h3><p>编写完成 Dockerfile 之后，可以通过 <code>docker build</code>命令来创建镜像。</p><ul><li>如果使用非内容路径下的 Dockerfile，可以通过 <code>-f</code>选项来指定其路径。</li><li>要指定生成镜像的标签信息，可以使用 <code>-t</code> 选项。</li></ul><p>格式：<code>docker build [OPTION] Path</code> 读取指定路径下的Dockerfile，并将该路径下的所有内容发送到 Docker服务端，由服务端创建镜像。</p><p>例如，指定 Dockerfile 所在路径为<code>/tmp/docker_builder/</code>，并且希望生成镜像标签为<code>build_repo/first_image</code>，可以使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t build_repo/first_image /tmp/docker_builder/</span><br></code></pre></div></td></tr></table></figure><h3 id="使用-.dockerignore-文件">使用 .dockerignore 文件</h3><p>可以通过 .dockerignore 文件（每一行添加一条匹配模式）来让 Docker忽略匹配模式路径下的目录和文件。</p>]]></content>
    
    
    <categories>
      
      <category>《Docker技术入门与实践》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Latex数学公式</title>
    <link href="/2022/06/20/Math/Latex_formula/"/>
    <url>/2022/06/20/Math/Latex_formula/</url>
    
    <content type="html"><![CDATA[<h2 id="数学公式的插入">数学公式的插入</h2><table><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">环境名称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">行内公式</td><td style="text-align: center;"><code>$</code>...<code>$</code></td></tr><tr class="even"><td style="text-align: center;">独行公式</td><td style="text-align: center;"><code>$$</code>...<code>$$</code></td></tr></tbody></table><h2 id="希腊字母">希腊字母</h2><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">大写</th><th style="text-align: center;">小写</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">alpha</td><td style="text-align: center;"><spanclass="math inline">\(A\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\alpha\)</span></td></tr><tr class="even"><td style="text-align: center;">gamma</td><td style="text-align: center;"><spanclass="math inline">\(\Gamma\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\gamma\)</span></td></tr><tr class="odd"><td style="text-align: center;">epsilon</td><td style="text-align: center;"><spanclass="math inline">\(E\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\epsilon\)</span></td></tr><tr class="even"><td style="text-align: center;">eta</td><td style="text-align: center;"><spanclass="math inline">\(H\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\eta\)</span></td></tr><tr class="odd"><td style="text-align: center;">iota</td><td style="text-align: center;"><spanclass="math inline">\(I\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\iota\)</span></td></tr><tr class="even"><td style="text-align: center;">lambda</td><td style="text-align: center;"><spanclass="math inline">\(\Lambda\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\lambda\)</span></td></tr><tr class="odd"><td style="text-align: center;">nu</td><td style="text-align: center;"><spanclass="math inline">\(N\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\nu\)</span></td></tr><tr class="even"><td style="text-align: center;">xi</td><td style="text-align: center;"><spanclass="math inline">\(\Xi\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\xi\)</span></td></tr><tr class="odd"><td style="text-align: center;">rho</td><td style="text-align: center;"><spanclass="math inline">\(P\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\rho\)</span></td></tr><tr class="even"><td style="text-align: center;">tau</td><td style="text-align: center;"><spanclass="math inline">\(T\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\tau\)</span></td></tr><tr class="odd"><td style="text-align: center;">phi</td><td style="text-align: center;"><spanclass="math inline">\(\Phi\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\phi\)</span></td></tr><tr class="even"><td style="text-align: center;">psi</td><td style="text-align: center;"><spanclass="math inline">\(\Psi\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\psi\)</span></td></tr><tr class="odd"><td style="text-align: center;">beta</td><td style="text-align: center;"><spanclass="math inline">\(B\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\beta\)</span></td></tr><tr class="even"><td style="text-align: center;">delta</td><td style="text-align: center;"><spanclass="math inline">\(\Delta\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\delta\)</span></td></tr><tr class="odd"><td style="text-align: center;">zeta</td><td style="text-align: center;"><spanclass="math inline">\(Z\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\zeta\)</span></td></tr><tr class="even"><td style="text-align: center;">theta</td><td style="text-align: center;"><spanclass="math inline">\(\Theta\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\theta\)</span></td></tr><tr class="odd"><td style="text-align: center;">kappa</td><td style="text-align: center;"><spanclass="math inline">\(K\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\kappa\)</span></td></tr><tr class="even"><td style="text-align: center;">mu</td><td style="text-align: center;"><spanclass="math inline">\(M\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\mu\)</span></td></tr><tr class="odd"><td style="text-align: center;">omicron</td><td style="text-align: center;"><spanclass="math inline">\(O\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\omicron\)</span></td></tr><tr class="even"><td style="text-align: center;">pi</td><td style="text-align: center;"><spanclass="math inline">\(\Pi\)</span></td><td style="text-align: center;"><spanclass="math inline">\(pi\)</span></td></tr><tr class="odd"><td style="text-align: center;">sigma</td><td style="text-align: center;"><spanclass="math inline">\(\Sigma\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\sigma\)</span></td></tr><tr class="even"><td style="text-align: center;">upsilon</td><td style="text-align: center;"><spanclass="math inline">\(\Upsilon\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\upsilon\)</span></td></tr><tr class="odd"><td style="text-align: center;">chi</td><td style="text-align: center;"><spanclass="math inline">\(X\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\chi\)</span></td></tr><tr class="even"><td style="text-align: center;">omega</td><td style="text-align: center;"><spanclass="math inline">\(\Omega\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\omega\)</span></td></tr></tbody></table><h2 id="声调变音符号">声调/变音符号</h2><table><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\dot&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\dot{a}\)</span></td><td style="text-align: center;"><code>\ddot&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\ddot{a}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\acute&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\acute{a}\)</span></td><td style="text-align: center;"><code>\grave&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\grave{a}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\check&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\check{a}\)</span></td><td style="text-align: center;"><code>\breve&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\breve{a}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\tilde&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\tilde{a}\)</span></td><td style="text-align: center;"><code>\bar&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\bar{a}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\hat&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\hat{a}\)</span></td><td style="text-align: center;"><code>\widehat&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\widehat{a}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\vec&#123;a&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\vec{a}\)</span></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><h2 id="标准函数">标准函数</h2><table><colgroup><col style="width: 17%" /><col style="width: 17%" /><col style="width: 29%" /><col style="width: 36%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\exp_a b=a^b</code></td><td style="text-align: center;"><span class="math inline">\(\exp_ab=a^b\)</span></td><td style="text-align: center;"><code>\sin a</code></td><td style="text-align: center;"><span class="math inline">\(\sina\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\exp b=e^b</code></td><td style="text-align: center;"><span class="math inline">\(\expb=e^b\)</span></td><td style="text-align: center;"><code>\cos b</code></td><td style="text-align: center;"><span class="math inline">\(\cosb\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>10^m</code></td><td style="text-align: center;"><spanclass="math inline">\(10^m\)</span></td><td style="text-align: center;"><code>\tan c</code></td><td style="text-align: center;"><span class="math inline">\(\tanc\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\arcsin a</code></td><td style="text-align: center;"><span class="math inline">\(\arcsina\)</span></td><td style="text-align: center;"><code>\sec d</code></td><td style="text-align: center;"><span class="math inline">\(\secd\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\arccos b</code></td><td style="text-align: center;"><span class="math inline">\(\arccosb\)</span></td><td style="text-align: center;"><code>\csc e</code></td><td style="text-align: center;"><span class="math inline">\(\csce\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\arctan c</code></td><td style="text-align: center;"><span class="math inline">\(\arctanc\)</span></td><td style="text-align: center;"><code>\cot f</code></td><td style="text-align: center;"><span class="math inline">\(\cotf\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\sinh a</code></td><td style="text-align: center;"><span class="math inline">\(\sinha\)</span></td><td style="text-align: center;"><code>\operatorname&#123;argsh&#125; a</code></td><td style="text-align: center;"><spanclass="math inline">\(\operatorname{argsh} a\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\cosh b</code></td><td style="text-align: center;"><span class="math inline">\(\coshb\)</span></td><td style="text-align: center;"><code>\operatorname&#123;argch&#125; b</code></td><td style="text-align: center;"><spanclass="math inline">\(\operatorname{argch} b\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\tanh c</code></td><td style="text-align: center;"><span class="math inline">\(\tanhc\)</span></td><td style="text-align: center;"><code>\operatorname&#123;argth&#125; c</code></td><td style="text-align: center;"><spanclass="math inline">\(\operatorname{argth} c\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\coth d</code></td><td style="text-align: center;"><span class="math inline">\(\cothd\)</span></td><td style="text-align: center;"><code>\operatorname&#123;&#125;</code></td><td style="text-align: center;">将任何字符转换成标准函数的形式</td></tr></tbody></table><h2 id="界限">界限</h2><table><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\min x</code></td><td style="text-align: center;"><span class="math inline">\(\minx\)</span></td><td style="text-align: center;"><code>\lim u</code></td><td style="text-align: center;"><span class="math inline">\(\limu\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\max y</code></td><td style="text-align: center;"><span class="math inline">\(\maxy\)</span></td><td style="text-align: center;"><code>\liminf v</code></td><td style="text-align: center;"><span class="math inline">\(\liminfv\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\inf s</code></td><td style="text-align: center;"><span class="math inline">\(\infs\)</span></td><td style="text-align: center;"><code>\limsup w</code></td><td style="text-align: center;"><span class="math inline">\(\limsupw\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\sup t</code></td><td style="text-align: center;"><span class="math inline">\(\supt\)</span></td><td style="text-align: center;"><code>\dim p</code></td><td style="text-align: center;"><span class="math inline">\(\dimp\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\deg q</code></td><td style="text-align: center;"><span class="math inline">\(\degq\)</span></td><td style="text-align: center;"><code>\det m</code></td><td style="text-align: center;"><span class="math inline">\(\detm\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\ker\phi</code></td><td style="text-align: center;"><spanclass="math inline">\(\ker\phi\)</span></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><h2 id="映射">映射</h2><table><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\Pr j</code></td><td style="text-align: center;"><span class="math inline">\(\Prj\)</span></td><td style="text-align: center;"><code>\hom l</code></td><td style="text-align: center;"><span class="math inline">\(\homl\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\lVert z\rVert</code></td><td style="text-align: center;"><span class="math inline">\(\lVertz\rVert\)</span></td><td style="text-align: center;"><code>\arg z</code></td><td style="text-align: center;"><span class="math inline">\(\argz\)</span></td></tr></tbody></table><h2 id="微分和导数">微分和导数</h2><table><colgroup><col style="width: 20%" /><col style="width: 20%" /><col style="width: 29%" /><col style="width: 29%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>dt</code></td><td style="text-align: center;"><spanclass="math inline">\(dt\)</span></td><td style="text-align: center;"><code>\prime</code></td><td style="text-align: center;"><spanclass="math inline">\(\prime\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\mathrm&#123;d&#125;t</code></td><td style="text-align: center;"><spanclass="math inline">\(\mathrm{d}t\)</span></td><td style="text-align: center;"><code>\backprime</code></td><td style="text-align: center;"><spanclass="math inline">\(\backprime\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\partial t</code></td><td style="text-align: center;"><span class="math inline">\(\partialt\)</span></td><td style="text-align: center;"><code>f^\prime</code></td><td style="text-align: center;"><spanclass="math inline">\(f^\prime\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nabla\psi</code></td><td style="text-align: center;"><spanclass="math inline">\(\nabla\psi\)</span></td><td style="text-align: center;"><code>f' f''</code></td><td style="text-align: center;"><span class="math inline">\(f&#39;f&#39;&#39;\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>f^&#123;(3)&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(f^{(3)}\)</span></td><td style="text-align: center;"><code>\dot&#123;y&#125; \ddot&#123;y&#125;</code></td><td style="text-align: center;"><span class="math inline">\(\dot{y}\ddot{y}\)</span></td></tr></tbody></table><h2 id="类字母符号和常数">类字母符号和常数</h2><table><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\infty</code></td><td style="text-align: center;"><spanclass="math inline">\(\infty\)</span></td><td style="text-align: center;"><code>\aleph</code></td><td style="text-align: center;"><spanclass="math inline">\(\aleph\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\complement</code></td><td style="text-align: center;"><spanclass="math inline">\(\complement\)</span></td><td style="text-align: center;"><code>\backepsilon</code></td><td style="text-align: center;"><spanclass="math inline">\(\backepsilon\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\eth</code></td><td style="text-align: center;"><spanclass="math inline">\(\eth\)</span></td><td style="text-align: center;"><code>\Finv</code></td><td style="text-align: center;"><spanclass="math inline">\(\Finv\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\hbar</code></td><td style="text-align: center;"><spanclass="math inline">\(\hbar\)</span></td><td style="text-align: center;"><code>\Im</code></td><td style="text-align: center;"><spanclass="math inline">\(\Im\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\imath</code></td><td style="text-align: center;"><spanclass="math inline">\(\imath\)</span></td><td style="text-align: center;"><code>\jmath</code></td><td style="text-align: center;"><spanclass="math inline">\(\jmath\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Bbbk</code></td><td style="text-align: center;"><spanclass="math inline">\(\Bbbk\)</span></td><td style="text-align: center;"><code>\ell</code></td><td style="text-align: center;"><spanclass="math inline">\(\ell\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\mho</code></td><td style="text-align: center;"><spanclass="math inline">\(\mho\)</span></td><td style="text-align: center;"><code>\wp</code></td><td style="text-align: center;"><spanclass="math inline">\(\wp\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Re</code></td><td style="text-align: center;"><spanclass="math inline">\(\Re\)</span></td><td style="text-align: center;"><code>\circledS</code></td><td style="text-align: center;"><spanclass="math inline">\(\circledS\)</span></td></tr></tbody></table><h2 id="模算数">模算数</h2><table><colgroup><col style="width: 20%" /><col style="width: 22%" /><col style="width: 28%" /><col style="width: 28%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>a\equiv1\pmod&#123;m&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(a\equiv1\pmod{m}\)</span>**</td><td style="text-align: center;"><code>a\bmod b</code></td><td style="text-align: center;"><span class="math inline">\(a\bmodb\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\gcd(m,n)</code></td><td style="text-align: center;"><spanclass="math inline">\(\gcd(m,n)\)</span></td><tdstyle="text-align: center;"><code>\operatorname&#123;lcm&#125;(m,n)</code></td><td style="text-align: center;"><spanclass="math inline">\(\operatorname{lcm}(m,n)\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\mid</code></td><td style="text-align: center;"><spanclass="math inline">\(\mid\)</span></td><td style="text-align: center;"><code>\nmid</code></td><td style="text-align: center;"><spanclass="math inline">\(\nmid\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\shortmid</code></td><td style="text-align: center;"><spanclass="math inline">\(\shortmid\)</span></td><td style="text-align: center;"><code>\nshortmid</code></td><td style="text-align: center;"><spanclass="math inline">\(\nshortmid\)</span></td></tr></tbody></table><h2 id="根号">根号</h2><table><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\surd</code></td><td style="text-align: center;"><spanclass="math inline">\(\surd\)</span></td><td style="text-align: center;"><code>\sqrt&#123;2&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqrt{2}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\sqrt[n]&#123;&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqrt[n]{}\)</span></td><td style="text-align: center;"><code>\sqrt[n]&#123;x&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqrt[n]{x}\)</span></td></tr></tbody></table><h2 id="运算符">运算符</h2><table><colgroup><col style="width: 23%" /><col style="width: 23%" /><col style="width: 26%" /><col style="width: 26%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>+</code></td><td style="text-align: center;"><spanclass="math inline">\(+\)</span></td><td style="text-align: center;"><code>-</code></td><td style="text-align: center;"><spanclass="math inline">\(-\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\pm</code></td><td style="text-align: center;"><spanclass="math inline">\(\pm\)</span></td><td style="text-align: center;"><code>\mp</code></td><td style="text-align: center;"><spanclass="math inline">\(\mp\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\dotplus</code></td><td style="text-align: center;"><spanclass="math inline">\(\dotplus\)</span></td><td style="text-align: center;"><code>\times</code></td><td style="text-align: center;"><spanclass="math inline">\(\times\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\div</code></td><td style="text-align: center;"><spanclass="math inline">\(\div\)</span></td><td style="text-align: center;"><code>\divideontimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\divideontimes\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>/</code></td><td style="text-align: center;"><spanclass="math inline">\(/\)</span></td><td style="text-align: center;"><code>\backslash</code></td><td style="text-align: center;"><spanclass="math inline">\(\backslash\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\cdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\cdot\)</span></td><td style="text-align: center;"><code>*</code></td><td style="text-align: center;"><spanclass="math inline">\(*\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\star</code></td><td style="text-align: center;"><spanclass="math inline">\(\star\)</span></td><td style="text-align: center;"><code>\circ</code></td><td style="text-align: center;"><spanclass="math inline">\(\circ\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\bullet</code></td><td style="text-align: center;"><spanclass="math inline">\(\bullet\)</span></td><td style="text-align: center;"><code>\boxplus</code></td><td style="text-align: center;"><spanclass="math inline">\(\boxplus\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\boxminus</code></td><td style="text-align: center;"><spanclass="math inline">\(\boxminus\)</span></td><td style="text-align: center;"><code>\boxtimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\boxtimes\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\boxdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\boxdot\)</span></td><td style="text-align: center;"><code>\oplus</code></td><td style="text-align: center;"><spanclass="math inline">\(\oplus\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\ominus</code></td><td style="text-align: center;"><spanclass="math inline">\(\ominus\)</span></td><td style="text-align: center;"><code>\otimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\otimes\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\oslash</code></td><td style="text-align: center;"><spanclass="math inline">\(\oslash\)</span></td><td style="text-align: center;"><code>\odot</code></td><td style="text-align: center;"><spanclass="math inline">\(\odot\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\circleddash</code></td><td style="text-align: center;"><spanclass="math inline">\(\circleddash\)</span></td><td style="text-align: center;"><code>\circledcirc</code></td><td style="text-align: center;"><spanclass="math inline">\(\circledcirc\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\circledast</code></td><td style="text-align: center;"><spanclass="math inline">\(\circledast\)</span></td><td style="text-align: center;"><code>\bigoplus</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigoplus\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\bigotimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigotimes\)</span></td><td style="text-align: center;"><code>\bigodot</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigodot\)</span></td></tr></tbody></table><h2 id="集合">集合</h2><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\&#123; \&#125;</code></td><td style="text-align: center;"><span class="math inline">\(\{\}\)</span></td><td style="text-align: center;"><code>\emptyset</code></td><td style="text-align: center;"><spanclass="math inline">\(\emptyset\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\varnothing</code></td><td style="text-align: center;"><spanclass="math inline">\(\varnothing\)</span></td><td style="text-align: center;"><code>\in</code></td><td style="text-align: center;"><spanclass="math inline">\(\in\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\notin</code></td><td style="text-align: center;"><spanclass="math inline">\(\notin\)</span></td><td style="text-align: center;"><code>\not\in</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\in\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\ni</code></td><td style="text-align: center;"><spanclass="math inline">\(\ni\)</span></td><td style="text-align: center;"><code>\not\ni</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\ni\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\cap</code></td><td style="text-align: center;"><spanclass="math inline">\(\cap\)</span></td><td style="text-align: center;"><code>\Cap</code></td><td style="text-align: center;"><spanclass="math inline">\(\Cap\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\sqcap</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqcap\)</span></td><td style="text-align: center;"><code>\bigcap</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigcap\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\cup</code></td><td style="text-align: center;"><spanclass="math inline">\(\cup\)</span></td><td style="text-align: center;"><code>\Cup</code></td><td style="text-align: center;"><spanclass="math inline">\(\Cup\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\sqcup</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqcup\)</span></td><td style="text-align: center;"><code>\bigcup</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigcup\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\bigsqcup</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigsqcup\)</span></td><td style="text-align: center;"><code>\uplus</code></td><td style="text-align: center;"><spanclass="math inline">\(\uplus\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\biguplus</code></td><td style="text-align: center;"><spanclass="math inline">\(\biguplus\)</span></td><td style="text-align: center;"><code>\setminus</code></td><td style="text-align: center;"><spanclass="math inline">\(\setminus\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\smallsetminus</code></td><td style="text-align: center;"><spanclass="math inline">\(\smallsetminus\)</span></td><td style="text-align: center;"><code>\times</code></td><td style="text-align: center;"><spanclass="math inline">\(\times\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\subset</code></td><td style="text-align: center;"><spanclass="math inline">\(\subset\)</span></td><td style="text-align: center;"><code>\Subset</code></td><td style="text-align: center;"><spanclass="math inline">\(\Subset\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\sqsubset</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqsubset\)</span></td><td style="text-align: center;"><code>\supset</code></td><td style="text-align: center;"><spanclass="math inline">\(\supset\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Supset</code></td><td style="text-align: center;"><spanclass="math inline">\(\Supset\)</span></td><td style="text-align: center;"><code>\sqsupset</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqsupset\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\subseteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\subseteq\)</span></td><td style="text-align: center;"><code>\nsubseteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsubseteq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\subsetneq</code></td><td style="text-align: center;"><spanclass="math inline">\(\subsetneq\)</span></td><td style="text-align: center;"><code>\varsubsetneq</code></td><td style="text-align: center;"><spanclass="math inline">\(\varsubsetneq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\sqsubseteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqsubseteq\)</span></td><td style="text-align: center;"><code>\supseteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\supseteq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nsupseteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsupseteq\)</span></td><td style="text-align: center;"><code>\supsetneq</code></td><td style="text-align: center;"><spanclass="math inline">\(\supsetneq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\varsupsetneq</code></td><td style="text-align: center;"><spanclass="math inline">\(\varsupsetneq\)</span></td><td style="text-align: center;"><code>\sqsupseteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\sqsupseteq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\subseteqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\subseteqq\)</span></td><td style="text-align: center;"><code>\nsubseteqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsubseteqq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\subsetneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\subsetneqq\)</span></td><td style="text-align: center;"><code>\varsubsetneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\varsubsetneqq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\supseteqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\supseteqq\)</span></td><td style="text-align: center;"><code>\nsupseteqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsupseteqq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\supsetneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\supsetneqq\)</span></td><td style="text-align: center;"><code>\varsupsetneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\varsupsetneqq\)</span></td></tr></tbody></table><h2 id="关系符号">关系符号</h2><table><colgroup><col style="width: 34%" /><col style="width: 34%" /><col style="width: 15%" /><col style="width: 15%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\ne</code></td><td style="text-align: center;"><spanclass="math inline">\(\ne\)</span></td><td style="text-align: center;"><code>\neq</code></td><td style="text-align: center;"><spanclass="math inline">\(\neq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\equiv</code></td><td style="text-align: center;"><spanclass="math inline">\(\equiv\)</span></td><td style="text-align: center;"><code>\not\equiv</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\equiv\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\doteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\doteq\)</span></td><td style="text-align: center;"><code>\doteqdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\doteqdot\)</span></td></tr><tr class="even"><tdstyle="text-align: center;"><code>\overset&#123;\underset&#123;def&#125;&#123;&#125;&#125;&#123;=&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overset{\underset{def}{}}{=}\)</span></td><td style="text-align: center;"><code>:=</code></td><td style="text-align: center;"><spanclass="math inline">\(:=\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\sim</code></td><td style="text-align: center;"><spanclass="math inline">\(\sim\)</span></td><td style="text-align: center;"><code>\nsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsim\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\backsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\backsim\)</span></td><td style="text-align: center;"><code>\thicksim</code></td><td style="text-align: center;"><spanclass="math inline">\(\thicksim\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\simeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\simeq\)</span></td><td style="text-align: center;"><code>\backsimeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\backsimeq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\eqsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\eqsim\)</span></td><td style="text-align: center;"><code>\cong</code></td><td style="text-align: center;"><spanclass="math inline">\(\cong\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\ncong</code></td><td style="text-align: center;"><spanclass="math inline">\(\ncong\)</span></td><td style="text-align: center;"><code>\approx</code></td><td style="text-align: center;"><spanclass="math inline">\(\approx\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\thickapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\thickapprox\)</span></td><td style="text-align: center;"><code>\approxeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\approxeq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\asymp</code></td><td style="text-align: center;"><spanclass="math inline">\(\asymp\)</span></td><td style="text-align: center;"><code>\propto</code></td><td style="text-align: center;"><spanclass="math inline">\(\propto\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\varpropto</code></td><td style="text-align: center;"><spanclass="math inline">\(\varpropto\)</span></td><td style="text-align: center;"><code>&lt;</code></td><td style="text-align: center;"><spanclass="math inline">\(&lt;\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\nless</code></td><td style="text-align: center;"><spanclass="math inline">\(\nless\)</span></td><td style="text-align: center;"><code>\ll</code></td><td style="text-align: center;"><spanclass="math inline">\(\ll\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\not\ll</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\ll\)</span></td><td style="text-align: center;"><code>\lll</code></td><td style="text-align: center;"><spanclass="math inline">\(\lll\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\not\lll</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\lll\)</span></td><td style="text-align: center;"><code>\lessdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\lessdot\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>&gt;</code></td><td style="text-align: center;"><spanclass="math inline">\(&gt;\)</span></td><td style="text-align: center;"><code>\ngtr</code></td><td style="text-align: center;"><spanclass="math inline">\(\ngtr\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\gg</code></td><td style="text-align: center;"><spanclass="math inline">\(\gg\)</span></td><td style="text-align: center;"><code>\not\gg</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\gg\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\ggg</code></td><td style="text-align: center;"><spanclass="math inline">\(\ggg\)</span></td><td style="text-align: center;"><code>\not\ggg</code></td><td style="text-align: center;"><spanclass="math inline">\(\not\ggg\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\gtrdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\gtrdot\)</span></td><td style="text-align: center;"><code>\le</code></td><td style="text-align: center;"><spanclass="math inline">\(\le\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\leq</code></td><td style="text-align: center;"><spanclass="math inline">\(\leq\)</span></td><td style="text-align: center;"><code>\lneq</code></td><td style="text-align: center;"><spanclass="math inline">\(\lneq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\leqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\leqq\)</span></td><td style="text-align: center;"><code>\nleq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nleq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nleqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nleqq\)</span></td><td style="text-align: center;"><code>\lneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\lneqq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\lvertneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\lvertneqq\)</span></td><td style="text-align: center;"><code>\ge</code></td><td style="text-align: center;"><spanclass="math inline">\(\ge\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\geq</code></td><td style="text-align: center;"><spanclass="math inline">\(\geq\)</span></td><td style="text-align: center;"><code>\gneq</code></td><td style="text-align: center;"><spanclass="math inline">\(\gneq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\geqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\geqq\)</span></td><td style="text-align: center;"><code>\ngeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\ngeq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\ngeqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\ngeqq\)</span></td><td style="text-align: center;"><code>\gneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\gneqq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\gvertneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\gvertneqq\)</span></td><td style="text-align: center;"><code>\lessgtr</code></td><td style="text-align: center;"><spanclass="math inline">\(\lessgtr\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\lesseqgtr</code></td><td style="text-align: center;"><spanclass="math inline">\(\lesseqgtr\)</span></td><td style="text-align: center;"><code>\lesseqqgtr</code></td><td style="text-align: center;"><spanclass="math inline">\(\lesseqqgtr\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\gtrless</code></td><td style="text-align: center;"><spanclass="math inline">\(\gtrless\)</span></td><td style="text-align: center;"><code>\gtreqless</code></td><td style="text-align: center;"><spanclass="math inline">\(\gtreqless\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\gtreqqless</code></td><td style="text-align: center;"><spanclass="math inline">\(\gtreqqless\)</span></td><td style="text-align: center;"><code>\leqslant</code></td><td style="text-align: center;"><spanclass="math inline">\(\leqslant\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\nleqslant</code></td><td style="text-align: center;"><spanclass="math inline">\(\nleqslant\)</span></td><td style="text-align: center;"><code>\eqslantless</code></td><td style="text-align: center;"><spanclass="math inline">\(\eqslantless\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\geqslant</code></td><td style="text-align: center;"><spanclass="math inline">\(\geqslant\)</span></td><td style="text-align: center;"><code>\ngeqslant</code></td><td style="text-align: center;"><spanclass="math inline">\(\ngeqslant\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\eqslantgtr</code></td><td style="text-align: center;"><spanclass="math inline">\(\eqslantgtr\)</span></td><td style="text-align: center;"><code>\lesssim</code></td><td style="text-align: center;"><spanclass="math inline">\(\lesssim\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\lnsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\lnsim\)</span></td><td style="text-align: center;"><code>\lessapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\lessapprox\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\lnapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\lnapprox\)</span></td><td style="text-align: center;"><code>\gtrsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\gtrsim\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\gnsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\gnsim\)</span></td><td style="text-align: center;"><code>\gtrapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\gtrapprox\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\gnapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\gnapprox\)</span></td><td style="text-align: center;"><code>\prec</code></td><td style="text-align: center;"><spanclass="math inline">\(\prec\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nprec</code></td><td style="text-align: center;"><spanclass="math inline">\(\nprec\)</span></td><td style="text-align: center;"><code>\preceq</code></td><td style="text-align: center;"><spanclass="math inline">\(\preceq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\npreceq</code></td><td style="text-align: center;"><spanclass="math inline">\(\npreceq\)</span></td><td style="text-align: center;"><code>\precneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\precneqq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\succ</code></td><td style="text-align: center;"><spanclass="math inline">\(\succ\)</span></td><td style="text-align: center;"><code>\nsucc</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsucc\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\succeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\succeq\)</span></td><td style="text-align: center;"><code>\nsucceq</code></td><td style="text-align: center;"><spanclass="math inline">\(\nsucceq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\succneqq</code></td><td style="text-align: center;"><spanclass="math inline">\(\succneqq\)</span></td><td style="text-align: center;"><code>\preccurlyeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\preccurlyeq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\curlyeqprec</code></td><td style="text-align: center;"><spanclass="math inline">\(\curlyeqprec\)</span></td><td style="text-align: center;"><code>\succcurlyeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\succcurlyeq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\curlyeqsucc</code></td><td style="text-align: center;"><spanclass="math inline">\(\curlyeqsucc\)</span></td><td style="text-align: center;"><code>\precsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\precsim\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\precnsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\precnsim\)</span></td><td style="text-align: center;"><code>\precapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\precapprox\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\precnapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\precnapprox\)</span></td><td style="text-align: center;"><code>\succsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\succsim\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\succnsim</code></td><td style="text-align: center;"><spanclass="math inline">\(\succnsim\)</span></td><td style="text-align: center;"><code>\succapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\succapprox\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\succnapprox</code></td><td style="text-align: center;"><spanclass="math inline">\(\succnapprox\)</span></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><h2 id="几何符号">几何符号</h2><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 24%" /><col style="width: 24%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\parallel</code></td><td style="text-align: center;"><spanclass="math inline">\(\parallel\)</span></td><td style="text-align: center;"><code>\nparallel</code></td><td style="text-align: center;"><spanclass="math inline">\(\nparallel\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\shortparallel</code></td><td style="text-align: center;"><spanclass="math inline">\(\shortparallel\)</span></td><td style="text-align: center;"><code>\nshortparallel</code></td><td style="text-align: center;"><spanclass="math inline">\(\nshortparallel\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\perp</code></td><td style="text-align: center;"><spanclass="math inline">\(\perp\)</span></td><td style="text-align: center;"><code>\angle</code></td><td style="text-align: center;"><spanclass="math inline">\(\angle\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\sphericalangle</code></td><td style="text-align: center;"><spanclass="math inline">\(\sphericalangle\)</span></td><td style="text-align: center;"><code>\measuredangle</code></td><td style="text-align: center;"><spanclass="math inline">\(\measuredangle\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>45^\circ</code></td><td style="text-align: center;"><spanclass="math inline">\(45^\circ\)</span></td><td style="text-align: center;"><code>\Box</code></td><td style="text-align: center;"><spanclass="math inline">\(\Box\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\blacksquare</code></td><td style="text-align: center;"><spanclass="math inline">\(\blacksquare\)</span></td><td style="text-align: center;"><code>\diamond</code></td><td style="text-align: center;"><spanclass="math inline">\(\diamond\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\Diamond</code></td><td style="text-align: center;"><spanclass="math inline">\(\Diamond\)</span></td><td style="text-align: center;"><code>\lozenge</code></td><td style="text-align: center;"><spanclass="math inline">\(\lozenge\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\blacklozenge</code></td><td style="text-align: center;"><spanclass="math inline">\(\blacklozenge\)</span></td><td style="text-align: center;"><code>\bigstar</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigstar\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\bigcirc</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigcirc\)</span></td><td style="text-align: center;"><code>\triangle</code></td><td style="text-align: center;"><spanclass="math inline">\(\triangle\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\bigtriangleup</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigtriangleup\)</span></td><td style="text-align: center;"><code>\bigtriangledown</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigtriangledown\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\vartriangle</code></td><td style="text-align: center;"><spanclass="math inline">\(\vartriangle\)</span></td><td style="text-align: center;"><code>\triangledown</code></td><td style="text-align: center;"><spanclass="math inline">\(\triangledown\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\triangleright</code></td><td style="text-align: center;"><spanclass="math inline">\(\triangleright\)</span></td><td style="text-align: center;"><code>\blacktriangle</code></td><td style="text-align: center;"><spanclass="math inline">\(\blacktriangle\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\blacktriangledown</code></td><td style="text-align: center;"><spanclass="math inline">\(\blacktriangledown\)</span></td><td style="text-align: center;"><code>\blacktriangleleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\blacktriangleleft\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\blacktriangleright</code></td><td style="text-align: center;"><spanclass="math inline">\(\blacktriangleright\)</span></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><h2 id="逻辑符号">逻辑符号</h2><table><colgroup><col style="width: 23%" /><col style="width: 23%" /><col style="width: 26%" /><col style="width: 26%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\forall</code></td><td style="text-align: center;"><spanclass="math inline">\(\forall\)</span></td><td style="text-align: center;"><code>\exists</code></td><td style="text-align: center;"><spanclass="math inline">\(\exists\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nexists</code></td><td style="text-align: center;"><spanclass="math inline">\(\nexists\)</span></td><td style="text-align: center;"><code>\therefore</code></td><td style="text-align: center;"><spanclass="math inline">\(\therefore\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\because</code></td><td style="text-align: center;"><spanclass="math inline">\(\because\)</span></td><td style="text-align: center;"><code>\And</code></td><td style="text-align: center;"><spanclass="math inline">\(\And\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\lor</code></td><td style="text-align: center;"><spanclass="math inline">\(\lor\)</span></td><td style="text-align: center;"><code>\vee</code></td><td style="text-align: center;"><spanclass="math inline">\(\vee\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\curlyvee</code></td><td style="text-align: center;"><spanclass="math inline">\(\curlyvee\)</span></td><td style="text-align: center;"><code>\bigvee</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigvee\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\land</code></td><td style="text-align: center;"><spanclass="math inline">\(\land\)</span></td><td style="text-align: center;"><code>\wedge</code></td><td style="text-align: center;"><spanclass="math inline">\(\wedge\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\curlywedge</code></td><td style="text-align: center;"><spanclass="math inline">\(\curlywedge\)</span></td><td style="text-align: center;"><code>\bigwedge</code></td><td style="text-align: center;"><spanclass="math inline">\(\bigwedge\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\bar&#123;q&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\bar{q}\)</span></td><td style="text-align: center;"><code>\bar&#123;abc&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\bar{abc}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\overline&#123;q&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overline{q}\)</span></td><td style="text-align: center;"><code>\overline&#123;abc&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overline{abc}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\lnot</code></td><td style="text-align: center;"><spanclass="math inline">\(\lnot\)</span></td><td style="text-align: center;"><code>\neg</code></td><td style="text-align: center;"><spanclass="math inline">\(\neg\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\bot</code></td><td style="text-align: center;"><spanclass="math inline">\(\bot\)</span></td><td style="text-align: center;"><code>\top</code></td><td style="text-align: center;"><spanclass="math inline">\(\top\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\vdash</code></td><td style="text-align: center;"><spanclass="math inline">\(\vdash\)</span></td><td style="text-align: center;"><code>\dashv</code></td><td style="text-align: center;"><spanclass="math inline">\(\dashv\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\vDash</code></td><td style="text-align: center;"><spanclass="math inline">\(\vDash\)</span></td><td style="text-align: center;"><code>\Vdash</code></td><td style="text-align: center;"><spanclass="math inline">\(\Vdash\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\models</code></td><td style="text-align: center;"><spanclass="math inline">\(\models\)</span></td><td style="text-align: center;"><code>\Vvdash</code></td><td style="text-align: center;"><spanclass="math inline">\(\Vvdash\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\nvdash</code></td><td style="text-align: center;"><spanclass="math inline">\(\nvdash\)</span></td><td style="text-align: center;"><code>\nVdash</code></td><td style="text-align: center;"><spanclass="math inline">\(\nVdash\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nvDash</code></td><td style="text-align: center;"><spanclass="math inline">\(\nvDash\)</span></td><td style="text-align: center;"><code>\nVDash</code></td><td style="text-align: center;"><spanclass="math inline">\(\nVDash\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\ulcorner</code></td><td style="text-align: center;"><spanclass="math inline">\(\ulcorner\)</span></td><td style="text-align: center;"><code>\urcorner</code></td><td style="text-align: center;"><spanclass="math inline">\(\urcorner\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\llcorner</code></td><td style="text-align: center;"><spanclass="math inline">\(\llcorner\)</span></td><td style="text-align: center;"><code>\lrcorner</code></td><td style="text-align: center;"><spanclass="math inline">\(\lrcorner\)</span></td></tr></tbody></table><h2 id="箭头">箭头</h2><table><colgroup><col style="width: 24%" /><col style="width: 24%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\Rrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Rrightarrow\)</span></td><td style="text-align: center;"><code>\Lleftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Lleftarrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Rightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Rightarrow\)</span></td><td style="text-align: center;"><code>\nRightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nRightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\Longrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Longrightarrow\)</span></td><td style="text-align: center;"><code>\implies</code></td><td style="text-align: center;"><spanclass="math inline">\(\implies\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Leftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Leftarrow\)</span></td><td style="text-align: center;"><code>\nLeftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nLeftarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\Longleftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Longleftarrow\)</span></td><td style="text-align: center;"><code>\Leftrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Leftrightarrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nLeftrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nLeftrightarrow\)</span></td><td style="text-align: center;"><code>\Longleftrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Longleftrightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\iff</code></td><td style="text-align: center;"><spanclass="math inline">\(\iff\)</span></td><td style="text-align: center;"><code>\Uparrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Uparrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Downarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Downarrow\)</span></td><td style="text-align: center;"><code>\Updownarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\Updownarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\leftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftarrow\)</span></td><td style="text-align: center;"><code>\rightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightarrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nleftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nleftarrow\)</span></td><td style="text-align: center;"><code>\nrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nrightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\leftrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftrightarrow\)</span></td><td style="text-align: center;"><code>\nleftrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nleftrightarrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\longleftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\longleftarrow\)</span></td><td style="text-align: center;"><code>\longrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\longrightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\longleftrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\longleftrightarrow\)</span></td><td style="text-align: center;"><code>\uparrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\uparrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\downarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\downarrow\)</span></td><td style="text-align: center;"><code>\updownarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\updownarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\nearrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nearrow\)</span></td><td style="text-align: center;"><code>\searrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\searrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\nwarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\nwarrow\)</span></td><td style="text-align: center;"><code>\swarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\swarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\mapsto</code></td><td style="text-align: center;"><spanclass="math inline">\(\mapsto\)</span></td><td style="text-align: center;"><code>\longmapsto</code></td><td style="text-align: center;"><spanclass="math inline">\(\longmapsto\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\rightharpoonup</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightharpoonup\)</span></td><td style="text-align: center;"><code>\rightharpoondown</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightharpoondown\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\leftharpoonup</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftharpoonup\)</span></td><td style="text-align: center;"><code>\leftharpoondown</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftharpoondown\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\upharpoonleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\upharpoonleft\)</span></td><td style="text-align: center;"><code>\upharpoonright</code></td><td style="text-align: center;"><spanclass="math inline">\(\upharpoonright\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\downharpoonleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\downharpoonleft\)</span></td><td style="text-align: center;"><code>\downharpoonright</code></td><td style="text-align: center;"><spanclass="math inline">\(\downharpoonright\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\leftrightharpoons</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftrightharpoons\)</span></td><td style="text-align: center;"><code>\rightleftharpoons</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightleftharpoons\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\curvearrowleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\curvearrowleft\)</span></td><td style="text-align: center;"><code>\circlearrowleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\circlearrowleft\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Lsh</code></td><td style="text-align: center;"><spanclass="math inline">\(\Lsh\)</span></td><td style="text-align: center;"><code>\upuparrows</code></td><td style="text-align: center;"><spanclass="math inline">\(\upuparrows\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\rightrightarrows</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightrightarrows\)</span></td><td style="text-align: center;"><code>\rightleftarrows</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightleftarrows\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\rightarrowtail</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightarrowtail\)</span></td><td style="text-align: center;"><code>\rightarrowtail</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightarrowtail\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\curvearrowright</code></td><td style="text-align: center;"><spanclass="math inline">\(\curvearrowright\)</span></td><td style="text-align: center;"><code>\circlearrowright</code></td><td style="text-align: center;"><spanclass="math inline">\(\circlearrowright\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\Rsh</code></td><td style="text-align: center;"><spanclass="math inline">\(\Rsh\)</span></td><td style="text-align: center;"><code>\downdownarrows</code></td><td style="text-align: center;"><spanclass="math inline">\(\downdownarrows\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\leftleftarrows</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftleftarrows\)</span></td><td style="text-align: center;"><code>\leftrightarrows</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftrightarrows\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\leftarrowtail</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftarrowtail\)</span></td><td style="text-align: center;"><code>\looparrowleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\looparrowleft\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\hookrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\hookrightarrow\)</span></td><td style="text-align: center;"><code>\hookleftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\hookleftarrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\multimap</code></td><td style="text-align: center;"><spanclass="math inline">\(\multimap\)</span></td><td style="text-align: center;"><code>\leftrightsquigarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftrightsquigarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\rightsquigarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightsquigarrow\)</span></td><td style="text-align: center;"><code>\twoheadrightarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\twoheadrightarrow\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\twoheadleftarrow</code></td><td style="text-align: center;"><spanclass="math inline">\(\twoheadleftarrow\)</span></td><td style="text-align: center;"><code>\xleftarrow&#123;left&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\xleftarrow{left}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\xrightarrow&#123;right&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\xrightarrow{right}\)</span></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><h2 id="特殊符号">特殊符号</h2><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>\amalg</code></td><td style="text-align: center;"><spanclass="math inline">\(\amalg\)</span></td><td style="text-align: center;"><code>\%</code></td><td style="text-align: center;"><spanclass="math inline">\(\%\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\dagger</code></td><td style="text-align: center;"><spanclass="math inline">\(\dagger\)</span></td><td style="text-align: center;"><code>\ddagger</code></td><td style="text-align: center;"><spanclass="math inline">\(\ddagger\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\ldots</code></td><td style="text-align: center;"><spanclass="math inline">\(\ldots\)</span></td><td style="text-align: center;"><code>\cdots</code></td><td style="text-align: center;"><spanclass="math inline">\(\cdots\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\smile</code></td><td style="text-align: center;"><spanclass="math inline">\(\smile\)</span></td><td style="text-align: center;"><code>\frown</code></td><td style="text-align: center;"><spanclass="math inline">\(\frown\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\wr</code></td><td style="text-align: center;"><spanclass="math inline">\(\wr\)</span></td><td style="text-align: center;"><code>\diamondsuit</code></td><td style="text-align: center;"><spanclass="math inline">\(\diamondsuit\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\heartsuit</code></td><td style="text-align: center;"><spanclass="math inline">\(\heartsuit\)</span></td><td style="text-align: center;"><code>\clubsuit</code></td><td style="text-align: center;"><spanclass="math inline">\(\clubsuit\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\spadesuit</code></td><td style="text-align: center;"><spanclass="math inline">\(\spadesuit\)</span></td><td style="text-align: center;"><code>\Game</code></td><td style="text-align: center;"><spanclass="math inline">\(\Game\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\flat</code></td><td style="text-align: center;"><spanclass="math inline">\(\flat\)</span></td><td style="text-align: center;"><code>\natural</code></td><td style="text-align: center;"><spanclass="math inline">\(\natural\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\sharp</code></td><td style="text-align: center;"><spanclass="math inline">\(\sharp\)</span></td><td style="text-align: center;"><code>\diagup</code></td><td style="text-align: center;"><spanclass="math inline">\(\diagup\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\diagdown</code></td><td style="text-align: center;"><spanclass="math inline">\(\diagdown\)</span></td><td style="text-align: center;"><code>\centerdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\centerdot\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\ltimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\ltimes\)</span></td><td style="text-align: center;"><code>\rtimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\rtimes\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\leftthreetimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\leftthreetimes\)</span></td><td style="text-align: center;"><code>\rightthreetimes</code></td><td style="text-align: center;"><spanclass="math inline">\(\rightthreetimes\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\eqcirc</code></td><td style="text-align: center;"><spanclass="math inline">\(\eqcirc\)</span></td><td style="text-align: center;"><code>\circeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\circeq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\triangleq</code></td><td style="text-align: center;"><spanclass="math inline">\(\triangleq\)</span></td><td style="text-align: center;"><code>\bumpeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\bumpeq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\Bumpeq</code></td><td style="text-align: center;"><spanclass="math inline">\(\Bumpeq\)</span></td><td style="text-align: center;"><code>\doteqdot</code></td><td style="text-align: center;"><spanclass="math inline">\(\doteqdot\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\risingdotseq</code></td><td style="text-align: center;"><spanclass="math inline">\(\risingdotseq\)</span></td><td style="text-align: center;"><code>\fallingdotseq</code></td><td style="text-align: center;"><spanclass="math inline">\(\fallingdotseq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\intercal</code></td><td style="text-align: center;"><spanclass="math inline">\(\intercal\)</span></td><td style="text-align: center;"><code>\barwedge</code></td><td style="text-align: center;"><spanclass="math inline">\(\barwedge\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\veebar</code></td><td style="text-align: center;"><spanclass="math inline">\(\veebar\)</span></td><td style="text-align: center;"><code>\doublebarwedge</code></td><td style="text-align: center;"><spanclass="math inline">\(\doublebarwedge\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\between</code></td><td style="text-align: center;"><spanclass="math inline">\(\between\)</span></td><td style="text-align: center;"><code>\pitchfork</code></td><td style="text-align: center;"><spanclass="math inline">\(\pitchfork\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\vartriangleleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\vartriangleleft\)</span></td><td style="text-align: center;"><code>\ntriangleleft</code></td><td style="text-align: center;"><spanclass="math inline">\(\ntriangleleft\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\vartriangleright</code></td><td style="text-align: center;"><spanclass="math inline">\(\vartriangleright\)</span></td><td style="text-align: center;"><code>\ntriangleright</code></td><td style="text-align: center;"><spanclass="math inline">\(\ntriangleright\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\trianglelefteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\trianglelefteq\)</span></td><td style="text-align: center;"><code>\ntrianglelefteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\ntrianglelefteq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\trianglerighteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\trianglerighteq\)</span></td><td style="text-align: center;"><code>\ntrianglerighteq</code></td><td style="text-align: center;"><spanclass="math inline">\(\ntrianglerighteq\)</span></td></tr></tbody></table><p><span class="math display">\[\LaTeX\]</span></p><h2 id="上下标和积分">上下标和积分</h2><table><colgroup><col style="width: 26%" /><col style="width: 26%" /><col style="width: 23%" /><col style="width: 23%" /></colgroup><thead><tr class="header"><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th><th style="text-align: center;">公式</th><th style="text-align: center;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>a^2</code></td><td style="text-align: center;"><spanclass="math inline">\(a^2\)</span></td><td style="text-align: center;"><code>a_2</code></td><td style="text-align: center;"><spanclass="math inline">\(a_2\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>a^&#123;2+2&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(a^{2+2}\)</span></td><td style="text-align: center;"><code>a_&#123;i,j&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(a_{i,j}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>a^2_2</code></td><td style="text-align: center;"><spanclass="math inline">\(a^2_2\)</span></td><td style="text-align: center;"><code>&#123;&#125;^2_1\!X^3_4</code></td><td style="text-align: center;"><spanclass="math inline">\({}^2_1\!X^3_4\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>x'</code></td><td style="text-align: center;"><spanclass="math inline">\(x&#39;\)</span></td><td style="text-align: center;"><code>x^\prime</code></td><td style="text-align: center;"><spanclass="math inline">\(x^\prime\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\dot&#123;x&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\dot{x}\)</span></td><td style="text-align: center;"><code>\ddot&#123;x&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\ddot{x}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\vec&#123;x&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\vec{x}\)</span></td><td style="text-align: center;"><code>\overleftarrow&#123;AB&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overleftarrow{AB}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\overrightarrow&#123;AB&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overrightarrow{AB}\)</span></td><td style="text-align: center;"><code>\widehat&#123;AB&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\widehat{AB}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>\overset&#123;\frown&#125;&#123;AB&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overset{\frown}{AB}\)</span></td><td style="text-align: center;"><code>\overline&#123;ABC&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\overline{ABC}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>\underline&#123;ABC&#125;</code></td><td style="text-align: center;"><spanclass="math inline">\(\underline{ABC}\)</span></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><div class="note note-success">            <p>上括号</p><p><code>\overbrace{1+2+\cdots+100}</code>：<spanclass="math inline">\(\overbrace{1+2+\cdots+100}\)</span></p><p><code>\begin{matrix}5050\\\overbrace{1+2+\cdots+100}\end{matrix}</code>：<spanclass="math inline">\(\begin{matrix}5050\\\overbrace{1+2+\cdots+100}\end{matrix}\)</span></p><p>下括号</p><p><code>\underbrace{1+2+\cdots+100}</code>：<spanclass="math inline">\(\underbrace{1+2+\cdots+100}\)</span></p><p><code>\begin{matrix}\underbrace{1+2+\cdots+100}\\5050\end{matrix}</code>：<spanclass="math inline">\(\begin{matrix}\underbrace{1+2+\cdots+100}\\5050\end{matrix}\)</span></p>          </div><div class="note note-success">            <p>求和</p><p><code>\sum_{i=1}^na_i \sum\limits_{i=1}^na_i</code>：<spanclass="math inline">\(\sum_{i=1}^na_i\sum\limits_{i=1}^na_i\)</span></p>          </div><div class="note note-success">            <p>求积</p><p><code>$\prod_{i=1}^na_i \prod\limits_{i=1}^na_i$</code>：<spanclass="math display">\[\prod_{i=1}^na_i\prod\limits_{i=1}^na_i\]</span></p>          </div><div class="note note-success">            <p>上积</p><p><code>\coprod_{i=1}^na_i \coprod\limits_{i=1}^na_i</code>：<spanclass="math inline">\(\coprod_{i=1}^na_i\coprod\limits_{i=1}^na_i\)</span></p>          </div><div class="note note-success">            <p>极限</p><p><code>\lim_{n\to\infty}x_n \lim\limits_{n\to\infty}x_n</code>：<spanclass="math inline">\(\lim_{n\to\infty}x_n\lim\limits_{n\to\infty}x_n\)</span></p>          </div><div class="note note-success">            <p>积分</p><p><code>\int_{-N}^{N}e^x\,dx</code>：<spanclass="math inline">\(\int_{-N}^{N}e^x\,dx\)</span></p><p>二重积分</p><p><code>\iint_M^Ndx\,dy</code>：<spanclass="math inline">\(\iint_M^Ndx\,dy\)</span></p><p>三重积分</p><p><code>\iiint_M^Ndx\,dy\,dz</code>：<spanclass="math inline">\(\iiint_M^Ndx\,dy\,dz\)</span></p><p>闭合曲线、曲面积分</p><p><code>\oint_Cx^3\,dx+4y^2\,dy</code>：<spanclass="math inline">\(\oint_Cx^3\,dx+4y^2\,dy\)</span></p>          </div><div class="note note-success">            <p>交集</p><p><code>\bigcap_1^np \bigcap\limits_1^np</code>：<spanclass="math inline">\(\bigcap_1^np \bigcap\limits_1^np\)</span></p><p>并集</p><p><code>\bigcup_1^np \bigcup\limits_1^np</code>：<spanclass="math inline">\(\bigcup_1^np \bigcup\limits_1^np\)</span></p>          </div>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MQTT V3.1</title>
    <link href="/2022/06/18/IOT/Mqtt/"/>
    <url>/2022/06/18/IOT/Mqtt/</url>
    
    <content type="html"><![CDATA[<h2 id="消息格式">消息格式</h2><p>每个 MQTT 消息可能包含三个部分：</p><ul><li>Fixed header(全部消息类型)</li><li>Variable header(部分消息类型)</li><li>Payload(部分消息类型)</li></ul><h3 id="fixed-header">Fixed header</h3><p>每个 MQTT 消息类型都必须包含 fixed header. fixed header的格式如下表所示：</p><p><img src="/img/mqtt/fixed_header.PNG" /></p><h4 id="message-type消息类型">Message Type(消息类型)</h4><p><strong>Position</strong>：byte1，bits 7-4</p><ol start="0" type="1"><li>Reserved</li><li>CONNECT</li><li>CONNACK</li><li>PUBLISH</li><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>SUBSCRIBE</li><li>SUBACK</li><li>UNSUBSCRIBE</li><li>UNSUBACK</li><li>PINGREQ</li><li>PINGRESP</li><li>DISCONNECT</li><li>Reserved</li></ol><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">msgTypes</span>&#123;</span><br>    CONNECT = <span class="hljs-number">1</span>, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL, PUBCOMP, SUBSCRIBE, UNSUBSCRIBE, UNSUBACK, PINGREQ, PINGRESP, DISCONNECT<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="flags标志位">Flags(标志位)</h4><h5 id="dup">DUP</h5><p><strong>Position</strong>: byte1， bit 3.</p><p>当客户端或服务器试图重新发送时，设置次标志。</p><p>注：只能用于 QoS 值大于 0的消息，并且需要一个确认(acknowledgment)。当 DUP 位被设置时，variableheader 需要包含 Message ID。</p><h5 id="qos">QoS</h5><p><strong>Position</strong>：byte1，bits 2-1.</p><p>该标志用于指示所发送的消息的保证级别。QoS 级别如下表：</p><p><img src="/img/mqtt/QoS_level.PNG" /></p><h5 id="retain">RETAIN</h5><p><strong>Position</strong>：byte1，bit 0.</p><p>该标志只能用于 <code>PUBLISH</code>消息类型。当客户端向服务器发送一个 <code>PUBLISH</code> 消息时，如果<code>RETAIN</code> 标志设置为1，则服务器应该在将消息传递给订阅方之后，依然保存该消息。</p><p>当一个 Topic 上建立了新的订阅时，且订阅方设置了 <code>RETAIN</code>标志位，服务器应该将最后保留的消息发送给该订阅方。若没有保留任何消息，则不发送消息。</p><p>为了让客户端区分所接收到的消失是服务器保留的消息，还是服务器实时发布的消息。当原始<code>PUBLISH</code> 到达时已存在的订阅导致服务器向客户端发送<code>PUBLISH</code>时，不应使用 <code>RETAIN</code> 标志设置，不管原始PUBLISH 的保留标志。</p><p>如果服务器接收到零长度 payload 的消息，并且在同一主题上设置了<code>RETAIN</code> 标志，则可以删除保留消息。</p><h4 id="remaining-length">Remaining Length</h4><p>表示当前消息中剩余的字节数，包括 variable header 和 payload中的数据。</p><h3 id="variable-header">Variable header</h3><p>某些类型的 MQTT 命令消息还包含一个 variable header。它位于 fixedheader 和 payload 之间。</p><p><code>Remaining Length</code> 字段的字节不影响 <code>Remaining</code>的字节计数长度值。该值只考虑 variable header 和 payload。</p><p>variable header 字段的格式如下，它们必须按照顺序出现在报头中：</p><h4 id="protocol-name">Protocol name</h4><p>消息类型：<code>CONNECT</code></p><p>该字段是一个 UTF-encoded 的字符串，表示协议名称 MQIsdp。</p><h4 id="protocol-version">Protocol version</h4><p>消息类型：<code>CONNECT</code></p><p>该字段是一个8位无符号值，表示客户端使用的协议的修订级别。V3.1版本的协议表示如下：</p><p><img src="/img/mqtt/protocol_version.PNG" /></p><h4 id="connect-flags">Connect flags</h4><p>消息类型：<code>CONNECT</code></p><p>标志位：<code>Clean session flag</code>、<code>Will</code>、<code>Will QoS</code>、<code>Retain flags</code></p><p><img src="/img/mqtt/connect_flags.PNG" /></p><h5 id="clean-session-flag">Clean session flag</h5><p><strong>Position</strong>：bit 1</p><p>如果没有设置(0)，那么服务器在断开连接后必须存储客户端的订阅。这包括继续存储订阅主题的QoS 1 和 QoS 2消息，以便在客户端重新连接时交付它们。服务器还必须维护在连接丢失时传递的动态消息的状态。这个信息必须保存到客户端重新连接。</p><p>如果设置为(1)，那么服务器必须丢弃之前维护的关于客户端的任何信息，并将连接视为“干净的”。当客户端断开连接时，服务器也必须丢弃任何状态。</p><h5 id="will-flag">Will flag</h5><p><strong>Position</strong>：bit 2</p><p>Will message 是当服务器与客户端的连接意外发生中断(I/O错误，客户端在Keep Alive规定的时间内未能完成通信)时，由服务器代替客户端所发布的消息。</p><p>如果设置了 <code>Will</code> 标志，那么 <code>Will QoS</code> 和<code>Will Retain</code> 标志必须出现在 <code>Connect flags</code>字段中。同时， <code>Will Topic</code> 和 <code>Will Message</code>字段也必须包含在 payload 中。</p><h5 id="will-qos">Will QoS</h5><p><strong>Position</strong>：bit 4，3</p><p>设置 Will Message 的 QoS level，QoS level 同上，分为 3 级。</p><h5 id="will-retain">Will Retain</h5><p><strong>Position</strong>：bit 5</p><p><code>Will Retain</code>标志表示在客户端意外断开连接的情况下，服务器是否应该保留由服务器代表客户端发布的Will消息。</p><h5 id="user-name-and-password-flags">User name and password flags</h5><p><strong>Position</strong>：bits 6，7</p><p>连接的客户端可以指定用户名和密码，设置标志位表示用户名和密码(可选)包含在<code>CONNECT</code> 消息的 payload。</p><p>如果设置了 <code>User Name</code> 标志位，则 <code>User Name</code>字段为必填字段，否则其值将被忽略。 如果设置了 <code>Password</code>标志，则 <code>Password</code> 字段是必须的，否则其值将被忽略。不提供用户名而提供密码是无效的。</p><h4 id="keep-alive-timer">Keep Alive timer</h4><p>消息类型：<code>CONNECT</code></p><p>KeepAlive计时器(以秒为单位)定义了从客户端接收到的消息之间的最大时间间隔。它使用服务器能够检测到客户端断开连接，并且不必等待TCP/IP 连接超时。客户端必须在每个 Keep Alive时间段内发送消息。如果在该时间段内没有与数据相关的消息，则客户端发送一个<code>PINGREQ</code> 消息，服务器用 <code>PINGRESP</code>消息表示确认。</p><p>Keep Alive定时器是一个16位的值，表示该时间周期的秒数。实际值与应用程序相关，但典型值是几分钟。最长约18小时。值为0(0)表示客户机没有断开连接。</p><p>Keep Alive计时器的格式如下表所示。Keep Alive Timer 的 2 字节顺序是MSB，然后是 LSB (big-endian)。</p><p><img src="/img/mqtt/keep_alive_timer.PNG" /></p><h4 id="connect-return-code">Connect return code</h4><p>消息类型：<code>CONNACK</code></p><p>该字段定义一个 1 字节无符号返回码。返回码如下表所示：</p><p><img src="/img/mqtt/connect_return_code.PNG" /></p><p><img src="/img/mqtt/return_code.PNG" /></p><h4 id="topic-name">Topic name</h4><p>消息类型：<code>PUBLISH</code></p><p>主题名称是标识将有效负载数据发布到的信息通道的键。订阅方使用密钥来标识希望在其上接收发布信息的信息通道。</p><p>主题名称是UTF-encoded 的字符串。主题名称的长度不超过32767个字符。</p><h3 id="payload">Payload</h3><h4 id="connect">CONNECT</h4><p>Payload 包含一个或多个 UTF-8 encoded的字符串。它们为客户端指定一个唯一的标识符、一个Will主题和消息以及要使用的用户名和密码。除了第一个变量外，其他的都是可选的，它们的存在取决于变量头中的标志。</p><h4 id="subscribe">SUBSCRIBE</h4><p>Payload 包含客户端可以订阅的主题名称列表和QoS级别。这些字符串是UTF-encoded。</p><h4 id="suback">SUBACK</h4><p>Payload 包含授予的 QoS level 的列表。这些是服务端的管理员允许客户端订阅特定 Topic Name 的 QoS level。 授予的QoS 级别的列出顺序与对应的<code>SUBSCRIBE</code>消息中的主题名称相同。</p><hr /><p><code>PUBLISH</code> 消息的 Payload部分只包含特定于应用程序的数据。没有对数据的性质或内容做任何假设，消息的这一部分被视为BLOB。</p><h3 id="message-identifiers">Message identifiers</h3><p>消息类型：<code>PUBLISH</code>,<code>PUBACK</code>,<code>PUBREC</code>,<code>PUBREL</code>,<code>PUBCOMP</code>,<code>SUBSCRIBE</code>,<code>SUBACK</code>,<code>UNSUBSCRIBE</code>,<code>UNSUBACK</code></p><p>只有 QoS level 为 1 或 2 的消息才会有 Message ID。</p><p>Message ID 是一个 16位无符号整数，在特定通信方向的“正在传输”消息集合中必须是唯一的。</p><p>注：客户端将维护它自己的 Message IDs 列表，与它所连接的服务器使用的Message IDs 分开。客户端可以发送一个 Message ID 为 1 的<code>PUBLISH</code>，同时接收 Message ID 为 1的<code>PUBLISH</code>。</p><p>Message Identifier 的两个字节顺序是 MSB，然后是 LSB(大端序)。</p><p><img src="/img/mqtt/Message_ID.PNG" /></p><h3 id="mqtt-and-utf-8">MQTT and UTF-8</h3><p>在MQTT中，字符串的前缀是两个字节，以表示长度，如下表所示。</p><p><img src="/img/mqtt/MQTT_string.PNG" /></p><p>字符串长度是编码字符串的字节数，而不是字符数。例如，字符串OTWP使用UTF-8编码，如下表所示。</p><p><img src="/img/mqtt/string_length.PNG" /></p><h2 id="命令报文">命令报文</h2><h3 id="connect---客户端向服务器提交连接请求">CONNECT -客户端向服务器提交连接请求</h3><p>当建立从客户机到服务器的 TCP/IP 套接字连接时，必须使用<code>CONNECT</code> 流创建一个协议级别的会话。</p><h4 id="fixed-header-1">Fixed header</h4><p><img src="/img/mqtt/CONNECT_fixed_header.PNG" /></p><p>Remaining Length 是可变报头的长度(12字节) 和 Payload的长度。这可以是一个多字节字段。</p><h4 id="variable-header-1">Variable header</h4><p><img src="/img/mqtt/CONNECT_variable_header_1.PNG" /></p><p><img src="/img/mqtt/CONNECT_variable_header_2.PNG" /></p><h4 id="payload-1">Payload</h4><p><code>CONNECT</code> 消息的 payload包含一个或多个UTF-8编码的字符串，基于 variable header中的标志。如果存在字符串，则必须按以下顺序出现:</p><h5 id="client-identifier">Client Identifier</h5><p>UTF-encoded 字符串，长度在 1 - 23个字符之间，在所有连接到服务器的客户端中，ID 必须是唯一的。如果 ID字符超过 23 个，服务器将返回错误代码 2：Identifier Rejected.</p><h5 id="will-topic">Will Topic</h5><p>(如果 Will Flag 设置)第 2 个 UTF-8 encoding 字符串为 Will Topic。WillMessage 将被发布到 Will Topic。</p><h5 id="will-message">Will Message</h5><p>(如果 Will Flag 设置)第 3 个 UTF-8 encoding 字符串为 WillMessage。Will Message 定义了在客户端意外断开连接时发布到 Will Topic的消息的内容。这可能是一个零长度的消息。</p><h5 id="user-name">User Name</h5><p>(如果 User Name Flag 设置)第 4 个 UTF-8 encoding 字符串为 UserName。User Name 用于标识正在连接的用户的名称，用于认证。User Name的长度建议不超过12个字符。</p><h5 id="password">Password</h5><p>(如果 Password Flag 设置)第 5 个 UTF-8 encoding 字符串为Password。连接用户对应的密码，可用于认证。建议密码长度不超过12个字符。</p><h4 id="response">Response</h4><p>服务器发送 <code>CONNACK</code> 消息来响应来自客户端的<code>CONNECT</code> 消息。</p><p>如果在 TCP/IP连接建立后，服务器在合理的时间内没有收到CONNECT消息，服务器应该关闭连接。</p><p>如果客户端在合理的时间内没有收到来自服务器的 <code>CONNACK</code>消息，客户端应该关闭TCP/IP套接字连接，并通过打开一个新的套接字到服务器并发出 <code>CONNECT</code>消息来重新启动会话。</p><p>如果具有相同客户端 ID 的客户端已经连接到服务器，在完成新客户端的<code>CONNECT</code> 流之前，服务器必须断开“旧的”客户端。</p><h3 id="connack---确认连接请求">CONNACK - 确认连接请求</h3><p><code>CONNACK</code> 消息是服务器响应客户端 <code>CONNECT</code>请求而发送的消息。</p><h4 id="fiexed-header">Fiexed header</h4><p><img src="/img/mqtt/CONNACK_fixed_header.PNG" /></p><h4 id="variable-header-2">Variable header</h4><p><img src="/img/mqtt/CONNACK_variable_header_1.PNG" /></p><p><img src="/img/mqtt/CONNACK_variable_header_2.PNG" /></p><h4 id="payload-2">Payload</h4><p>无</p><h3 id="publish---发布消息">PUBLISH - 发布消息</h3><p><code>PUBLISH</code>消息由客户机发送到服务器，分发给感兴趣的订阅者。每个<code>PUBLISH</code>消息都与一个主题名称(也称为主题或通道)相对应。发布到特定主题名称的消息将传递给该主题的连接订阅者。</p><h4 id="fixed-header-2">Fixed header</h4><p><img src="/img/mqtt/PUBLISH_fixed_header.PNG" /></p><h4 id="variable-header-3">Variable header</h4><h5 id="topic-name-1">Topic name</h5><p>一个 UTF-encoding 字符串。<font color='red'>不能包含 Topic通配符。</font>当使用通配符订阅的客户端接收到此字符串时，此字符串将是原始发布者指定的绝对主题，而不是客户端使用的订阅字符串。</p><h5 id="message-id">Message ID</h5><p><font color='geen'>用于具有 QoS level 1 和 QoS level 2的消息。</font></p><p>下表显示了 <code>PUBLISH</code> 消息的一个示例 Variable header。</p><table><thead><tr class="header"><th style="text-align: left;">Field</th><th style="text-align: center;">Value</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Topic Name:</td><td style="text-align: center;">"a/b"</td></tr><tr class="even"><td style="text-align: left;">QoS level</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: left;">Message ID:</td><td style="text-align: center;">10</td></tr></tbody></table><p>本例中 Variable header 的格式如下表所示。</p><p><img src="/img/mqtt/PUBLISH_example.PNG" /></p><h4 id="payload-3">Payload</h4><p>包含要发布的数据。数据的内容和格式是应用程序特有的。</p><h4 id="response-1">Response</h4><p>对 <code>PUBLISH</code> 消息的响应取决于 QoSlevel。下表显示了预期的响应。</p><table><thead><tr class="header"><th style="text-align: left;">QoS Level</th><th>Expected response</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">QoS 0</td><td>None</td></tr><tr class="even"><td style="text-align: left;">QoS 1</td><td>PUBACK</td></tr><tr class="odd"><td style="text-align: left;">QoS 2</td><td>PUBREC</td></tr></tbody></table><h3 id="puback---发布确认">PUBACK - 发布确认</h3><p><code>PUBACK</code> 消息是对 QoS level 1 的 <code>PUBLISH</code>消息的响应。服务器发送 <code>PUBACK</code> 消息以响应来自发布客户机的<code>PUBLISH</code> 消息，订阅者发送 <code>PUBACK</code>消息以响应来自服务器的<code>PUBLISH</code> 消息。</p><h4 id="fixed-header-3">Fixed header</h4><p><img src="/img/mqtt/PUBACK_fixed_header.PNG" /></p><h4 id="variable-header-4">Variable header</h4><p>包含正在被确认的 <code>PUBLISH</code> 消息的消息标识符(MessageID)。下表显示了变量头文件的格式。</p><p><img src="/img/mqtt/PUBACK_variable_header.PNG" /></p><h4 id="payload-4">Payload</h4><p>无</p><h4 id="actions">Actions</h4><p>当客户端接收到 <code>PUBACK</code>消息时，它会丢弃原始消息，因为它也被服务器接收(并记录)。</p><h3 id="pubrec---确认发布被接受">PUBREC - 确认发布被接受</h3><p><code>PUBREC</code> 消息是对具有 QoS level 2 的 <code>PUBLISH</code>消息的响应。它是 QoS level 2 协议流的第二条消息。<code>PUBREC</code>消息由服务器发送，以响应来自发布客户机的 <code>PUBLISH</code>消息，或者由订阅方发送，以响应来自服务器的 <code>PUBLISH</code>消息。</p><h4 id="fixed-header-4">Fixed header</h4><p><img src="/img/mqtt/PUBREC_fixed_header.PNG" /></p><h4 id="variable-header-5">Variable header</h4><p>Variable header 包含已确认的 <code>PUBLISH</code> 的 MessageID。下表显示了变量头文件的格式。</p><p><img src="/img/mqtt/PUBREC_variable_header.PNG" /></p><h4 id="payload-5">Payload</h4><p>无</p><h4 id="actions-1">Actions</h4><p>当接收到 <code>PUBREC</code> 消息时，接收方向发送方发送<code>PUBREL</code> 消息， Message ID 与 <code>PUBREC</code>消息相同。</p><h3 id="pubrel---确认发布">PUBREL - 确认发布</h3><p><code>PUBREL</code> 消息是发布方对来自服务器的 <code>PUBREC</code>消息的响应，或服务器对来自订阅方的<code>PUBREC</code> 消息的响应。它是QoS 2 协议流中的第三条消息。</p><h4 id="fixed-header-5">Fixed header</h4><p><img src="/img/mqtt/PUBREL_fixed_header.PNG" /></p><h4 id="variable-header-6">Variable header</h4><p>Variable header 包含与被确认的 <code>PUBREC</code> 消息相同的 MessageID。下表显示了变量头文件的格式。</p><p><img src="/img/mqtt/PUBREL_variable_header.PNG" /></p><h4 id="payload-6">Payload</h4><p>无</p><h4 id="actions-2">Actions</h4><p>当服务器接收到来自发布方的 <code>PUBREL</code>消息时，服务器使原始消息对感兴趣的订阅者可用，并向发布者发送具有相同Message ID 的<code>PUBCOMP</code>消息。当订阅者从服务器接收到<code>PUBREL</code>消息时，订阅者使该消息对订阅应用程序可用，并向服务器发送<code>PUBCOMP</code> 消息。</p><h3 id="pubcomp---确认发布完成">PUBCOMP - 确认发布完成</h3><p>此消息要么是服务器对发布者的 <code>PUBREL</code>消息的响应，要么是订阅者对服务器的 <code>PUBREL</code> 消息的响应。它是QoS 2 协议流中的第四个也是最后一个消息。</p><h4 id="fixed-header-6">Fixed header</h4><p><img src="/img/mqtt/PUBCOMP_fixed_header_1.PNG" /></p><p><img src="/img/mqtt/PUBCOMP_fixed_header_2.PNG" /></p><h4 id="variable-header-7">Variable header</h4><p>Variable header 包含与确认的 <code>PUBREL</code> 消息相同的 MessageID。</p><p><img src="/img/mqtt/PUBCOMP_variable_header.PNG" /></p><h4 id="payload-7">Payload</h4><p>无</p><h4 id="actions-3">Actions</h4><p>当客户端接收到 <code>PUBCOMP</code>消息时，它会丢弃原始消息，因为它已经被传递给服务器(仅一次)。</p><h3 id="subscribe---订阅命名主题">SUBSCRIBE - 订阅命名主题</h3><p><code>SUBSCRIBE</code>消息允许客户端向服务器注册对一个或多个主题名称。发布到这些主题的消息作为<code>PUBLISH</code>消息从服务器传递到客户端。订阅消息还指定订阅者希望在其上接收发布消息的QoS level。</p><h4 id="fixed-header-7">Fixed header</h4><p><img src="/img/mqtt/SUBSCRIBE_fixed_header.PNG" /></p><h4 id="variable-header-8">Variable header</h4><p><img src="/img/mqtt/SUBSCRIBE_variable_header.PNG" /></p><h4 id="payload-8">Payload</h4><p><font color='blue'><code>SUBSCRIBE</code>消息的有效负载包含客户端希望订阅的主题名称列表，以及客户端希望接收消息的QoS级别。</font></p><p>字符串是 UTF-encoded编码的，QoS级别占用单个字节的2位。主题字符串可以包含特殊的topic通配符来表示一组主题。 这些 topic/QoS 对是连续打包的，如下表中的示例payload 所示。</p><table><thead><tr class="header"><th style="text-align: left;">Topic name</th><th>"a/b"</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Requested QoS</td><td>1</td></tr><tr class="even"><td style="text-align: left;">Topic name</td><td>"c/d"</td></tr><tr class="odd"><td style="text-align: left;">Requested QoS</td><td>2</td></tr></tbody></table><p><code>SUBSCRIBE</code> 消息中的主题名称没有被压缩。示例 payload的格式如下表所示。</p><p><img src="/img/mqtt/SUBSCRIBE_payload.PNG" /></p><p>假设请求的 QoS 级别被授权，客户端接收到的 <code>PUBLISH</code>消息小于或等于这个级别，这取决于来自发布者的原始消息的 QoS 级别。</p><p><font color='pink'>例如，如果客户端对特定主题有 QoS leve 1的订阅，那么将以 QoS level 0 向客户端发送到该主题的 QoS level 0<code>PUBLISH</code> 消息。发送到同一主题的 QoS level 2<code>PUBLISH</code> 消息被降级为 QoS level 1以交付给客户端。</font></p><p>这意味着发布者负责确定消息可以传递的最大QoS，但订阅者可以将QoS降级为更适合其使用的QoS。消息的QoS从不升级。</p><p><font color='red'>一个同时设置了两个 QoS级别位的请求应该被认为是一个无效的数据包，并且连接被关闭。</font></p><h4 id="response-2">Response</h4><p>当它从客户端接收到一个 <code>SUBSCRIBE</code> 消息时，服务器用一个<code>SUBACK</code> 消息响应。</p><p>服务器可以在客户端接收到 <code>SUBACK</code>消息之前开始发送由于订阅而产生的 <code>PUBLISH</code> 消息。</p><h3 id="suback---订阅确认">SUBACK - 订阅确认</h3><p>服务器向客户端发送 <code>SUBACK</code> 消息以确认接收到<code>SUBSCRIBE</code> 消息。</p><p><code>SUBACK</code> 消息包含授权的 QoS级别的列表。<code>SUBACK</code> 消息中授予的 QoS 级别的顺序与相应的<code>SUBSCRIBE</code> 消息中的主题名称的顺序匹配。</p><h4 id="fixed-header-8">Fixed header</h4><p><img src="/img/mqtt/SUBACK_fixed_header.PNG" /></p><h4 id="variable-header-9">Variable header</h4><p>Variable header 包含被确认的订阅消息的 MessageID。下表显示了变量头文件的格式。</p><p><img src="/img/mqtt/PUBCOMP_variable_header.PNG" /></p><h4 id="payload-9">Payload</h4><p>Payload 包含一个已授权的 QoS 级别向量。每个级别对应于相应的<code>SUBSCRIBE</code> 消息中的主题名称。<code>SUBACK</code> 消息中的QoS 级别的顺序与 <code>SUBSCRIBE</code> 消息中主题名称和请求的QoS对的顺序匹配。Variable header 中的 Message ID 使能够进行匹配<code>SUBACK</code> 消息与相应的 <code>SUBSCRIBE</code> 消息。</p><h3 id="unsubscribe---取消订阅主题">UNSUBSCRIBE - 取消订阅主题</h3><p>客户端向服务器发送 <code>UNSUBSCRIBE</code>消息以取消对指定主题的订阅。</p><h4 id="fixed-header-9">Fixed header</h4><p><img src="/img/mqtt/UNSUBSCRIBE_fixed_header.PNG" /></p><h4 id="variable-header-10">Variable header</h4><p>Variable header 包含一个 Message ID，因为 <code>UNSUBSCRIBE</code>消息的 QoS级别为 1。</p><p><img src="/img/mqtt/UNSUBSCRIBE_variable_header.PNG" /></p><h4 id="payload-10">Payload</h4><p>客户端的 payload 中是取消订阅的主题列表。字符串是UTF-encoded，并且连续打包。<code>UNSUBSCRIBE</code>消息中的主题名称没有被压缩。下表显示了一个示例 payload。</p><table><thead><tr class="header"><th>Topic Name</th><th>"a/b"</th></tr></thead><tbody><tr class="odd"><td>Topic Name</td><td>"c/d"</td></tr></tbody></table><p><img src="/img/mqtt/UNSUBSCRIBE_payload.PNG" /></p><h4 id="response-3">Response</h4><p>服务器发送 <code>UNSUBACK</code> 到客户端响应<code>UNSUBSCRIBE</code> 消息。</p><h3 id="unsuback---取消订阅确认">UNSUBACK - 取消订阅确认</h3><p><code>UNSUBACK</code> 消息由服务器发送给客户端，以确认接收到<code>UNSUBSCRIBE</code> 消息。</p><h4 id="fixed-header-10">Fixed header</h4><p><img src="/img/mqtt/UNSUBACK_fixed_header.PNG" /></p><h4 id="variable-header-11">Variable header</h4><p><img src="/img/mqtt/PUBCOMP_variable_header.PNG" /></p><h4 id="payload-11">Payload</h4><p>无</p><h3 id="pingreq">PINGREQ</h3><p><code>PINGREQ</code>消息是从已连接的客户端发送到服务器的“心跳”消息。</p><h4 id="fixed-header-11">Fixed header</h4><p><img src="/img/mqtt/PINGREQ_fixed_header.PNG" /></p><h4 id="variable-header-12">Variable header</h4><p>无</p><h4 id="payload-12">Payload</h4><p>无</p><h4 id="response-4">Response</h4><p>对 <code>PINGREQ</code> 消息的响应是 <code>PINGRESP</code> 消息。</p><h3 id="pingresp---ping-响应">PINGRESP - PING 响应</h3><h4 id="fixed-header-12">Fixed header</h4><p><img src="/img/mqtt/PINGRESP_fixed_header_1.PNG" /></p><p><img src="/img/mqtt/PINGRESP_fixed_header_2.PNG" /></p><h4 id="variable-header-13">Variable header</h4><p>无</p><h4 id="payload-13">Payload</h4><p>无</p><h3 id="disconnect">DISCONNECT</h3><p>客户端向服务器发送 <code>DISCONNECT</code> 消息，表示它即将关闭TCP/IP 连接。这允许干净的断开连接，而不是仅仅删除线路。</p><p>如果客户端连接了 clean会话标志集，那么之前维护的关于客户端的所有信息将被丢弃。</p><h4 id="fixed-header-13">Fixed header</h4><p><img src="/img/mqtt/DISCONNECT_fixed_header.PNG" /></p><h4 id="variable-header-14">Variable header</h4><p>无</p><h4 id="payload-14">Payload</h4><p>无</p><hr /><p>QoS level 1：</p><p><img src="/img/mqtt/QoS 1 flow.png" style="zoom:25%;" /></p><p>QoS level 2：</p><p><img src="/img/mqtt/QoS 2 flow.png" style="zoom:25%;" /></p>]]></content>
    
    
    <categories>
      
      <category>IOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 服务</title>
    <link href="/2022/05/04/Linux/service/"/>
    <url>/2022/05/04/Linux/service/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-服务">Linux 服务</h1><h3 id="daemon与服务">daemon与服务</h3><p>系统为了某些功能必须要提供一些服务（系统本身或者网络方面），这个服务就称为<code>service</code>。<code>service</code>的提供需要程序来运行，完成这个 <code>service</code> 的程序就称之为<code>daemon</code>。</p><blockquote><p>服务的名称被建立之后，在 Linux中使用时，通常在服务的名称之后会加上一个<code>d</code>。</p></blockquote><h3 id="systemd">systemd</h3><p><code>systemd</code> 全部就是仅有一个 <code>systemd</code> 服务搭配<code>systemctl</code> 命令来处理，无须其他额外的命令来支持。</p><p><code>systemd</code>将所有的服务定义为一个服务单元(<code>unit</code>)，并将每个<code>unit</code> 归类到不同的服务类型中(<code>type</code>)中。</p><p><code>systemd</code>将服务单元(<code>unit</code>)以下几个类型(<code>type</code>):</p><ul><li>service</li><li>socket</li><li>target</li><li>path</li><li>snapshot</li><li>timer</li><li>...</li></ul><p><code>systemd</code> 将许多的功能集合成为一个所谓的<code>target</code>项目，这个项目这要在设计操作环境的创建，所以是集合了许多的<code>daemon</code>，执行某个 <code>target</code> 就是执行很多的<code>daemon</code>。</p><h4 id="systemd-配置文件放置的目录"><code>systemd</code>配置文件放置的目录</h4><p>服务的基本类型包括：系统服务、数据监听与交换的 <code>socket</code>文件服务(<code>socket</code>)、存储系统状态的快照类型、提供不同类似运行级别分类的操作环境(<code>target</code>)。</p><p>文件目录：</p><ul><li><code>/usr/lib/systemd/system/</code>：每个服务最主要的启动脚本设置。</li><li><code>/run/systemd/system/</code>：系统执行过程中所产生的服务脚本。</li><li><code>/etc/systemd/system/</code>：管理员根据主机系统的需求所建立的执行脚本。</li></ul><p>操作系统所执行的服务均设置在<code>/etc/systemd/system/</code>中设置，仅是一些链接文件。而实际的启动脚本文件在<code>/usr/lib/systemd/system/</code>中，必须在该目录下才能修改相应服务的启动设置。</p><h4 id="systemd-的-unit-类型"><code>systemd</code> 的 <code>unit</code>类型</h4><p>扩展名就是服务的类型。例如：<code>multipathd.service</code>、<code>multi-user.target</code>。</p><p>几种常见的 <code>systemd</code> 的服务类型：</p><table><colgroup><col style="width: 29%" /><col style="width: 70%" /></colgroup><thead><tr class="header"><th style="text-align: center;">扩展名</th><th style="text-align: left;">主要服务功能</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>.service</code></td><td style="text-align: left;">一般服务类型(serviceunit)：主要是系统服务，包括服务器本身需要的本地服务以及网络服务等，经常被使用到的服务大多是这种类型。所以，这也是最常见的类型了。</td></tr><tr class="even"><td style="text-align: center;"><code>.socket</code></td><td style="text-align: left;">内部程序数据交换的 <code>socket</code>服务(<code>socket unit</code>)：主要是 IPC(Inter-process communication)的传输信息 <code>socket</code> 文件 (<code>socket file</code>)功能。这种类型的服务通常在监控信息传递的<code>socket</code>文件中，当通过此 <code>socket</code>文件传递信息要链接服务时，就根据当时的状态将该用户的要求传送到对应的<code>daemon</code>，若 <code>daemon</code> 尚未启动，则启动该<code>daemon</code> 后在传送用户的要求。</br> 使用 <code>socket</code>类型的服务一般较少用到，因此在开机启动时通常会稍微延迟启动的时间。一般用于本地服务较多。</td></tr><tr class="odd"><td style="text-align: center;"><code>.target</code></td><tdstyle="text-align: left;">执行环境类型(<code>target unit</code>)：其实是一群<code>unit</code> 的集合。</td></tr><tr class="even"><tdstyle="text-align: center;"><code>.mount</code></br><code>.automount</code></td><td style="text-align: left;">文件系统挂载相关的服务(automountunit/mount unit)：例如来自网络的自动挂载、NFS文件系统挂载等与文件系统相关性较高的进程管理。</td></tr><tr class="odd"><td style="text-align: center;"><code>.path</code></td><td style="text-align: left;">检测特定文件或目录类型(pathunit)：某些服务需要检测某些特定的目录来提供队列服务，例如最常见的打印服务，就是通过检测打印队列目录来启动打印功能。</td></tr><tr class="even"><td style="text-align: center;"><code>timer</code></td><tdstyle="text-align: left;">循环执行的服务(<code>timer unit</code>)：这个服务有点类似anacrontab，不过是由 <code>systemd</code> 主动提供。</td></tr></tbody></table><h3 id="systemctl-管理服务"><code>systemctl</code> 管理服务</h3><p><code>systemd</code> 这个启动服务的机制，主要是通过一个名为<code>systemctl</code> 的命令来完成的。</p><h4id="systemctl-管理单一服务service-unit-的启动开机启动与查看状态"><code>systemctl</code>管理单一服务(<code>service unit</code>) 的启动/开机启动与查看状态</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl [command] [unit]<br>command:<br>start:立刻开启[unit]<br>stop:立刻关闭[unit]<br>restart:立刻重新启动[unit]<br>reload: 不关闭[unit]的情况下，重新加载配置文件，让设置生效<br>enable:设置开机时，[unit]自动启动<br>disable:关闭开机时自动启动<br>status:当前[unit]的状态<br>is-active:当前是否正在运行中<br>is-enable:是否设置开机自动启动<br></code></pre></div></td></tr></table></figure><p><code>systemctl status docker.service</code>:</p><p><img src="/img/service/status.png" /></p><ul><li>Loaded：开机是服务是否自动启动[<strong>enabled</strong>，<strong>disabled</strong>]</li><li>Active：是否正在执行[<strong>running</strong>，<strong>dead</strong>]</li></ul><p>几种常见的服务状态：</p><ul><li>active (running)：正在运行</li><li>active (exited)：仅执行一次就正常结束的服务，目前没有进程执行</li><li>active(waiting)：正在运行中，还需要等待其他事件发生才能继续执行</li><li>inactive：服务当前没有运行</li></ul><p><code>daemon</code> 的默认状态：</p><ul><li>enabled：开机自动运行</li><li>disabled：开机不运行</li><li>static：不可以自行启动，但是可能会其他 <code>enabled</code>的服务唤醒</li><li>mask：<code>daemon</code>无论如何都不会被启动，因为已经被强制注销</li></ul><h4 id="systemctl-查看系统上的所有服务"><code>systemctl</code>查看系统上的所有服务</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl [command] [--type=TPYE] [--all]<br>command:<br>list-units:依据 unit 显示目前所有启动 unit，若加上 --all 会列出没有启动的<br>list-units-files:依据 /usr/lib/systemd/system/ 内的文件，将所有文件列表说明<br>--type=TPYE: 服务类型: service、socket、target等<br></code></pre></div></td></tr></table></figure><h4 id="systemctl-管理不同的操作环境target-unit"><code>systemctl</code>管理不同的操作环境(<code>target unit</code>)</h4><p><code>systemctl list-units --type=target --all</code>：</p><p><img src="/img/service/target.png" /></p><p>与操作界面相关性较高的 <code>tatget</code> 有以下几个：</p><ul><li>graphical.target：命令加上图形界面，包含有 multi-user.target</li><li>multi-user.target：纯命令行模式</li><li>rescue.target：在无法使用 root 登录的情况下，<code>systemd</code>在启动时会多加一个额外的临时系统，与原本的操作系统无关，此时可以获得root 权限来维护系统。</li><li>emergency.target：紧急处理系统的错误，还是需要使用 root登录的情况，在无法使用 rescue.target 时，可以尝试这种模式</li><li>shutdown.target：关机模式</li><li>getty.target：可设置需要几个 tty 的操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl [command] [unit.target]<br>command:<br>get-default:获取当前的 target<br>set-default:设置 [unit.target] 为默认的操作模式<br>isolate:切换到 [unit.target] 操作模式<br><br>在不重新启动的情况下，将目前操作环境改为纯命令模式，关闭图形界面<br>systemctl isolate multi-user.target<br></code></pre></div></td></tr></table></figure><p><font color="#00dddd">在 <code>target</code> 项目中必须使用<code>isolate</code> 才能切换操作环境，而不是 <code>start</code></font></p><p><code>systemd</code> 还提供可一些简单的命令来切换操作模式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl poweroff系统关机<br>systemctl reboot 重新启动<br>systemctl suspend进入挂起模式<br>systemctl hibernate进入休眠模式<br>systemctl rescue强制进入休眠模式<br>systemctl emergency 强制进入紧急恢复模式<br></code></pre></div></td></tr></table></figure><ul><li>suspend：挂起模式会将系统的状态数据保存到内存中，然后关闭大部分的系统硬件。当用户按下唤醒机器的按钮时，系统数据会在内存中恢复，然后启动大部分被关闭的硬件</li><li>hibernate：休眠模式则是将系统状态保存到硬盘当中，保存完毕后，将计算机关机。</li></ul><h4 id="systemctl-分析各种服务之间的依赖关系"><code>systemctl</code>分析各种服务之间的依赖关系</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl list-dependencies [unit] [--reverse]<br>--reverse: 反向追踪谁使用该 [unit].<br></code></pre></div></td></tr></table></figure><p><code>systemctl list-dependencies</code>：</p><p><img src="/img/service/dependencies.png" /></p><h4 id="与-systemd-的-daemon-运行过程相关的目录">与 <code>systemd</code>的 <code>daemon</code> 运行过程相关的目录</h4><p><code>systemd</code> 启动脚本配置文件在<code>/usr/lib/systemd/system/</code> 与<code>/etc/systemd/system/</code> 目录下。</p><ul><li><p><code>/usr/lib/systemd/system/</code></p><p>官方提供的软件安装后，默认的启动脚本配置文件放在该目录下，这里的数据尽量不要修改，如需要修改，应该修改<code>/etc/systemd/system/</code> 下的文件</p></li><li><p><code>/run/systemd/system/</code></p><p>系统执行过程中所产生的服务脚本，其优先级高于<code>/usr/lib/systemd/system/</code></p></li><li><p><code>/etc/systemd/system/</code></p><p>管理员依据主机系统的需要所建立的执行脚本，执行优先级高于<code>/run/systemd/system/</code></p></li><li><p><code>/etc/sysconfig/*</code></p><p>服务将初始化的一些选项设置写入到这个目录</p></li><li><p><code>/var/lib/</code></p><p>一些会产生数据的服务都会将它的数据写入到 <code>/var/lib/</code>目录中。</p></li><li><p><code>/run/</code></p><p>放置 <code>daemon</code> 的缓存</p></li></ul><hr /><p>获取 socket 文件的位置：</p><p><code>systemctl list-sockets</code>:</p><p><img src="/img/service/sockets.png" /></p><hr /><p>查询服务所对应的端口，位于 <code>/etc/services</code></p><p>执行 <code>cat /etc/services</code> 查看端口：</p><p><img src="/img/service/port%20number.png" /></p><hr /><h4 id="关闭网络服务">关闭网络服务</h4><blockquote><p>会产生一个网络监听端口(port)的进程，就可以称它是网络服务</p></blockquote><p>查看网络端口的方式：</p><p><code>netstat -tlunp</code></p><p><img src="/img/service/net%20port.png" /></p><p>关闭一个网络服务：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl stop avahi-daemon.service<br>systemctl stop avahi-daemon.socket<br>systemctl disable avahi-daemon.service avahi-daemon.socket<br></code></pre></div></td></tr></table></figure><h3 id="systemctl-对于-service-类型的配置文件"><code>systemctl</code>对于 <code>service</code> 类型的配置文件</h3><ul><li><code>/usr/lib/systemd/system/vsftpd.service</code>：官方发布默认配置文件</li><li><code>/etc/systemd/system/vsftpd.service.d/custom.conf</code>：在<code>/etc/systemd/system</code>下建立与配置文件相同文件名的目录，但是要加上 <code>.d</code>扩展名，然后在该目录下建立配置文件即可。配置文件的扩展名最好用<code>.conf</code>。</li><li><code>/etc/systemd/system/vsftpd.service.wants/*</code>：此目录内的文件为<strong>链接</strong>文件，设置依赖服务的链接。启动<code>vsftpd.service</code> 之后，最好加上该目录下建议的服务。</li><li><code>/etc/systemd/system/vsftpd.service.requires/*</code>：此目录内的文件为<strong>链接</strong>文件，设置依赖服务的链接。在启动<code>vsftpd.service</code> 之前，需要事先启动的服务。</li></ul><p><img src="/img/service/sshd.png" /></p><p>配置文件中，能够将整个设置分为三个部分：</p><ul><li>[Unit]：<code>unit</code> 本身的说明，以及其他依赖<code>deamon</code> 的设置，包括在什么服务之后才启动此 unit之类的设置值。</li><li>[Service]、[Socket]、[Timer]、[Mount]、[Path]：不同的 unit类型就要使用相应的设置项目。这个项目主要用来规范服务启动的脚本、环境配置文件名、重新启动的方式等。、</li><li>[Install] ：将此 <code>unit</code> 安装到哪个 target 里去</li></ul><p>配置文件内的设置规则：</p><ul><li>设置项目通常是可以重复的，例如可以重复设置两个 After在配置文件中，但是会替换前面的。</li><li>如果设置参数需要有【是/否】的项目(布尔值，Boolean)，可以使用1、yes、true、on代表启动，用0、no、false、off代表关闭</li><li>空白行、开头为 # 或 ；的那一行，代表注释</li></ul><h4 id="两个-vsftpd-运行的实例">两个 vsftpd 运行的实例</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 建立所需要的配置文件</span><br>cd /etc/vsftpd<br>cp vsftpd.conf vsftpd2.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改端口</span><br>vim vsftpd2.conf<br>listen_port=555<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 处理启动脚本设置</span><br>cd /etc/systemd/system<br>cp /usr/lib/systemd/system/vsftpd.service vsftpfd2.service<br>vim vsftpd.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 重新加载 systemd 的脚本配置文件内容</span><br>systemctl daemon-reload<br></code></pre></div></td></tr></table></figure><h3 id="自定义服务">自定义服务</h3><p>脚本：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /backups/backup.sh</span><br>----<br><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br>source = &quot;/etc /home /root /var/lib /var/spool/&#123;cron, at, mail&#125;&quot;<br>target = &quot;/backups/backup-system-$(data +%Y-%m-%d).tar.gz&quot;<br>[ ! -d /backups ] &amp;&amp; mkdir /backups<br>tar -zcvf $&#123;target&#125; $&#123;source&#125; $&gt; /backups/backup.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> a+x /backups/backup.sh</span><br></code></pre></div></td></tr></table></figure><p>设计一个名为 <code>bachup.service</code> 的启动脚本设置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/systemd/system/backup.service</span><br>[Unit] <br>Description=backup my server<br>Requires=atd.service<br>[Service]<br>Type=simple<br>ExecStart=/bin/bash -c &quot; echo /backups/bachup.sh | at now&quot;<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><h3 id="systemctl-针对-timer-的配置文件"><code>systemctl</code> 针对<code>timer</code> 的配置文件</h3><p>任务需求：</p><p>想要使用 systemd 的 timer 功能，必须要有几个要件：</p><ul><li>操作系统的 <code>timer.target</code> 一定要启动。</li><li>要有个 <code>sname.service</code> 的服务存在(sname是你自己指定的名称)</li><li>要有个 <code>sname.timer</code> 的时间启动服务存在</li></ul><p><font color='#00dddd'> sname.timer </font> 的设置值</p><p>可以到 <code>/etc/systemd/system</code> 下面去建立一个<code>*.timer</code> 文件</p><p>基本设置如下：</p><table><colgroup><col style="width: 22%" /><col style="width: 77%" /></colgroup><thead><tr class="header"><th>设置参数</th><th>参数说明</th></tr></thead><tbody><tr class="odd"><td>OnActiveSec</td><td>当 timer.target 启动多久后才执行这个 unit</td></tr><tr class="even"><td>OnBootSec</td><td>当启动完成后多久之后才执行</td></tr><tr class="odd"><td>OnStartupSec</td><td>当 systemd 第一次启动之后过多久才执行</td></tr><tr class="even"><td>OnUnitActiveSec</td><td>这个 timer 配置文件所管理的那个 unit服务在最后一次启动后，隔多久再执行一次的意思</td></tr><tr class="odd"><td>OnUnitlnactiveSec</td><td>这个 timer 配置文件所管理的那个 unit服务在最后一次停止后，隔多久再执行一次的意思</td></tr><tr class="even"><td>OnCalendar</td><td>使用实际时间（非循环时间）的方式来启动服务的意思</td></tr><tr class="odd"><td>Unit</td><td>一般来说不太需要设置，因此如同上面提到的，基本上我们设置都是sname.server + sname.timer，那如果你的 sname 并不相同时，那在 .timer的文件中，就得要指定是哪个 service unit</td></tr><tr class="even"><td>Persistent</td><td>当使用 OnCalendar的设置时，指定该功能要不要持续进行的意思，通常是设置为yes，比较能够满足类似 anacron 的功能</td></tr></tbody></table><p><font color='#00dddd'>使用于 OnCalendar 的时间 </font></p><blockquote><p>语法：英文周名 YYYY-MM-DD HH:MM:SS</p><p>范例：Thu 2015-08-13 13:40:00</p></blockquote><p>也可以直接使用间隔时间来处理。常用的间隔时间单位有：</p><ul><li>us 或 usec：微妙</li><li>ms 或 msec：毫秒</li><li>s、sec、second、seconds</li><li>m、min、minute、minutes</li><li>h、hr、hour、hours</li><li>d、day、days</li><li>w、week、weeks</li><li>month、months</li><li>y、year、years</li></ul><p>常见的使用范例：</p><blockquote><p>隔 3 小时： 3h 或 3hr 或 3hours</p><p>隔 300 分钟过 10 秒： 10s 300m</p><p>隔 5 天又 100 分钟： 100m 5 day</p></blockquote><p><font color='#00dddd'>一个循环时间运行的案例</font>：</p><ul><li>启动后 2 小时开始执行一次 backup.service</li><li>自从第一次执行后，未来每两天执行一次 backup.service</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/systemd/system/backup.timer</span><br>[Unit]<br>Description=backup my server timer<br>[Timer]<br>OnBootSec=2hrs<br>OnUnitActiveSec=2days<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><p><font color='#00dddd'>固定日期运行案例</font>：</p><ul><li>星期天凌晨2点运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/systemd/system/backup2.timer</span><br>[Unit]<br>Description=backup my server timer2<br>[Timer]<br>OnCalendar=Sun *-*-* 02:00:00<br>Persistent=true<br>Unit=backup.service<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路径规划算法</title>
    <link href="/2022/05/04/Self-Driving/PathPlan/"/>
    <url>/2022/05/04/Self-Driving/PathPlan/</url>
    
    <content type="html"><![CDATA[<h1 id="自动驾驶汽车定位-感知-规划-决策-控制概述">1.自动驾驶汽车定位-感知-规划-决策-控制概述</h1><h3 id="定位">定位</h3><ul><li>定位，即通过GPS、惯导、激光雷达等传感器，获取车辆的位置和航向信息。</li><li><strong>绝对定位</strong>是指通过GPS实现，采用双天线，通过卫星获得车辆在地球上的绝对位置和航向信息。</li><li><strong>相对定位</strong>是指根据车辆的初始位姿，通过惯导、里程计等传感器获得加速度信息，将其对时间进行积分，即可得到相对初始位姿的当前位姿信息。</li></ul><h3 id="感知">感知</h3><ul><li>环境感知，即通过<strong>摄像头、激光雷达、毫米波雷达、超声波雷达</strong>等队中传感器，感知周围环境信息和车辆状态信息。</li><li>环境信息包括：道路、方向、曲率、坡度、交通标志，信号灯；车辆状态信息包括：车辆前进的速度、加速度、转向角度、车身位置及姿态。</li><li>多种传感器虽然可以获得丰富、细致的环境信息，但如何对多种传感器的信息进行<strong>融合统一处理</strong></li></ul><h3 id="规划">规划</h3><ul><li>规划是对未来时域、空域的车辆一系列动作的计划。从涉及的时空大小全局（宏观）路径规划和局部（微观）路径规划。</li><li><strong>全局路径规划</strong>指在已知全局地图的情况下，从车辆当前位置规划出一条到目的地的全局路径。</li><li><strong>局部路径规划</strong>指根据环境感知的信息在环道、转弯、躲避障碍物等情况下，实时规划出一条安全、平顺、舒适的行驶路径。</li></ul><h3 id="决策控制">决策控制</h3><ul><li>决策控制，包括决策和控制两部分</li><li>决策，在整个无人驾驶系统中，扮演<strong>驾驶员大脑</strong>的角色，根据定位、感知、路径规划的信息，决定无人车的形式策略。包括：选取哪条车道、是否换道、是否跟车行驶、是否绕道、是否停车等。</li><li>控制，主要包括<strong>转向、驱动、制动</strong>三方面的控制，执行规划决策模块下发的期望速度和期望转向角度，也包括转向灯、喇叭、门窗等的控制。</li></ul><h1id="全局路径规划算法dijkstra算法">2.全局路径规划算法——Dijkstra算法</h1><h2 id="算法简介">算法简介</h2><p>迪杰斯特拉算法(Dijkstra)是由荷兰计算机科学家狄克斯特拉于1959年提出的，因此又叫狄克斯特拉算法。是从一个节点遍历其余各节点的最短路径算法，解决的是有权图中最短路径问题</p><h2 id="算法思想">算法思想</h2><ul><li>设<spanclass="math inline">\(G=(V,E)\)</span>是一个带权有向图，把图中节点集合V分成两组，<font color='green'>第一组为已求出最短路径的集合</font>,(用S表示，初始时S中只有一个源点，以后每求得一条最短路径，就将该节点加入到集合S中，直到全部节点都加入到S中，算法结束)</li><li><font color='green'>第二组为区域未确定最短路径的节点集合</font>（用U表示），按最短路径长度的递增次序依次把第二组的节点加入S中。在加入的过程中，总保持从源点v到S中各节点的最短路径长度不大于从源点v到U中任何节点的最短路径长度。</li><li>此外，每个节点对应一个距离，S中的节点的距离就是从v到此节点的最短距离路径长度，U中的节点的距离，是从v到此节点只包括S中的节点为中间节点的当前最短路径长度。</li></ul><p><img src="/img/PathPlaning/Dijkstra.png" /></p><h2 id="算法精讲">算法精讲</h2><ul><li>初始时，S只包含起点s；U包含除s外的其他节点，且U中节点的距离为”起点s到该节点的距离“[例如，U中节点v的距离为(s,v)的长度，然后s和v不相邻，则v的距离为<spanclass="math inline">\(\infty\)</span>].</li><li>从U中选出”距离最短的节点k“，并将节点k加入到S中；同时，从U中移除节点k。</li><li>更新U中各节点到起点s的距离。之所以更新U中节点的距离，是因为上一步确定了k是求出最短路径的节点，从而可以利用k来更新其他节点的距离；例如，<spanclass="math inline">\((s,v)\)</span>的距离可能大于<spanclass="math inline">\((s,k)+(k,v)\)</span>的距离。</li><li>重复步骤(2)和(3)，直到遍历完所有节点。</li></ul><p><img src="/img/PathPlaning/Dijkstra1.png" /></p><p><strong>选取节点<span class="math inline">\(D\)</span>，<spanclass="math inline">\(S=\{D(0)\}\)</span> <spanclass="math inline">\(U=\{A(\infty),B(\infty),{\color{Red}C(3)},E(4),F(\infty),G(\infty)\}\)</span></strong></p><p><img src="/img/PathPlaning/Dijkstra2.png" /></p><p><strong>选取节点<span class="math inline">\(C\)</span>，<spanclass="math inline">\(S=\{D(0),C(3)\}\)</span>，<spanclass="math inline">\(\{A(\infty),B(13),{\color{Red}E(4)},F(9),G(\infty)\}\)</span>.</strong></p><p><img src="/img/PathPlaning/Dijkstra3.png" /></p><p><strong>选取节点<span class="math inline">\(E\)</span>，<spanclass="math inline">\(S=\{D(0),C(3),E(4)\}\)</span>，<spanclass="math inline">\(U=\{A(\infty),B(13),{\color{Red}F(6)},G(12)\}\)</span>.</strong></p><p><img src="/img/PathPlaning/Dijkstra4.png" /></p><p><strong>选取节点<span class="math inline">\(F\)</span>，<spanclass="math inline">\(S=\{D(0),C(3),E(4),F(6)\}\)</span>，<spanclass="math inline">\(U=\{A(2),B(13),{\color{Red}G(12)}\}\)</span>.</strong></p><p><img src="/img/PathPlaning/Dijkstra5.png" /></p><p><spanclass="math inline">\(S=\{D(0),C(3),E(4),F(6),G(12)\}\)</span>，<spanclass="math inline">\(U=\{A(22),{\color{Red}B(13)}\}\)</span>.</p><p><img src="/img/PathPlaning/Dijkstra6.png" /></p><p><spanclass="math inline">\(S=\{D(0),C(3),E(4),F(6),G(12),B(13)\}\)</span>，<spanclass="math inline">\(U=\{\color{Red}A(22)\}\)</span>.</p><p><img src="/img/PathPlaning/Dijkstra7.png" /></p><p><spanclass="math inline">\(S=\{D(0),C(3),E(4),F(6),G(12),B(13),A(22)\}\)</span>，<spanclass="math inline">\(U=\varnothing\)</span>.</p><p><img src="/img/PathPlaning/Dijkstra8.png" /></p><p><span class="math inline">\(D\rightarrow A\)</span>的最优路径为<spanclass="math inline">\(D\rightarrow E \rightarrow F \rightarrowA\)</span></p><p>最短距离为22</p><h2 id="matlab实现">Matlab实现</h2><figure class="highlight matlab"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><pre><code class="hljs matlab">clc<br>clear<br>close all<br><span class="hljs-comment">%% 图定义</span><br><span class="hljs-comment">% 根据节点的邻近节点表及字母点-数字节点对应表，构造节点元胞数组</span><br>nodes_dist = cell(<span class="hljs-number">0</span>);<br>nodes_dist(<span class="hljs-number">1</span>,:) = &#123;<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">14</span>]&#125;;<br>nodes_dist(<span class="hljs-number">2</span>,:) = &#123;<span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>]&#125;;<br>nodes_dist(<span class="hljs-number">3</span>,:) = &#123;<span class="hljs-number">3</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]&#125;;<br>nodes_dist(<span class="hljs-number">4</span>,:) = &#123;<span class="hljs-number">4</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;;<br>nodes_dist(<span class="hljs-number">5</span>,:) = &#123;<span class="hljs-number">5</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>]&#125;;<br>nodes_dist(<span class="hljs-number">6</span>,:) = &#123;<span class="hljs-number">6</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>]&#125;;<br>nodes_dist(<span class="hljs-number">7</span>,:) = &#123;<span class="hljs-number">7</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]&#125;;<br><br><span class="hljs-comment">%% 算法初始化</span><br><span class="hljs-comment">% S/U的第一列表示节点编号</span><br><span class="hljs-comment">% 对于S,第二列表示从源节点到本节点已求得的最小距离，不再变更；</span><br><span class="hljs-comment">% 对于U,第二列表示从源节点到本节点暂时求得的最小距离，可能会变更</span><br>S = [<span class="hljs-number">4</span>, <span class="hljs-number">0</span>];<br>U(:,<span class="hljs-number">1</span>) = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br>U(:,<span class="hljs-number">2</span>) = [<span class="hljs-built_in">inf</span>, <span class="hljs-built_in">inf</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-built_in">inf</span>, <span class="hljs-built_in">inf</span>]&#125;;<br><br><span class="hljs-comment">% 最优路径及暂时的最优路径的初始化</span><br>path_opt = cell(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>);<br>path_opt(<span class="hljs-number">4</span>,:) = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">4</span>&#125;;<br><br>path_temp = cell(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>);<br>path_temp(<span class="hljs-number">3</span>,:) = &#123;<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>]&#125;;<br>path_temp(<span class="hljs-number">4</span>,:) = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">4</span>&#125;;<br>path_temp(<span class="hljs-number">5</span>,:) = &#123;<span class="hljs-number">5</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]&#125;;<br><br><span class="hljs-comment">%% 循环遍历所有节点</span><br><span class="hljs-keyword">while</span> ~<span class="hljs-built_in">isempty</span>(U)<br>[dist_min, idx] = <span class="hljs-built_in">min</span>(U(:,<span class="hljs-number">2</span>));<br>node_min = U(idx, <span class="hljs-number">1</span>);<br>S(<span class="hljs-keyword">end</span>+<span class="hljs-number">1</span>,:) = [node_min, dist_min];<br>U(idx,:) = [];<br><br><span class="hljs-comment">% 将最小的距离值的节点添加到到最优路径集合</span><br>path_opt(node_min,:) = path_temp(node_min,:);<br><br><span class="hljs-comment">%% 依次遍历最小距离节点的邻节点，判断是否在U集合中更新邻节点的距离值</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(nodes_dist&#123;node_min, <span class="hljs-number">2</span>&#125;)<br><span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>;<br><span class="hljs-comment">% 需要判断的节点</span><br>node_temp = nodes_dist&#123;node_min, <span class="hljs-number">2</span>&#125;(<span class="hljs-built_in">i</span>);<br><br><span class="hljs-comment">% 找出U集合中节点node_temp的索引值</span><br>idx_temp = <span class="hljs-built_in">find</span>(node_temp == U(:,<span class="hljs-number">1</span>));<br><br><span class="hljs-comment">% 判断是否更新</span><br><span class="hljs-keyword">if</span> ~<span class="hljs-built_in">isempty</span>(idx_temp)<br><span class="hljs-keyword">if</span> dist_min + node_dist&#123;node_min, <span class="hljs-number">3</span>&#125;(<span class="hljs-built_in">i</span>) &lt; U(idx_temp, <span class="hljs-number">2</span>)<br>U(idx_temp, <span class="hljs-number">2</span>) = dist_min + nodes_dist&#123;node_min, <span class="hljs-number">3</span>&#125;(<span class="hljs-built_in">i</span>)<br><br><span class="hljs-comment">% 更新暂时最优路径</span><br>path_temp&#123;node_temp, <span class="hljs-number">1</span>&#125; = node_temp;<br>            path_temp&#123;node_temp, <span class="hljs-number">2</span>&#125; = [path_opt&#123;node_min, <span class="hljs-number">2</span>&#125;, node_temp];<br>            <span class="hljs-keyword">end</span>        <br></code></pre></td></tr></table></figure><h2 id="python实现">Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 图定义</span><br><span class="hljs-comment"># 根据节点的邻近节点表-数字对应表，构造图</span><br>nodes_dist = <span class="hljs-built_in">dict</span>()<br>nodes_dist[<span class="hljs-number">1</span>] = &#123;<span class="hljs-number">2</span>: <span class="hljs-number">12</span>, <span class="hljs-number">6</span>: <span class="hljs-number">16</span>, <span class="hljs-number">7</span>: <span class="hljs-number">14</span>&#125;<br>nodes_dist[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">12</span>, <span class="hljs-number">3</span>: <span class="hljs-number">10</span>, <span class="hljs-number">6</span>: <span class="hljs-number">7</span>&#125;<br>nodes_dist[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">2</span>: <span class="hljs-number">10</span>, <span class="hljs-number">4</span>: <span class="hljs-number">3</span>, <span class="hljs-number">5</span>: <span class="hljs-number">5</span>, <span class="hljs-number">6</span>: <span class="hljs-number">6</span>&#125;<br>nodes_dist[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">3</span>: <span class="hljs-number">3</span>, <span class="hljs-number">5</span>: <span class="hljs-number">4</span>&#125;<br>nodes_dist[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">3</span>: <span class="hljs-number">5</span>, <span class="hljs-number">4</span>: <span class="hljs-number">4</span>, <span class="hljs-number">6</span>: <span class="hljs-number">2</span>, <span class="hljs-number">7</span>: <span class="hljs-number">8</span>&#125;<br>nodes_dist[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">16</span>, <span class="hljs-number">2</span>: <span class="hljs-number">7</span>, <span class="hljs-number">3</span>: <span class="hljs-number">6</span>, <span class="hljs-number">5</span>: <span class="hljs-number">2</span>, <span class="hljs-number">7</span>: <span class="hljs-number">9</span>&#125;<br>nodes_dist[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">14</span>, <span class="hljs-number">5</span>: <span class="hljs-number">8</span>, <span class="hljs-number">6</span>: <span class="hljs-number">9</span>&#125;<br><br><span class="hljs-comment"># S 集合</span><br>S = <span class="hljs-built_in">dict</span>()<br><br><span class="hljs-comment"># U 集合</span><br>U = <span class="hljs-built_in">dict</span>()<br>U[<span class="hljs-number">1</span>] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>U[<span class="hljs-number">2</span>] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>U[<span class="hljs-number">3</span>] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>U[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span><br>U[<span class="hljs-number">5</span>] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>U[<span class="hljs-number">6</span>] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>U[<span class="hljs-number">7</span>] = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br><span class="hljs-comment"># 当前最优路径</span><br>keys = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)]<br>path_temp = <span class="hljs-built_in">dict</span>([(k, []) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> keys])<br><br><br><span class="hljs-comment"># 最终最优路径</span><br>path_opt = <span class="hljs-built_in">dict</span>([(k, []) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> keys])<br><br><span class="hljs-comment"># 循环遍历U集合，直到所有节点被确定，并移出集合</span><br><span class="hljs-keyword">while</span> U:<br>    <span class="hljs-comment"># 寻找U集合中的最小值，及其对应的节点</span><br>    dist_min = <span class="hljs-built_in">min</span>(U.values())<br>    node_min = <span class="hljs-built_in">min</span>(U, key=U.get)<br>    <span class="hljs-comment"># 将最小值节点移出U集合，移入S集合</span><br>    S[node_min] = dist_min<br>    <span class="hljs-keyword">del</span> U[node_min]<br><br>    <span class="hljs-comment"># 确定该最小值节点的最终最优路径</span><br>    path_opt[node_min] += path_temp[node_min]<br>    path_opt[node_min].append(node_min)<br><br>    <span class="hljs-comment"># 围绕该最小值节点，循环遍历其相邻节点</span><br>    <span class="hljs-keyword">for</span> node_temp <span class="hljs-keyword">in</span> nodes_dist[node_min].keys():<br>        <span class="hljs-comment"># 判断该相邻节点是否在集合U中，即该节点是否已经被确定。若已确定，则不做考虑</span><br>        <span class="hljs-keyword">if</span> node_temp <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(U.keys()):<br>            <span class="hljs-comment"># 判断该路径是否比原有路径短</span><br>            <span class="hljs-keyword">if</span> (dist_min + nodes_dist[node_min][node_temp]) &lt; U[node_temp]:<br>                <span class="hljs-comment"># 更新最短距离</span><br>                U[node_temp] = dist_min + nodes_dist[node_min][node_temp]<br>                <span class="hljs-comment"># 该最短距离所对应的新路径</span><br>                path_temp[node_temp] = path_opt[node_min]<br><br><span class="hljs-built_in">print</span>(S, U)<br><span class="hljs-built_in">print</span>(path_opt)<br></code></pre></td></tr></table></figure><h1 id="全局路径规划算法蚁群算法">3.全局路径规划算法——蚁群算法</h1><h2 id="算法简介-1">算法简介</h2><p>蚁群算法是一种智能算法，它是由一群无智能或有微智能的个体(Agent)通过相互协作表现出智能行为，从而为求解复杂问题提供了一个新的可能性。</p><ul><li>蚁群算法(Ant Colony Algorithm, ACA)于1992年首次提出，该算法模拟了自然界中<font color='green'>蚂蚁的觅食行为</font>.</li><li>蚂蚁在寻找食物源时，会在其经过的路径上释放一种信息素，并能够感知其他蚂蚁释放的信息素，信息素<font color='green'>浓度的大小表征路径的远近</font>，信息素浓度越高，表示对应的路径距离越短。</li><li>通常，蚂蚁会以较大的概率优先选择信息素浓度较大路径，并释放一定量的信息素，以增强该条路径上的信息素浓度，这样，会形成正反馈。最终，蚂蚁能够找到一条从巢穴到食物源的最佳路径，即距离最短。</li></ul><h3 id="tsp问题描述">TSP问题描述</h3><p>蚁群算法最早用来解决TSP问题，并且表现出很大的优越性，因为它有分布式特性、鲁棒性强并且容易与其他算法结合，但是同时也存在收敛速度慢，容易陷入局部最优等缺点。</p><p>TSP问题(Travel SalespersonProblem，即旅行商问题或者称为中国邮递员问题)，是一种NP-hard问题，此类问题用一般的算法很难得到最优解的，所以一般需要借助一些启发式算法求解，例如遗传算法(GA)，蚁群算法(ACO)，微粒群算法(PSO)等。</p><blockquote><p>TSP问题（旅行商问题）是指旅行家旅行n个城市，要求<strong>各个城市经历且仅经历一次</strong>然后回到出发城市，并要求所走路程最短。</p></blockquote><p>一个TSP问题可以表达为：求解遍历图<spanclass="math inline">\(G=(V,E,C)\)</span>，所有的节点一次并且回到起始节点，使得连接这些节点的路径成本最低。</p><h2 id="算法思想-1">算法思想</h2><ul><li>用蚂蚁的行走路径并表示待优化问题的可行解，整个蚂蚁群的所有路径构成待优化问题的解空间。</li><li>路径较短的，蚂蚁会释放较多的信息素，随着时间的推进，<font color='green'>较短的路径上积累的信息素浓度逐渐增高</font>，选择该路径的蚂蚁个数也愈来愈多。</li><li>最终，整个蚂蚁会在正反馈的作用下集中到最佳的路径上，此时对应的便是待优化问题的最优解。</li></ul><p><img src="/img/PathPlaning/ACA.jpg" /></p><h2 id="算法精讲-1">算法精讲</h2><h3 id="原理">原理</h3><p>假如蚁群中所有蚂蚁的数量为<spanclass="math inline">\(m\)</span>，所有城市之间的信息素用矩阵<spanclass="math inline">\(pheromone\)</span>表示，最短路径为<spanclass="math inline">\(bestLength\)</span></p><p>，最佳路径为<spanclass="math inline">\(bestTour\)</span>。每只蚂蚁都有自己的内存，内存中用一个禁忌表(Tabu)来存储蚂蚁已经访问过的城市，表示以后的搜索将不能访问这些城市；还有用另外一个允许访问的城市表(Allowed)来存储它还可以访问的城市；另外还用矩阵(Delta)来储存它在一个循环（或者迭代）中经过的路径释放的信息素；还有另外一些数据，例如一些控制参数<spanclass="math inline">\((\alpha,\beta,\rho,Q)\)</span>，该蚂蚁行走完全程的总成本或距离(tourLength)，等等。假定算法总共运行MAX_GEN次，运行时间为t.</p><p>蚁群算法计算过程如下：</p><ol type="1"><li><p>初始化</p></li><li><p>为每只蚂蚁选择下一个节点。</p></li><li><p>更新信息素矩阵</p></li><li><p>检查终止条件</p></li></ol><blockquote><p>如果达到最大迭代数MAX_GEN，算法终止，转到第(5)步；否则，重新初始化所有蚂蚁的Delta矩阵所有元素初始化为0，Tabu表清空，Allowed表加入所有城市节点。随机选择它们的起始位置（也可以人为指定）。在Tabu表中加入起始节点，Allowed表中删除该起始节点，重复执行(2),(3),(4)步。</p></blockquote><ol start="5" type="1"><li>输出最优值</li></ol><hr /><p>不失一般性，设整个蚂蚁群体中蚂蚁的数量为<spanclass="math inline">\(m\)</span>，城市的数量为<spanclass="math inline">\(n\)</span>，城市<spanclass="math inline">\(i\)</span>与城市<spanclass="math inline">\(j\)</span>之间的相互距离为<spanclass="math inline">\(d_{ij}(i,j=1,2,...,n)\)</span>，<spanclass="math inline">\(t\)</span>时刻城市<spanclass="math inline">\(i\)</span>与城市<spanclass="math inline">\(j\)</span>连接路径上的信息素浓度为<spanclass="math inline">\(\tau_{ij}(t)\)</span>。初始时刻，各个城市间连接路径上的信息素浓度相同，不妨设为<spanclass="math inline">\(\tau_{ij}(0)=\tau_0\)</span>。</p><p>蚂蚁<spanclass="math inline">\(k(k=1,2,...,m)\)</span>根据各个城市间连接路径上的信息素浓度决定其下一个访问的城市，设<spanclass="math inline">\(P^k_{ij}(t)\)</span>表示<spanclass="math inline">\(t\)</span>时刻蚂蚁<spanclass="math inline">\(k\)</span>从城市<spanclass="math inline">\(i\)</span>转移到城市<spanclass="math inline">\(j\)</span>的概率，其计算公式如下：</p><p>​ <spanclass="math display">\[P^K_{ij}=\begin{cases}\dfrac{[\tau_{ij}(t)]^\alpha\cdot [\eta_{ij}(t)]^\beta}{\sum\limits_{S \inallow_k}[\tau_{is}(t)]^\alpha\cdot [\eta_{is}(t)]^\beta},&amp;S \inallow_k \\ 0, &amp;S \notin allow_k\end{cases}\]</span></p><p>其中，<spanclass="math inline">\(\eta_{ij}(t)\)</span>为启发函数，<spanclass="math inline">\(\eta_{ij}(t)=\frac{1}{d_{ij}}\)</span>，表示蚂蚁从城市<spanclass="math inline">\(i\)</span>转移到城市<spanclass="math inline">\(j\)</span>的期望程度，<spanclass="math inline">\(allow_k(k=1,2,...,m)\)</span>蚂蚁<spanclass="math inline">\(k\)</span>待访问城市的集合。开始时，<spanclass="math inline">\(allow_k\)</span>中有<spanclass="math inline">\((n-1)\)</span>个元素，即包括除了蚂蚁<spanclass="math inline">\(k\)</span>出发城市的其他所有城市，随着时间的推进，<spanclass="math inline">\(allow_k\)</span>中的元素不断减少，直至为空，即表示所有的城市均访问完毕。<spanclass="math inline">\(\alpha\)</span>为信息素重要程度因子，其值越大，表示信息素的浓度在转移中起的作用越大；<spanclass="math inline">\(\beta\)</span>为启发函数重要程度因子，其值越大，表示启发函数转移中的作用越大，即蚂蚁会以较大的概率转移到距离短的城市。</p><p>在蚂蚁释放信息素的同时，各个城市间连接路径上的信息素逐渐消失，设参数<spanclass="math inline">\(\rho(0&lt;\rho&lt;1)\)</span>表示信息挥发程度。因此，当所有蚂蚁完成一次循环后，各个城市间连接路径上的信息素浓度需要进行实时更新，具体公式如下：</p><p>​ <span class="math display">\[\begin{cases}\tau_{ij}(t+1) =(1-\rho)*\tau_{ij}(t)+\Delta\tau_{ij} \\\Delta\tau_{ij}=\sum\limits_{k=1}^m \Delta\tau^k_{ij}, &amp;0&lt;\rho&lt;1\end{cases}\]</span></p><p>其中，<spanclass="math inline">\(\Delta\tau^k_{ij}\)</span>表示第<spanclass="math inline">\(k\)</span>只蚂蚁在城市<spanclass="math inline">\(i\)</span>与城市<spanclass="math inline">\(j\)</span>连接路径上释放的信息素浓度，<spanclass="math inline">\(\Delta\tau_{ij}\)</span>表示所有蚂蚁在城市<spanclass="math inline">\(i\)</span>与城市<spanclass="math inline">\(j\)</span>连接路径上释放的信息素浓度之和。</p><p>ant cycle system 模型中，<spanclass="math inline">\(\Delta\tau^k_{ij}\)</span>的计算公式如下：</p><p>​ <span class="math display">\[\Delta\tau^k_{ij}=\begin{cases}Q/L_k,&amp; 第k只蚂蚁从城市i访问城市j \\ 0, &amp; 其它\end{cases}\]</span></p><table><colgroup><col style="width: 9%" /><col style="width: 33%" /><col style="width: 56%" /></colgroup><thead><tr class="header"><th></th><th style="text-align: center;">定义</th><th style="text-align: center;">参数影响分析</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\alpha\)</span></td><td style="text-align: center;">信息启发式因子</td><td style="text-align: center;"><spanclass="math inline">\(\alpha\)</span>值越大，蚂蚁选择之前走过的路径可能性就越大，搜索路径的随机性减弱，<spanclass="math inline">\(\alpha\)</span>越小，蚁群搜索范围就会减少，容易陷入局部最优</td></tr><tr class="even"><td><span class="math inline">\(\beta\)</span></td><td style="text-align: center;">期望启发式因子</td><td style="text-align: center;"><spanclass="math inline">\(\beta\)</span>值越大，蚁群越容易选择局部较短路径，这时算法的收敛速度是加快了，但是随机性却不高，容易得到局部最优解</td></tr><tr class="odd"><td><span class="math inline">\(m\)</span></td><td style="text-align: center;">蚁群数量</td><td style="text-align: center;"><spanclass="math inline">\(m\)</span>数目越多，得到的最优解就越精确，但是会产生不少重复解，随着算法接近最优解的收敛，信息正反馈作用降低，大量的重复工作，消耗了资源，增加了时间复杂度</td></tr><tr class="even"><td><span class="math inline">\(\rho\)</span></td><td style="text-align: center;">信息挥发因子，<spanclass="math inline">\(1-\rho\)</span>表示残留因子</td><td style="text-align: center;"><spanclass="math inline">\(\rho\)</span>过小时，在各路径上残留的信息素过多，导致无效的路径继续被搜索，影响到算法的收敛速率；<spanclass="math inline">\(\rho\)</span>过大，无效的路径虽然可以被排除搜索，但是不能保证有效的路径也会被搜索，影响到最优值的搜索。</td></tr></tbody></table><p>蚁群算法中主要参数的理想选择如下：</p><table><thead><tr class="header"><th style="text-align: center;">参数</th><th style="text-align: center;">取值范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\alpha\)</span></td><td style="text-align: center;"><spanclass="math inline">\([0,5]\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(\beta\)</span></td><td style="text-align: center;"><spanclass="math inline">\([0,5]\)</span></td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(Q\)</span></td><td style="text-align: center;"><span class="math inline">\([10,10000]\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(\rho\)</span></td><td style="text-align: center;"><spanclass="math inline">\([0.1,0.99]\)</span></td></tr></tbody></table><hr /><p><strong>流程图</strong>：</p><p><img src="/img/PathPlaning/aca.png" /></p><h2 id="文献">文献</h2><h3 id="蚁群算法中参数-αβ-ρ设置的研究-以-tsp-问题为例">1.蚁群算法中参数α、β 、ρ设置的研究 ———以 TSP 问题为例</h3><p>蚁群算法在TSP问题应用中取得了良好的效果，但也存在一些不足：</p><ul><li>如果参数<span class="math inline">\(\alpha 、\beta、\rho\)</span>设置不当，导致求解速度很慢且所得的解质量特别差；</li><li>基本蚁群算法计算量大，求解所需要的时间较长；</li><li>基本蚁群算法中理论上要求所有的蚂蚁选择同一路线，该线路即为所求的最优线路；但在实际计算中，在给定一定循环次数的条件下很难实现这种情况。</li><li>另一方面，在其他实际应用中，如图像处理中寻求最优模板问题，并不要求所有的蚂蚁都能找到最优的模板，而只需要一只找到即可。</li></ul><p><span class="math inline">\((t+n)\)</span>时刻在<spanclass="math inline">\(ij\)</span>路径上的信息素浓度为：</p><p>​ <spanclass="math display">\[\tau_{ij}(t+n)=(1-\rho)\tau_{ij}(t)+\Delta\tau_{ij}(t+n)\]</span></p><p><span class="math inline">\(\Delta\tau_{ij}\)</span>表示蚂蚁<spanclass="math inline">\(k\)</span>在时间段<spanclass="math inline">\(t\)</span>到<spanclass="math inline">\((t+n)\)</span>的过程中，在<spanclass="math inline">\(i\)</span>到<spanclass="math inline">\(j\)</span>的路径上留下的残留信息浓度。根据信息素更新策略的不同，有3种不同的蚁群算法模型：</p><ol type="1"><li><p>ant-quantity模型</p><p><spanclass="math display">\[\Delta\tau_{ij}(t,t+1)=\begin{cases}\dfrac{Q_1}{d_{ij}}，&amp;如果蚂蚁k经过ij \\ 0， &amp;如果蚂蚁k不经过ij\end{cases}\]</span></p><p>式中，<spanclass="math inline">\(Q_1\)</span>是常量，信息素的增量与<spanclass="math inline">\(ij\)</span>之间的距离有关。</p></li><li><p>ant-density模型</p><p><spanclass="math display">\[\Delta\tau_(t,t+1)=\begin{cases}Q_2，&amp;如果蚂蚁k经过ij\\ 0，&amp; 如果蚂蚁k不经过ij \end{cases}\]</span></p><p>式中，<spanclass="math inline">\(Q_2\)</span>是常量，则信息素增加一个固定值，与<spanclass="math inline">\(ij\)</span>之间的距离无关</p></li><li><p>ant-cycle模型</p><p><spanclass="math display">\[\Delta\tau_{ij}(t,t+1)=\begin{cases}Q_3/L^k，&amp;如果蚂蚁k在巡回中经过ij\\ 0，&amp;如果蚂蚁k在巡回中不经过ij \end{cases}\]</span></p><p>式中，<span class="math inline">\(Q_3\)</span>是常量；<spanclass="math inline">\(L^k\)</span>表示第<spanclass="math inline">\(k\)</span>只蚂蚁的循环路线，即如果蚂蚁经过<spanclass="math inline">\(ij\)</span>，则信息素增量为一个常量除以蚂蚁<spanclass="math inline">\(k\)</span>的巡回路线长。这里，信息素增量只与蚂蚁的巡回路线和<spanclass="math inline">\(Q_3\)</span>有关系，而和具体的<spanclass="math inline">\(d_{ij}\)</span>无关。</p></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-comment"># 参数</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Alpha:信息启发因子，值越大，则蚂蚁选择之前走过的路径可能性就越大，值越小，则蚁群搜索范围就会减少，容易陷入局部最优</span><br><span class="hljs-string">Beta:值越大，蚁群就越容易选择局部最短路径，这时算法收敛速度加快，但是随机性不高，容易得到局部的相对最优</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>(Alpha, Beta, Rho, Q) = (<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">100.0</span>)<br><span class="hljs-comment"># 城市数，蚁群</span><br>(city_num, ant_num) = (<span class="hljs-number">50</span>, <span class="hljs-number">50</span>)<br>distance_x = [<br>    <span class="hljs-number">178</span>,<span class="hljs-number">272</span>,<span class="hljs-number">176</span>,<span class="hljs-number">171</span>,<span class="hljs-number">650</span>,<span class="hljs-number">499</span>,<span class="hljs-number">267</span>,<span class="hljs-number">703</span>,<span class="hljs-number">408</span>,<span class="hljs-number">437</span>,<span class="hljs-number">491</span>,<span class="hljs-number">74</span>,<span class="hljs-number">532</span>,<br>    <span class="hljs-number">416</span>,<span class="hljs-number">626</span>,<span class="hljs-number">42</span>,<span class="hljs-number">271</span>,<span class="hljs-number">359</span>,<span class="hljs-number">163</span>,<span class="hljs-number">508</span>,<span class="hljs-number">229</span>,<span class="hljs-number">576</span>,<span class="hljs-number">147</span>,<span class="hljs-number">560</span>,<span class="hljs-number">35</span>,<span class="hljs-number">714</span>,<br>    <span class="hljs-number">757</span>,<span class="hljs-number">517</span>,<span class="hljs-number">64</span>,<span class="hljs-number">314</span>,<span class="hljs-number">675</span>,<span class="hljs-number">690</span>,<span class="hljs-number">391</span>,<span class="hljs-number">628</span>,<span class="hljs-number">87</span>,<span class="hljs-number">240</span>,<span class="hljs-number">705</span>,<span class="hljs-number">699</span>,<span class="hljs-number">258</span>,<br>    <span class="hljs-number">428</span>,<span class="hljs-number">614</span>,<span class="hljs-number">36</span>,<span class="hljs-number">360</span>,<span class="hljs-number">482</span>,<span class="hljs-number">666</span>,<span class="hljs-number">597</span>,<span class="hljs-number">209</span>,<span class="hljs-number">201</span>,<span class="hljs-number">492</span>,<span class="hljs-number">294</span>]<br>distance_y = [<br>    <span class="hljs-number">170</span>,<span class="hljs-number">395</span>,<span class="hljs-number">198</span>,<span class="hljs-number">151</span>,<span class="hljs-number">242</span>,<span class="hljs-number">556</span>,<span class="hljs-number">57</span>,<span class="hljs-number">401</span>,<span class="hljs-number">305</span>,<span class="hljs-number">421</span>,<span class="hljs-number">267</span>,<span class="hljs-number">105</span>,<span class="hljs-number">525</span>,<br>    <span class="hljs-number">381</span>,<span class="hljs-number">244</span>,<span class="hljs-number">330</span>,<span class="hljs-number">395</span>,<span class="hljs-number">169</span>,<span class="hljs-number">141</span>,<span class="hljs-number">380</span>,<span class="hljs-number">153</span>,<span class="hljs-number">442</span>,<span class="hljs-number">528</span>,<span class="hljs-number">329</span>,<span class="hljs-number">232</span>,<span class="hljs-number">48</span>,<br>    <span class="hljs-number">498</span>,<span class="hljs-number">265</span>,<span class="hljs-number">343</span>,<span class="hljs-number">120</span>,<span class="hljs-number">165</span>,<span class="hljs-number">50</span>,<span class="hljs-number">433</span>,<span class="hljs-number">63</span>,<span class="hljs-number">491</span>,<span class="hljs-number">275</span>,<span class="hljs-number">348</span>,<span class="hljs-number">222</span>,<span class="hljs-number">288</span>,<br>    <span class="hljs-number">490</span>,<span class="hljs-number">213</span>,<span class="hljs-number">524</span>,<span class="hljs-number">244</span>,<span class="hljs-number">114</span>,<span class="hljs-number">104</span>,<span class="hljs-number">552</span>,<span class="hljs-number">70</span>,<span class="hljs-number">425</span>,<span class="hljs-number">227</span>,<span class="hljs-number">331</span>]<br><br><span class="hljs-comment"># 城市距离和信息素</span><br>distance_graph = [[<span class="hljs-number">0.0</span> <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(city_num)] <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(city_num)]<br>pheromone_graph = [[<span class="hljs-number">1.0</span> <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(city_num)] <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(city_num)]<br><br><br><span class="hljs-comment">#----------蚂蚁-----------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ant</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span>  <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ID</span>):<br>        self.ID = ID                    <span class="hljs-comment"># ID</span><br>        self.__clean_data()             <span class="hljs-comment"># 随机初始化出生点</span><br></code></pre></td></tr></table></figure><h1id="全局路径规划算法动态规划算法">4.全局路径规划算法——动态规划算法</h1><h2 id="算法简介-2">算法简介</h2><ul><li>动态规划是运筹学的一个分支，是求解<strong>多阶段决策过程</strong>最优化问题的数学方法。</li><li>各个阶段决策的选取不是任意确定的，它依赖于<strong>当前面临的状态</strong>，又<strong>影响以后的发展</strong>。当各个阶段的决策确定以后，就组成一个<strong>决策序列</strong>，因而也就决定了整个过程的一条活动路线，这样的一个前后关联具有链状结构的多阶段过程就称为多阶段决策问题。</li><li>动态规划在车辆工程技术领域有着广泛的应用，如“<strong>两档变速器的最优换挡规律</strong>”、“<strong>混合动力汽车最优能量管理策略</strong>”、“<strong>栅格地图最优路径搜索</strong>”等。</li></ul><p>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。动态规划算法的基本思想与分治法类似，也是将待求解问题分解为若干子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，最后一个子问题就是初始问题的解。</p><h2 id="算法思想-2">算法思想</h2><ul><li>美国数学家Bellman等人在20世纪50年代初提出了著名的最优化原理，把多阶段决策问题转化为<strong>一系列单阶段最优化</strong>问题。</li><li>对最佳路径（最佳决策过程）所经过的各个阶段，其中每各阶段起始点到全过程终点的路径，必定是该阶段起始点到全过程终点的一切可能路径中的最佳路径（最优决策），这就是Bellman提出的著名的最优化原理。</li><li>简言之，<strong>一个最优决策的子决策必然是最优的</strong>。</li></ul><p><img src="/img/PathPlaning/多阶段决策过程示意图.png" /></p><h2 id="算法精讲-2">算法精讲</h2><ul><li>逆向寻优，正向求解</li><li>DP算法本质由三层循环构成</li><li>第一层遍历每一个阶段；</li><li>第二层遍历第i个阶段的每个状态；</li><li>第三层循环遍历第i+1个阶段的每一个状态。</li></ul><p><img src="/img/PathPlaning/多阶段决策过程示意图2.png" /></p><hr /><p>第四阶段 (D-&gt;E): D有两条路线到终点E。</p><p><span class="math display">\[f_4(D_1)=5, f_4(D_2)=2\]</span></p><hr /><p>第三阶段(C-&gt;D): C到D有6条路线</p><p>第3阶段的C有3个状态值，分别讨论经过该状态值的最优路线</p><p><strong>经过C1</strong></p><p><spanclass="math display">\[f_3(C_1)=min\begin{Bmatrix}d(C_1,D_1)+f_4(D_1)\\d(C_1,D_2)+f_4(D_2)\end{Bmatrix}=min\begin{Bmatrix}3+5 \\ 9+2 \end{Bmatrix} =8\]</span></p><p>最短路线为<span class="math display">\[C_1 \rightarrow D_1\rightarrow E\]</span></p><p><strong>经过C2</strong></p><p><span class="math display">\[f_3(C_2)=min \begin{Bmatrix}d(C_2,D_1)+f_4(D_1) \\ d(C_2,D_2)+f_4(D_2) \end{Bmatrix} = min\begin{Bmatrix}6+5 \\ 5+2 \end{Bmatrix} = 7\]</span></p><p>最短路线为<span class="math display">\[C_2 \rightarrow D_2\rightarrow E\]</span></p><p><strong>经过C3</strong></p><p><span class="math display">\[f_3(C_3)=min \begin{Bmatrix}d(C_3,D_1) +f_4(D_1) \\ d(C_3, D_2)+f_4(D_2) \end{Bmatrix} = min\begin{Bmatrix}8+5  \\ 10+2 \end{Bmatrix}=12\]</span></p><p>最短路线为<span class="math display">\[C_3 \rightarrow D_2\rightarrow E\]</span></p><hr /><p>第二阶段(B-&gt;C): B到C有9条路线。</p><p>第2阶段的B有3个状态值，分别讨论经过该状态值的最优路线</p><p><strong>经过B1</strong></p><p><span class="math display">\[f_2(B_1)=min \begin{Bmatrix}d(B_1, C_1)+ f_3(C_1) \\ d(B_1,C_2) + f_3(C_2) \\ d(B_1, C_3) + f_3(C_3)\end{Bmatrix} = min \begin{Bmatrix}12+8 \\ 14+7\\10+12 \end{Bmatrix} =20\]</span></p><p>最短路线为<span class="math display">\[B_1 \rightarrow C_1\rightarrow D_1 \rightarrow E\]</span></p><p><strong>经过B2</strong></p><p><span class="math display">\[f_2(B_2)=min \begin{Bmatrix}d(B_2, C_1)+ f_3(C_1) \\ d(B_2,C_2) + f_3(C_2) \\ d(B_2, C_3) + f_3(C_3)\end{Bmatrix} = min \begin{Bmatrix}6+8 \\ 10+7\\4+12 \end{Bmatrix} =14\]</span></p><p>最短路线为<span class="math display">\[B_2 \rightarrow C_1\rightarrow D_1 \rightarrow E\]</span></p><p><strong>经过C3</strong></p><p><span class="math display">\[f_2(B_3)=min \begin{Bmatrix}d(B_3, C_1)+ f_3(C_1) \\ d(B_3,C_2) + f_3(C_2) \\ d(B_3, C_3) + f_3(C_3)\end{Bmatrix} = min \begin{Bmatrix}13+8 \\ 12+7\\11+12 \end{Bmatrix} =19\]</span></p><p>最短路线为<span class="math display">\[B_3 \rightarrow C_2\rightarrow D_2 \rightarrow E\]</span></p><hr /><p>第一阶段(A-&gt;B)：A到B有3条路线</p><p><span class="math display">\[f_1(A)=min \begin{Bmatrix}d(A, B_1) +f_2(B_1) \\ d(A,B_2) + f_2(B_2) \\ d(A, B_3) + f_2(B_3) \end{Bmatrix} =min \begin{Bmatrix}2+20 \\ 5+14\\1+19 \end{Bmatrix} = 19\]</span></p><p>最短路线为<span class="math display">\[A \rightarrow B_2 \rightarrowC_1 \rightarrow D_1 \rightarrow E\]</span></p><h1 id="全局路径规划算法a算法">5.全局路径规划算法——A*算法</h1><h2 id="算法简介-3">算法简介</h2><ul><li>A*(A-Star)算法是一种静态路网求解最短路径最有效的直接搜索方法，也是解决许多搜索问题的有效算法，</li><li>广泛应用于室内机器人路径搜索、游戏动画路径搜索等。</li></ul><h2 id="算法思想-3">算法思想</h2><ul><li><p>A*算法结合了贪心算法（深度优先）和Dijkstra算法（广度优先），是一种启发是搜索算法。</p></li><li><p>路径优劣的评价公式为：<spanclass="math inline">\(\color{Red}f(n)=g(n) + h(n)\)</span></p></li><li><p><spanclass="math inline">\(f(n)\)</span>是从初始状态经由状态<spanclass="math inline">\(n\)</span>到目标状态的代价估计，</p><p><spanclass="math inline">\(g(n)\)</span>是在状态空间中从初始状态到状态<spanclass="math inline">\(n\)</span>的实际代价</p><p><span class="math inline">\(h(n)\)</span>是从状态<spanclass="math inline">\(n\)</span>到目标状态的最佳路径的估计代价</p></li><li><p>使用了两个状态表，分别称为<strong>openList表和closeList表</strong>。openList表由待考察的节点组成，closeList表由已经考察过节点组成。</p></li></ul><h2 id="算法精讲预处理">算法精讲——预处理</h2><ul><li>将地图栅格化，把每一个正方形格子的中央称为节点；</li><li>确定栅格属性，即每一个格子有两种状态：可走和不可走（体现障碍物）。</li><li>定义两个列表集合：openList和closeList。openList表由待考察的节点组成，closeList由已经考察的节点组成。类似Dijkstra算法的U集合和S集合。</li><li>确定起始节点和目标节点。</li></ul><p><img src="/img/PathPlaning/A-Star-1.png" /></p><p><img src="/img/PathPlaning/A-Star-2.png" /></p><p>初始时，定义A为父节点，节点A离自身的距离为0，路径完全确定，移入closeList中；</p><p>父节点周围共有8个节点，定义为子节点。将子节点放入openList中，成为待考察对象。</p><p>若某个节点既未在openList，也没在closeList中，则表明还有未搜索到该节点。</p><p>路径优劣的判断依据是移动代价，单步移动代价采取<font color='red'>Manhattan计算方式</font>，即把横向和纵向移动一个节点的定义为10。斜向移动代价参考等腰三角形计算斜边的方式，距离为14。</p><h2 id="算法精讲开始搜索">算法精讲——开始搜索</h2><ul><li>移动代价评价函数为：<spanclass="math inline">\(f(n)=g(n)+h(n)\)</span>。<spanclass="math inline">\(f(n)\)</span>是初始状态经由状态<spanclass="math inline">\(n\)</span>到目标状态的代价估计，<spanclass="math inline">\(g(n)\)</span>是在状态空间中从初始状态到状态<spanclass="math inline">\(n\)</span>的实际代价，<spanclass="math inline">\(h(n)\)</span>是从状态<spanclass="math inline">\(n\)</span>到目标状态的最佳路径的估计代价。<font color='red'>以节点<spanclass="math inline">\(I\)</span>为例。</font></li><li>首先考察<spanclass="math inline">\(g\)</span>，由于从A到该格子是斜向移动，单步移动距离为14，故<spanclass="math inline">\(g=14\)</span></li><li>在考察估计代价<spanclass="math inline">\(h\)</span>。估计的含义是忽略剩下的路径是否包含有障碍物（不可走），完全按照Manhattan计算方式，计算<font color='red'>只做横向或纵向移动</font>的累计代价：横向向右移动3步，纵向向上移动1步，总共4步，故为<spanclass="math inline">\(h=40\)</span>.</li><li>因此从A节点移动I节点的总移动代价为：<spanclass="math inline">\(f=54\)</span></li><li>以此类推，分别计算当前openList中余下的7个子节点的移动代价，挑选最小代价节点F，移动到closeList中。</li><li>现在<spanclass="math inline">\(openList=\{B,C,D,E,G,H,I\},closeList=\{A,F\}\)</span></li></ul><p><img src="/img/PathPlaning/A-Star-3.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Self-Driving</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pacman 文档</title>
    <link href="/2022/04/28/Linux/pacman/"/>
    <url>/2022/04/28/Linux/pacman/</url>
    
    <content type="html"><![CDATA[<h1 id="pacman---arch-linux-软件管理器">pacman - Arch Linux软件管理器</h1><h3 id="synopsis">SYNOPSIS</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">pacman &lt;operation&gt; [options] [targets]<br></code></pre></td></tr></table></figure><h3 id="description">DESCRIPTION</h3><p>Pacman 是一个包管理的使用程序，用于跟踪 Linux系统上以安装的包。它具有依赖性支持、软件包组、安装和卸载脚本，以及将本地机器与远程存储库同步以自动升级包的功能。Pacman包是 tar 压缩格式。</p><p>调用 pacman涉及到指定一个带有任何潜在选项(options)和目标(targets)的操作(operation)。目标通常是包名(packagename)、文件名(file name)、URL或搜索字符串(searchstring)。目标可以作为命令行参数提供。</p><h3 id="operations">OPERATIONS</h3><ul><li><p><strong>-D， --database</strong></p><p>对包数据库进行操作。通过该操作，可以修改 pacman数据库中已安装软件包的某些属性。检查数据库内部一致性。</p></li><li><p><strong>-Q，--query</strong></p><p>查询包数据库。该操作可以查看已安装的包及其文件，以及关于单个包的元信息。这可以针对本地包数据库运行，可以用于单个包文件。</p></li><li><p><strong>-R，--remove</strong></p><p>从系统中移除包。还可以指定要删除的组，在这种情况下，该组中的每个包都会被删除。属于指定包的文件将会被删除，数据库将会更新。</p></li><li><p><strong>-S，--sync</strong></p><p>同步包。包直接从远程仓库中安装，包括所需的所有依赖项。如果一个包名存在于多个仓库中，可以显示的指定仓库来确定需要安装的包。对于版本要求：<code>pacman -S "bash&gt;=3.2"</code>(需要使用双引号)。</p><p>除了包之外，还可以指定组(group)。例：如果 gnome是一个已定义的包组，那么 <code>pacman -S gnome</code>将提供一个提示，允许从编号列表中选择要安装的包。包的选择是使用空格和"/"或逗号的包号(packagenumbers)列表来指定的。可以用连字符(-)分隔第一个和最后一个包号来选择连续的包。排除包可以在数字或数字范围前加上插入符号(^)来实现。</p><p>提供其他包的包(Packages that provide otherpackages)也被处理。例：<code>pacman -S foo</code> 将首先查找一个 foo包。如果没有找到 foo，将搜索提供与 foo 相同功能的包。</p><p>可以使用 <code>pacman -Su</code> 来升级所有过时的软件包。</p></li><li><p><strong>-T --deptest</strong></p><p>检查依赖关系；这在 makepkg等脚本中用于检查已安装的包。该操作检查指定的每个依赖项，并返回系统当前不满足的依赖项列表。例：<code>pacman -T qt "bash&gt;=3.2"</code></p></li><li><p><strong>-U，--upgrade</strong></p><p>向系统升级或添加包，并从同步仓库中安装所需的依赖项。可以指定URL或文件路径。这是一个“删除尔后添加”的过程。</p></li><li><p><strong>-F，--files</strong></p><p>查询 files数据库。查找或显示属于某个包的文件。只有作为同步数据库一部分的包才会被搜索。</p></li><li><p><strong>-V，--version</strong></p><p>版本信息</p></li><li><p><strong>-h，--help</strong></p><p>显示给定操作的语法。如果没有提供操作，则显示一般语法。</p></li></ul><h3 id="options">OPTIONS</h3><ul><li><p><strong>-b，--dbpath</strong> <path></p><p>指定数据库的位置(默认：<code>/var/lib/pacman</code>)。<strong>注意</strong>：这必须是一个绝对路径。</p></li><li><p><strong>-r，--root</strong> <path></p><p>指定安装跟目录(默认：<code>/</code>)。这不能作为将软件安装到/usr/local而不是/usr的一种方式。</p></li><li><p><strong>-v，--verbose</strong></p><p>输出路径，如根目录(Root)，配置文件(Conf File)，DB路径(DBPath)，缓存目录(Cache Dirs)等。</p></li><li><p><strong>--arch</strong> <arch></p><p>指定架构(architecture)</p></li><li><p><strong>--cachedir</strong></p><dir><p>指定包的缓存目录(默认：<code>/var/cache/pacman/pkg</code>)。可以指定多个缓存目录，并按照传递给pacman的顺序依次尝试它们。<strong>注意</strong>：这必须是一个绝对路径。</p></li><li><p><strong>--color</strong> <when></p><p>指定何时启动着色。选项有 [always, never, auto]。</p></li><li><p><strong>--config</strong> <file></p><p>指定配置文件</p></li><li><p><strong>--debug</strong></p><p>显示调试消息。当报告错误时，建议使用此选项。</p></li><li><p><strong>--gpgdir</strong></p><dir><p>指定 GnuPG校验包签名的文件目录(默认：<code>/etc/pacman.d/gnupg</code>)。这个目录应该包含两个文件：pubring.gpg和 trustdb.gpg。<strong>注意</strong>：这必须是一个绝对路径。</p></li><li><p><strong>--hookdir</strong></p><dir><p>指定一个有钩子文件(hookfiles)的目录(默认：<code>/etc/pacman.d/hooks</code>)。可以指定多个钩子目录，使后面目录中的钩子优先于前面目录中的钩子。<strong>注意</strong>:这是一个绝对路径。</p></li><li><p><strong>--logfile</strong> <file></p><p>指定一个备用日志文件。这是一个绝对路径，与安装根目录设置无关。</p></li><li><p><strong>--noconfirm</strong></p><p>绕过任何“你确定吗?””消息。这样做不是一个好主意，除非你想从脚本运行pacman。</p></li><li><p><strong>--confirm</strong></p><p>取消先前的<code>—noconfirm</code>的影响。</p></li><li><p><strong>--disable-download-timeout</strong></p><p>在下载时禁用默认的低速限制和超时。如果你用代理和/或安全网关下载文件有问题，请使用这个。</p></li><li><p><strong>--sysroot</strong></p><dir><p>指定一个替代系统根(systemroot)。在运行Pacman之前，将chroot和chdir放入系统根目录。这允许正确地操作挂载的客户系统。给出的任何其他路径都将被解释为相对于系统根。需要root特权。</p></li></ul><h3 id="sync-options-apply-to--s">SYNC OPTIONS (APPLY TO -S)</h3><ul><li><p><strong>-c，--clean</strong></p><p>从缓存和当前未使用的同步数据库中删除不再安装的包，以释放磁盘空间。当pacman 下载软件包时，它会把它们保存在一个缓存目录中。<code>-c</code>仅删除那些不再被安装的包，<code>-cc</code>会删除缓存中的所有文件。</p></li><li><p><strong>-g，--groups</strong></p><p>显示每个指定包组的所有成员。如果没有提供组名，将列出所有组；传递标志两次(<code>-gg</code>)以查看所有组及其成员。</p></li><li><p><strong>-i，--info</strong></p><p>显示给定同步数据库包的信息。<code>-ii</code>将显示所有依赖于此包的存储库中的那些包。</p></li><li><p><strong>-l，--list</strong></p><p>列出指定仓库中的所有包。可以在命令行上指定多个仓库。</p></li><li><p><strong>-q，--quiet</strong></p><p>为某些同步操作显示较少的信息。当在脚本中处理 pacman的输出时，这很有用。搜索将只显示包名，而不显示仓库、版本、组和描述信息；List将只显示包名，而忽略数据库和版本;组将只显示包名而忽略组名。</p></li><li><p><strong>-s，--search</strong> <regexp></p><p>这将搜索同步数据库中的每个包，以查找匹配regexp的名称或描述。当您包含多个搜索条件时，只有描述匹配所有这些条件的包将被返回。</p></li><li><p><strong>-u，--sysupgrade</strong></p><p>升级所有过期的软件包。如果有新的包存在，将检查和升级当前安装的每个包。所有要升级的包将会显示一个报告，没有用户的确认操作将不会进行。依赖关系将在此级别自动解决，并将在必要时进行安装/升级。</p></li><li><p><strong>-y，--refresh</strong></p><p>从 pacman.conf(<code>/etc/pacman.conf</code>)中定义的服务器下载一个新的主包数据库副本。这通常应该在每次使用<code>-u</code> 时使用。<code>-yy</code>将强制刷新所有包数据库，即使它们看起来是最新的。</p></li></ul><h3 id="remove-options-apply-to--r">REMOVE OPTIONS (APPLY TO -R)</h3><ul><li><p><strong>-c，--cascade</strong></p><p>删除所有目标包，以及依赖于一个或多个目标包的所有包。这个操作是递归的，必须小心使用，因为它可能会删除许多可能需要的包。</p></li><li><p><strong>-n，--nosave</strong></p><p>指示 pacman忽略文件备份指定。通常，当从系统中删除一个文件时，数据库会检查该文件是否应该以.pacsave 扩展名重命名。</p></li><li><p><strong>-s，--recursive</strong></p><p>删除指定的每个目标，包括它们的所有依赖项，前提是(A)其他包不需要它们;(B)它们不是由用户明确安装的。如果要忽略条件(B)，则传递此选项两次(<code>-ss</code>)。</p></li><li><p><strong>-u，--unneeded</strong></p><p>删除任何其他包不需要的目标。这在不使用 <code>-c</code>选项删除组时非常有用，以避免破坏任何依赖关系。</p></li></ul><hr /><h3 id="examples">EXAMPLES</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Ss ne.hack<br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索仓库中符合正则表达式<span class="hljs-string">&quot;ne.hack&quot;</span>的包</span><br>pacman -S gpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载并安装gpm，包括依赖项。</span><br>pacman -U /home/user/ceofhack-0.6-1-x86_64.pkg.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从本地文件安装<span class="hljs-string">&quot;ceofhack-0.6-1&quot;</span>软件包。</span><br>pacman -Syu<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新包列表并升级所有包。</span><br>pacman -Syu gpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新包列表，升级所有的包，然后安装gpm(如果还没有安装的话)。</span><br></code></pre></td></tr></table></figure><hr /><p>官方帮助文档：<ahref="https://man.archlinux.org/man/pacman.8">pacman</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2022/04/25/Linux/Docker/"/>
    <url>/2022/04/25/Linux/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker">Docker</h1><ul><li><a href="https://www.docker.com/get-started">官方文档地址</a></li><li><ahref="https://docker_practice.gitee.io/zh-cn">中文参考手册</a></li></ul><hr /><h2 id="什么是docker">1.什么是Docker</h2><h3 id="官方定义">1.1 官方定义</h3><blockquote><blockquote><p>官方介绍</p></blockquote><ul><li>We have a vomplete container solution for you - no matter who youare where you are on your containeriztion jouery.</li><li>翻译：我们为你提供一个完整的容器解决方案，不管你是谁，无论你在哪，你都可以可是容器的旅程。</li><li>官方定义：docker 是一个容器技术</li></ul></blockquote><h3 id="docker-的起源">1.2 Docker 的起源</h3><blockquote><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes在法国期间发起的一个公司内部项目，它是基于dotCloud公司多年云服务技术的一次革新，并于 2013年 3月以Apache 2.0授权协议开源，主要项目代码在 Github 上进行维护。Docker 项目后来还加入Linux 基金会，并成功推动 开放容器联盟(OCI)。</p><p>Docker 自开源后受到了广泛的关注和讨论，至今其 Github 项目已经超过 5万7千个星标和一万多个 fork。甚至由于Docker 项目火爆，在 2013年底，dotCloud 公司决定改名为 Docker。 Docker 最初是在 Ubuntu 12.04上开发实现的；Red Hat 则从 RHEL.6.5 开始对 Docker 进行支持；Google也在其 PaaS 产品中广泛应用 Docker。</p><p>Docer 使用 Google 公司推出的 Go 语言进行开发实现，基于 Linux 内核的cgroup， namespace，以及 OverlayFS类等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p></blockquote><h2 id="为什么是docker">2. 为什么是Docker</h2><ul><li><p><code>在开发的时候，在本机测试环境可以跑，生成环境跑不起来</code></p><p>这里我们拿 java Web 应用程序举例，我们一个 java Web应用程序涉及的东西很多，比如jdk、tomcat、mysql等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序以及使用的软件环境直接打包在一起，无论在哪个机器上都保证了环境一致。</p><p><strong>优势1：一致的运行环境，更轻松的迁移</strong></p></li><li><p><code>服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己的程序因为内存不够就挂了</code></p><p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人的程序不会影响到自己的程序。</p><p><strong>优势2：对进程进行封装隔离，容器与容器之间互不影响，更高效的利用系统资源</strong></p></li><li><p><code>公司要弄一个活动，可能会有大量的流量进来，公司需要部署几十台服务器</code></p><p>在没有 Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题。用Docker的话，只需要将程序打包到镜像，需要多少台服务器，就跑多少容器，极大地提高了部署效率。</p><p><strong>优势3：通过镜像复制N多个环境一致的容器</strong></p></li></ul><h2 id="docker-和虚拟机的区别">3. Docker 和虚拟机的区别</h2><figure><img src="/img/docker/Docker.png" alt="Docker" /><figcaption aria-hidden="true">Docker</figcaption></figure><p>虚拟机是携带操作系统的，本身很小的应用却因为携带了操作系统而变得非常大，很笨重。Docker是不携带操作系统的，所以 Docker的应用就非常的轻巧。另外，在调用宿主机的CPU、磁盘等等资源的时候，拿内存举例，虚拟机时利用Hypervisor 去虚拟化内存，整个调用过程时虚拟内存 -&gt; 虚拟物理内存 -&gt;真正物理内存，但是 Docker 是利用Docker Engine去调用宿主机的资源，这个过程是 虚拟内存 -&gt; 真正物理内存。</p><table><colgroup><col style="width: 15%" /><col style="width: 42%" /><col style="width: 41%" /></colgroup><thead><tr class="header"><th></th><th>传统虚拟机</th><th>Docker 容器</th></tr></thead><tbody><tr class="odd"><td>磁盘占用</td><td>几个GB到几十个GB</td><td>几十MB到几百MB</td></tr><tr class="even"><td>CPU　内存占用</td><td>虚拟操作系统非常占用CPU和内存</td><td>Docker 引擎占用极低</td></tr><tr class="odd"><td>启动速度</td><td>几分钟</td><td>几秒</td></tr><tr class="even"><td>安装管理</td><td>需要专门的运维技术</td><td>安装、管理方便</td></tr><tr class="odd"><td>应用部署</td><td>每次部署都费时费力</td><td>从第二次部署开始轻松简洁</td></tr><tr class="even"><td>耦合性</td><td>多个应用服务安装到一起，容易相互影响</td><td>每个应用服务一个容器，达到隔离</td></tr><tr class="odd"><td>系统依赖</td><td>无</td><td>需求相同或相似的内核，目前推荐Linux</td></tr></tbody></table><h2 id="docker-的安装">4. Docker 的安装</h2><h3 id="安装-dockercentos-7.x">4.1 安装 docker(centos 7.x)</h3><ul><li><p>卸载原始 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum remove docker \</span><br><span class="language-bash">  docker-client \</span><br><span class="language-bash">  docker-client-latest \</span><br><span class="language-bash">  docker-common \</span><br><span class="language-bash">  docker-latest \</span><br><span class="language-bash">  docker-latest-logrotate \</span><br><span class="language-bash">  docker-logrotate \</span><br><span class="language-bash">  docker-engine</span><br></code></pre></td></tr></table></figure></li><li><p>安装 docker 依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install -y yum-utils \</span><br><span class="language-bash">  device-mapper-persistent-data \</span><br><span class="language-bash">  lvm2</span><br></code></pre></td></tr></table></figure></li><li><p>设置 docker 的 yum 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span><br><span class="language-bash">--add-repo \</span><br><span class="language-bash">https://download.docker.com/linux/centos/docker-ce.repo</span><br></code></pre></td></tr></table></figure></li><li><p>安装最新版的 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install docker-ce docker-cecli containerd.io</span><br></code></pre></td></tr></table></figure></li><li><p>指定版本安装 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install docker-ce --showduplicates | <span class="hljs-built_in">sort</span> -r</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install docker-ce-18.09.5-3.e17 docker-ce-cli-18.09.5-3.e17 containerd.io</span><br></code></pre></td></tr></table></figure></li><li><p>启动 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start docker</span><br></code></pre></td></tr></table></figure></li><li><p>关闭 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl stop docker</span><br></code></pre></td></tr></table></figure></li><li><p>测试 docker 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker run hello-world</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="bash-安装通用所有平台">4.2 bash 安装(通用所有平台)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo sh get-docker.sh --mirror Aliyun</span><br></code></pre></td></tr></table></figure><ul><li><p>启动 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start doecker</span><br></code></pre></td></tr></table></figure></li><li><p>创建 docker 用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo groupadd docker</span><br></code></pre></td></tr></table></figure></li><li><p>当前的用户加入 docker 组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span></span><br></code></pre></td></tr></table></figure></li><li><p>测试 docker 安装是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run hello-world</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="docker-的核心架构">5. Docker 的核心架构</h2><ol type="1"><li><p>镜像 image 复数 images</p><p>定义：一个镜像代表着一个软件 如：MySQL镜像 redis镜像nginx镜像····</p></li><li><p>容器 container</p><p>定义：基于某个镜像运行一次就会生成一个程序实例，一个实例称之为一个容器</p><p>特点：可读、可写</p></li><li><p>仓库 repository</p><p>定义：用来存储 docker 中的所有镜像</p><p>远程仓库：docker 官方维护的一个唯一的远程仓库</p><p>本地仓库：当前机器的镜像存储位置</p></li></ol><figure><img src="/img/docker/dockerKernel.jpg" alt="dockerKernel" /><figcaption aria-hidden="true">dockerKernel</figcaption></figure><h2 id="镜像的相关操作">6. 镜像的相关操作</h2><h3 id="辅助命令">6.1 辅助命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 安装完成辅助命令</span><br><span class="hljs-code">docker version---------------------查看 docker 的信息</span><br><span class="hljs-code">docker info---------------------查看更详细的信息</span><br><span class="hljs-code">docker --help ---------------------帮助命令</span><br></code></pre></td></tr></table></figure><h3 id="images-镜像命令">6.2 Images 镜像命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 查看本机中所有镜像</span><br><span class="hljs-code">docker images------------------------列出本地所有镜像</span><br><span class="hljs-code">-a列出所有镜像</span><br><span class="hljs-code">-q只显示镜像 id</span><br><span class="hljs-code"># 2. 搜素镜像</span><br><span class="hljs-code">docker search [options] 镜像名 -----------去 dockerhub 上查询当前镜像</span><br><span class="hljs-code">-s指定值列出收藏数不少于指定值的镜像</span><br><span class="hljs-code">--no-trunc  显示完整的镜像信息</span><br><span class="hljs-code"># 3. 从仓库下载镜像</span><br><span class="hljs-code">docker pull 镜像名[:TAG|@DIGEST] ----------下载镜像</span><br><span class="hljs-code"># 4. 删除镜像</span><br><span class="hljs-code">docker rmi 镜像名  ----------------------- 删除镜像</span><br><span class="hljs-code">-f强制删除</span><br><span class="hljs-code"># 5. 载入镜像</span><br><span class="hljs-code">docker load -i xxx.tar</span><br></code></pre></td></tr></table></figure><h3 id="contrainer-容器命令">6.3 Contrainer 容器命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 运行容器</span><br><span class="hljs-code">docker run 镜像名---------------镜像名新建并启动容器</span><br><span class="hljs-code">--name为容器起一个名字</span><br><span class="hljs-code">-d启动守护容器（在后台启动容器）</span><br><span class="hljs-code">-p映射端口号：原始端口号指定端口号启动</span><br><span class="hljs-code"># 2. 查看运行的容器</span><br><span class="hljs-code">docker ps---------------------列出所有正在运行的容器</span><br><span class="hljs-code">-a正在运行的和历史运行的容器</span><br><span class="hljs-code">-q静默模式，只显示容器编号</span><br><span class="hljs-code"># 3. 停止|关闭|重启容器</span><br><span class="hljs-code">docker start 容器名称或容器ID---------- 开启容器</span><br><span class="hljs-code">docker restart 容器名或容器ID----------- 重启容器</span><br><span class="hljs-code">docker stop 容器名或容器ID----------- 正常停止容器</span><br><span class="hljs-code">docker kill 容器名或容器ID----------- 立即停止容器运行</span><br><span class="hljs-code"># 4. 删除容器</span><br><span class="hljs-code">docker rm 容器名称|容器ID----------- 删除停止的容器</span><br><span class="hljs-code">-f删除正在运行的容器</span><br><span class="hljs-code"># 5. 查看容器内进程</span><br><span class="hljs-code">docker top容器名称|容器ID----------- 查看容器内进程</span><br><span class="hljs-code"># 6. 查看容器内部细节</span><br><span class="hljs-code">docker inspect容器名称|容器ID----------- 查看容器内部细节</span><br><span class="hljs-code"># 7. 查看运行日志</span><br><span class="hljs-code">docker logs [OPTIONS] 容器名称|容器ID----------- 查看容器内进程</span><br><span class="hljs-code">-t加入时间戳</span><br><span class="hljs-code">-f跟随最新的日志打印</span><br><span class="hljs-code">--tail数字显示最后多少条</span><br><span class="hljs-code"># 8. 进入容器</span><br><span class="hljs-code">docker exec -it容器名称|容器ID bash--------- 进入容器bash，与容器交互</span><br><span class="hljs-code">退出容器exit</span><br><span class="hljs-code"># 9. 操作系统与容器的文件传输</span><br><span class="hljs-code">从容器到操作系统：docker cp 容器ID:容器内资源路径 操作系统路径</span><br><span class="hljs-code">从操作系统到容器：docker cp 文件|目录容器ID：容器路径</span><br><span class="hljs-code"># 10. 数据卷(volum)实现与宿主机共享目录</span><br><span class="hljs-code">docker run -v 宿主机的路径|任意别名:/容器内的路径镜像名</span><br><span class="hljs-code">docker run -v 宿主机的路径|任意别名:/容器内的路径:ro镜像名</span><br><span class="hljs-code">ro：镜像只读</span><br><span class="hljs-code">注意：</span><br><span class="hljs-code">1. 如果是宿主机类路径必须是绝对路径，宿主机目录会覆盖容器内目录内容</span><br><span class="hljs-code">2. 如果是别名则会在docker运行容器时自动在宿主机中创建一个目录，并将容器目录文件复制到宿主机中</span><br><span class="hljs-code"># 11. 打包镜像</span><br><span class="hljs-code">docker save 镜像名-o 名称.tar</span><br><span class="hljs-code"># 12. 载入镜像</span><br><span class="hljs-code">docker load -i 名称.tar</span><br><span class="hljs-code"># 13. 容器打包成新的镜像</span><br><span class="hljs-code">docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot;（容器ID或名称） 打包的镜像的名称：标签</span><br></code></pre></td></tr></table></figure><h2 id="dokcer-中容器之间的网络配置">7. Dokcer 中容器之间的网络配置</h2><blockquote><p>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务</p></blockquote><h3 id="docker-容器与操作系统通信机制">7.1 docker容器与操作系统通信机制</h3><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code>虚拟网桥，实际上是 Linux 的一个bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <ahref="https://datatracker.ietf.org/doc/html/rfc1918">RFC1918</a>中定义）中的一个地址给<code>docker0</code> 接口。比如典型的 <code>172.17.0.1</code>，掩码为<code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><figure><img src="/img/docker/netDokcer0.PNG" alt="netDocker0" /><figcaption aria-hidden="true">netDocker0</figcaption></figure><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code>接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即<code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code>网桥，名称以 <code>veth</code> 开头（例如<code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker就创建了在主机和所有容器之间一个虚拟共享网络。</p><figure><img src="/img/docker/docker0.png" alt="docker0" /><figcaption aria-hidden="true">docker0</figcaption></figure><h3 id="docker-网络使用">7.2 Docker 网络使用</h3><p>注意：一般在使用 docker 网桥(bridge)实现容器与容器通信时，都是站在一个应用的角度进行容器通信。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 查看 docker 网桥配置</span><br><span class="hljs-code">docker network ls</span><br><span class="hljs-code"># 2. 自定义网桥</span><br><span class="hljs-code">docker network create -d bridge 网桥名称</span><br><span class="hljs-code"># 3. 指定容器网桥</span><br><span class="hljs-code">docker run --network 网桥名称 </span><br><span class="hljs-code">&gt; docker network [OPTION]</span><br><span class="hljs-code">     connect     Connect a container to a network</span><br><span class="hljs-code">     create      Create a network</span><br><span class="hljs-code">     disconnect  Disconnect a container from a network</span><br><span class="hljs-code">     inspect     Display detailed information on one or more networks</span><br><span class="hljs-code">     ls          List networks</span><br><span class="hljs-code">     prune       Remove all unused networks</span><br><span class="hljs-code">     rm          Remove one or more networks</span><br></code></pre></td></tr></table></figure><p>​</p><h2 id="数据卷">8. 数据卷</h2><p><strong>数据卷</strong>是一个可供一个或多个容器使用的特殊目录，它绕过UFS，可以提供很多有用的特性</p><ul><li><em>数据卷</em> 可以在容器之间共享和重用</li><li>对 <em>数据卷</em> 的修改会立马生效</li><li>对 <em>数据卷</em> 的更新，不会影响镜像</li><li><em>数据卷</em> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<em>数据卷</em> 的使用，类似于 Linux 下对目录或文件进行mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 自定义数据卷目录</span><br><span class="hljs-code">docker run -v 绝对路径:容器内路径</span><br><span class="hljs-code"># 2. 自动创建数据卷</span><br><span class="hljs-code">docker run -v 卷名：容器内路径</span><br></code></pre></td></tr></table></figure></p><h3 id="docker-操作数据卷命令">docker 操作数据卷命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. 查看数据卷</span><br><span class="hljs-code">docker volume ls</span><br><span class="hljs-code"># 2. 查看数据卷细节</span><br><span class="hljs-code">docker volume inspect 卷名</span><br><span class="hljs-code">&gt; docker volume [OPTION]</span><br><span class="hljs-code">     create      Create a volume</span><br><span class="hljs-code">     inspect     Display detailed information on one or more volumes</span><br><span class="hljs-code">     ls          List volumes</span><br><span class="hljs-code">     prune       Remove all unused local volumes</span><br><span class="hljs-code">     rm          Remove one or more volumes</span><br></code></pre></td></tr></table></figure><h2 id="dockerfile">9. Dockerfile</h2><h3 id="什么是-dockerfile">什么是 Dockerfile</h3><p>定义：用来帮助我们自己构建一个自定义镜像 Dockerfile 成为镜像构建文件描述文件</p><h3 id="dockerfile-的保留命令">Dockerfile 的保留命令</h3><p>官方说明(https://docs.docker.com/engine/reference/builder/)</p><table><colgroup><col style="width: 18%" /><col style="width: 81%" /></colgroup><thead><tr class="header"><th>保留字</th><th>作用</th></tr></thead><tbody><tr class="odd"><td><strong>FROM</strong></td><td><strong>当前镜像是基于哪个镜像的</strong></td></tr><tr class="even"><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr class="odd"><td><strong>RUN</strong></td><td><strong>构建镜像时需要运行的指令</strong></td></tr><tr class="even"><td><strong>EXPOSE</strong></td><td><strong>当前容器对外暴露的端口号</strong></td></tr><tr class="odd"><td><strong>WORKDIR</strong></td><td><strong>指定再创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr class="even"><td><strong>ENV</strong></td><td><strong>用来再构建镜像的过程中设置环境变量</strong></td></tr><tr class="odd"><td><strong>ADD</strong></td><td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr class="even"><td><strong>COPY</strong></td><td><strong>类似于 ADD，拷贝文件和目录到镜像中</strong><br/><strong>将从构建上下文目录中<原路径>的文件/目录复制到新的一层的镜像内的<目标路径>位置</strong></td></tr><tr class="odd"><td><strong>VOLUME</strong></td><td><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr class="even"><td><strong>CMD</strong></td><td><strong>指定一个容器启动时要运行的命令</strong><br/><strong>Dockerfile 中可以有多个CMD 指令，但只有最后一个生效， CMD会被 docker run 之后的参数替换</strong></td></tr><tr class="odd"><td><strong>ENTRYPOINT</strong></td><td><strong>指定一个容器启动时要运行的命令</strong><br/><strong>ENTRYPOINT 的目的和 CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table><h4 id="from-命令">FROM 命令</h4><ul><li><p>基于哪个镜像进行构建新的镜像，在构建时会自动从 docker hub 拉取base 镜像 必须作为 Dockerfile 的一个指令出现</p></li><li><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM &lt;image&gt;<br>FROM &lt;image&gt;[:&lt;tag&gt;]使用版本<br>FROM &lt;image&gt;[@&lt;digest&gt;]使用摘要<br></code></pre></td></tr></table></figure></li></ul><h4 id="run-命令">RUN 命令</h4><ul><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile 中下一步</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">RUN &lt;command&gt;<br>RUN echo hello<br>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;](exec form)<br>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]<br></code></pre></td></tr></table></figure></li></ul><h4 id="expose-命令">EXPOSE 命令</h4><ul><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">EXPOSE 80/tcp如果没有显示指定则默认暴露都是 tcp<br>EXPOSE 80/udp <br></code></pre></td></tr></table></figure></li></ul><h4 id="cmd-命令">CMD 命令</h4><ul><li><p>用来为启动的容器指定执行的命令，在 Dockerfile 中只能有一条 CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p></li><li><p>注意：<strong>Dockerfile 中只能有一条 CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]<br>CMD [&quot;param1&quot;, &quot;param2&quot;]<br>CMD command param1 param2 (shell form)<br></code></pre></td></tr></table></figure></li></ul><h4 id="workdir-命令">WORKDIR 命令</h4><ul><li><p>用来为 Dockerfile 中的任何 RUN、CMD、ENTRYPOINT、COPY 和 ADD指令设置工作目录。如果 WORKDIR 不存在，即使它没有在任何后续 Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">WORKDIR /path/to/workdir<br><br>WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br></code></pre></td></tr></table></figure></li></ul><h4 id="add-命令">ADD 命令</h4><ul><li><p>用来从 context 上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ADD hom* /mydir/ 通配符添加多个文件<br>ADD hom?.txt /mydir 通配符添加<br>ADD test.txt relativeDir/ 可以指定相对路径<br>ADD test.txt /absoluteDir/ 绝对路径<br>ADD url<br></code></pre></td></tr></table></figure></li></ul><h4 id="copy-命令">COPY 命令</h4><ul><li><p>用来将 context 目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">COPY src dest<br>COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]<br></code></pre></td></tr></table></figure></li></ul><h4 id="volume-命令">VOLUME 命令</h4><ul><li><p>用来定义容器运行时可以挂载到宿主机的目录</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">VOLUME [&quot;/data&quot;]<br></code></pre></td></tr></table></figure></li></ul><h4 id="env-命令">ENV 命令</h4><ul><li><p>用来为构建镜像设置环境变量。这个值将会出现在构建阶段中所有的后续指令的环境中。</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ENV &lt;key&gt; &lt;value&gt; <br>ENV &lt;key&gt; &lt;value&gt; ...<br></code></pre></td></tr></table></figure></li></ul><h4 id="entrypoint-命令">ENTRYPOINT 命令</h4><ul><li><p>用来指定容器启动时执行命令和 CMD 类似</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]<br>ENTRYPOINT command param1 param2<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/24/hello-world/"/>
    <url>/2022/04/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h3 id="武汉东湖">2021.11.28 武汉东湖</h3><p><img src="/img/about/donghu.jpg" /></p>]]></content>
    
  </entry>
  
  
  
</search>
