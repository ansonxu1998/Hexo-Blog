{"total":43,"pageSize":13,"pageCount":4,"data":[{"title":"无感 FOC-扩展卡尔曼滤波观测器","uid":"3c1e105762b23aa3751ddcfe95ca126f","slug":"Control/无感FOC-扩展卡尔曼滤波观测器","date":"2023-07-10T07:17:00.000Z","updated":"2023-08-23T07:33:09.063Z","comments":true,"path":"api/articles/Control/无感FOC-扩展卡尔曼滤波观测器.json","cover":"/img/bg/FOC.png","text":"电机状态方程 永磁同步电机在 坐标下的方程为： 其中 反电动势 为： 转速 和转子位置 的关系如下： 综上可得： 线性系统的状态观测器 确定状态观测器的状态变量为 卡尔曼观测器的输出矩阵 为： 故 矩阵为： 矩阵为： 将状态方程写成矩阵的形式： 由该系统是非线性系统，所以暂时无法...","link":"","photos":[],"count_time":{"symbolsCount":401,"symbolsTime":"1 mins."},"categories":[{"name":"自动控制","slug":"自动控制","count":2,"path":"api/categories/自动控制.json"}],"tags":[{"name":"FOC","slug":"FOC","count":1,"path":"api/tags/FOC.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"OBD2 协议","uid":"6196392442c97458b57996bc517db85e","slug":"Automotive-Electronic/OBD2","date":"2023-06-28T02:36:00.000Z","updated":"2023-06-28T07:33:13.506Z","comments":true,"path":"api/articles/Automotive-Electronic/OBD2.json","cover":"/img/OBD/OBD interface.svg","text":"Ref: OBD2 Explained - A Simple Intro [2023] OBD2 原始数据帧 OBD2 消息由标识符和数据组成。数据由于 Mode、PID 和 数据字节(A,B,C,D)组成。 Identifier - OBD 消息的标识符是标准的 11 位的，用...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"汽车电子","slug":"汽车电子","count":1,"path":"api/categories/汽车电子.json"}],"tags":[{"name":"汽车诊断协议","slug":"汽车诊断协议","count":1,"path":"api/tags/汽车诊断协议.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"网络管理工具 NetworkManager","uid":"80d29f01d39b07c6bd5a27520f206740","slug":"Linux/NetworkManager","date":"2023-06-17T04:51:00.000Z","updated":"2023-06-17T12:59:22.674Z","comments":true,"path":"api/articles/Linux/NetworkManager.json","cover":"/img/bg/Linux.png","text":"NetworkManager 是一个系统网络服务，它可以管理网络设备和网络连接，在可用的情况下保持网络连接的通畅。它管理以太网、WiFi、移动宽带和PPPoE设备，同时还提供各种不同VPN服务的VPN集成。 默认情况下，Ubuntu Core 的网络管理由 systemd 的 n...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"Linux","slug":"Linux","count":5,"path":"api/categories/Linux.json"}],"tags":[{"name":"网络管理工具","slug":"网络管理工具","count":1,"path":"api/tags/网络管理工具.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"cron 计划任务","uid":"15a22b4df3f9daa5f948365cdbe57588","slug":"Linux/crond","date":"2023-06-16T15:07:00.000Z","updated":"2023-06-20T09:41:08.416Z","comments":true,"path":"api/articles/Linux/crond.json","cover":"/img/bg/Linux.png","text":" 守护进程执行调度命令：安排任务在特定时间自动运行 熟练的系统管理员知道何时以及如何以编程方式安排任务以特定的间隔执行，无论是重复执行还是执行一定次数。可以在许多场景中应用此技能，例如调度备份、定期收集系统日志或自动化基本和重复的任务 cron 使用一个守护进程（crond) 来...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Linux","slug":"Linux","count":5,"path":"api/categories/Linux.json"}],"tags":[{"name":"计划任务","slug":"计划任务","count":1,"path":"api/tags/计划任务.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"日志管理 journalctl","uid":"5de91de1b3c23479ddb38340c9771a7c","slug":"Linux/journalctl","date":"2023-06-16T08:46:00.000Z","updated":"2023-06-23T09:49:40.066Z","comments":true,"path":"api/articles/Linux/journalctl.json","cover":"/img/bg/Linux.png","text":"Journald 是 systemd 的守护进程，用于从各种日志源(如syslog)收集日志。Journalctl 是一个命令行工具，可以使用该命令行对日志进行管理和分析。通过 journalctl，可以读取日志，实时监控日志，根据时间，服务，严重程度和其他参数过滤日志。 Jou...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Linux","slug":"Linux","count":5,"path":"api/categories/Linux.json"}],"tags":[{"name":"日志管理","slug":"日志管理","count":1,"path":"api/tags/日志管理.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Simulink 编译动态链接库","uid":"72c8bb50db339fd6a5c5fe75ad80519f","slug":"Simulink/Simulink 编译动态链接库","date":"2023-06-05T13:20:00.000Z","updated":"2023-08-30T01:32:54.945Z","comments":true,"path":"api/articles/Simulink/Simulink 编译动态链接库.json","cover":"/img/bg/Simulink.png","text":"一、创建输入输出变量 将变量设置为全局变量： 右击信号线，选择 Properties Current &#x3D; Simulink.Signal; Current.CoderInfo.StorageClass &#x3D; &quot;ExportedGlobal&quot;;...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"Simulink","slug":"Simulink","count":1,"path":"api/categories/Simulink.json"}],"tags":[{"name":"代码生成","slug":"代码生成","count":1,"path":"api/tags/代码生成.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"FreeRTOS 的定时器 (Timer)","uid":"0de178335a5288a6c84f26e77dfbea47","slug":"FreeRTOS/Timer","date":"2023-05-07T09:24:00.000Z","updated":"2023-05-07T09:36:40.877Z","comments":true,"path":"api/articles/FreeRTOS/Timer.json","cover":"/img/FreeRTOS/logo.jpg","text":"软件定时器用于在将来一个设定的时间或以固定频率定期的执行函数。软件定时器所执行的函数被称为软件定时器的回调函数。 软件定时器由 FreeRTOS 内核实现，并受其控制。它不需要硬件支持，也与硬件定时器或硬件计数器无关。软件计时器不使用任何处理时间，除非软件计时器回调函数正在实际执...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":3,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"FreeRTOS","slug":"FreeRTOS","count":3,"path":"api/tags/FreeRTOS.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"FreeRTOS 的队列 (Queue)","uid":"b5bbb50a4ed24d8a8d9fcbeb2df5e6ea","slug":"FreeRTOS/Queue","date":"2023-05-05T12:57:00.000Z","updated":"2023-05-06T11:27:20.463Z","comments":true,"path":"api/articles/FreeRTOS/Queue.json","cover":"/img/FreeRTOS/logo.jpg","text":"队列提供一种任务到任务、任务到中断和中断到任务之间的通信机制。 队列的特点 数据存储 队列可保存有限数量的固定大小的数据项。一个队列可以容纳的最大数据量称为它的长度。在创建队列时需要指定每个数据项的长度和大小。队列通常使用先进先出(FIFO)缓冲区，数据在队列末尾被被写入并仓队列...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":3,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"FreeRTOS","slug":"FreeRTOS","count":3,"path":"api/tags/FreeRTOS.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"FreeRTOS 的任务 (Task)","uid":"01ed63026d9bc8723f828c17bac96fdf","slug":"FreeRTOS/Task","date":"2023-04-23T09:13:00.000Z","updated":"2023-05-06T11:23:21.557Z","comments":true,"path":"api/articles/FreeRTOS/Task.json","cover":"/img/FreeRTOS/logo.jpg","text":" FreeRTOS 是由 Real Time Engineers 公司独家拥有、开发和维护的。Real Time Engineers 公司已经与世界领先的芯片公司密切合作了十多年，为您提供屡获殊荣的商业级和完全免费的高质量软件。 FreeRTOS 非常适合使用微控制器或小型微处理...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":3,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"FreeRTOS","slug":"FreeRTOS","count":3,"path":"api/tags/FreeRTOS.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"链表 linked list","uid":"0d8865dd6f5b4fb80b5a9df16b916aeb","slug":"DSAA/链表","date":"2023-04-14T12:00:00.000Z","updated":"2023-04-15T02:49:14.057Z","comments":true,"path":"api/articles/DSAA/链表.json","cover":"/img/DSAA/linked list 1.png","text":"链表 linked list 什么是链表 链表是数据元素的线性集合，其顺序不是由它们在内存中的物理位置给出的。每个元素都指向下一个元素。它是一种数据结构，由一组节点组成，这些节点共同表示一个序列。在其最基本的形式中，每个节点都包含：数据和指向序列中下一个节点的指针（链接）。这种结...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"计算机","slug":"计算机","count":1,"path":"api/tags/计算机.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"CAN 总线协议","uid":"386d227c4f88ed4186d8b0b65da86630","slug":"Communication Protocol/CAN 总线","date":"2023-04-01T09:02:00.000Z","updated":"2023-05-05T08:19:03.253Z","comments":true,"path":"api/articles/Communication Protocol/CAN 总线.json","cover":"/img/CAN/CAN.jpg","text":"CAN 总线协议 Controller Area Network (CAN bus) 是一种车辆总线标准，允许为控制器和设备在没有主机的情况下与彼此的应用程序进行通信（没有主从关系）。它是一种基于消息的协议，最初设计用于汽车内的多路复用电线以节省铜线，但它也可以许多其他情况。对于...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"通信协议","slug":"通信协议","count":2,"path":"api/categories/通信协议.json"}],"tags":[{"name":"CAN 总线","slug":"CAN-总线","count":1,"path":"api/tags/CAN-总线.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"E96 系列电阻标称阻值","uid":"5446d073459d8b66ad572b884caef029","slug":"Electronic/E96系列电阻标称阻值","date":"2023-03-21T03:10:00.000Z","updated":"2023-04-15T04:54:49.027Z","comments":true,"path":"api/articles/Electronic/E96系列电阻标称阻值.json","cover":"/img/bg/bg2.jpg","text":"E96系列电阻标称阻值 ","link":"","photos":[],"count_time":{"symbolsCount":18,"symbolsTime":"1 mins."},"categories":[{"name":"电子技术","slug":"电子技术","count":3,"path":"api/categories/电子技术.json"}],"tags":[{"name":"阻值表","slug":"阻值表","count":1,"path":"api/tags/阻值表.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"STM32 定时器产生 PWM 波","uid":"f2d866e3599035768285c02ebfff1255","slug":"MCU/STM32-PWM","date":"2023-02-13T10:57:00.000Z","updated":"2023-05-05T08:04:28.293Z","comments":true,"path":"api/articles/MCU/STM32-PWM.json","cover":"/img/STM32-GPIO/STM32-logo.jpg","text":"STM32 定时器产生 PWM 波 对于 PWM 波来说最重要的两个参数就是频率和占空比。频率是周期的倒数，占空比是指脉宽时间占周期的比例。微控制器产生 PWM 波的原理是，定时器重复的从 0 计数到 ARR，设定比较值 CCRx。当定时器的计数值向上计数到与 CCRx 的值相等...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"单片机","slug":"单片机","count":4,"path":"api/categories/单片机.json"}],"tags":[{"name":"STM32","slug":"STM32","count":4,"path":"api/tags/STM32.json"},{"name":"PWM","slug":"PWM","count":2,"path":"api/tags/PWM.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}