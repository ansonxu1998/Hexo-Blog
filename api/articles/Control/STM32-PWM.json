{"title":"STM32 定时器产生 PWM 波","uid":"f2d866e3599035768285c02ebfff1255","slug":"Control/STM32-PWM","date":"2023-02-13T10:57:00.000Z","updated":"2023-02-13T11:17:12.680Z","comments":true,"path":"api/articles/Control/STM32-PWM.json","keywords":null,"cover":[],"content":"<h1 id=\"stm32-定时器产生-pwm-波\">STM32 定时器产生 PWM 波</h1>\n<p>对于 PWM\n波来说最重要的两个参数就是频率和占空比。频率是周期的倒数，占空比是指脉宽时间占周期的比例。微控制器产生\nPWM 波的原理是，定时器重复的从 0 计数到 ARR，设定比较值\nCCRx。当定时器的计数值向上计数到与 CCRx\n的值相等时，对应波形输出管脚电平翻转，当定时器计数值到 ARR\n时，输出管脚的电平再次发生翻转。定时器的一个计时周期对应一个 PWM\n周期，脉宽（高电平的宽度）需要根据输出管脚的初始电平不同，或者为 0~CCRx\n这一段，或者为 CCRx~ARR 这一段。改变 CCRx 的值即可实现脉宽的控制。PWM\n频率和占空比的影响因素有：</p>\n<ul>\n<li>ARR：决定 PWM 周期（在系统时钟频率固定的情况下）</li>\n<li>CCRx：决定 PWM 占空比（高低电平所占整个周期比例）</li>\n</ul>\n<p><img src=\"/img/STM32-PWM/PWM.png\" style=\"zoom:20%;\" /></p>\n<p><strong>STM32</strong> 的 <strong>TIM1 ~ TIM8</strong> 定时器，除了\n<strong>TIM6</strong> 和 TIM7 外的其他定时器都可以用来产生\n<strong>PWM</strong> 输出。高级定时器 <strong>TIM1</strong> 和\n<strong>TIM8</strong> 可以同时产生 <strong>7</strong> 路的 PWM\n输出。而通用定时器可以同时产生 <strong>4</strong> 路\n<strong>PWM</strong>。</p>\n<p>以通用定时器为例，这些定时器有 4\n个输出通道，每个通道都有一个<strong>捕获/比较寄存器</strong>，将寄存器，将寄存器值和计数器值比较，通过比较结果输出高低电平，实现\n<strong>PWM</strong> 信号输出。</p>\n<p>每个定时器只有一个计数器，但每个通道都有自己的<strong>捕获/比较寄存器</strong>，因此对于一个定时器来说，4\n路输出的 <strong>PWM</strong>\n频率（周期）是相同的，而不同通道的占空比可以是不同的。</p>\n<hr />\n<p>对 <code>GPIO</code> 和 <code>TIM3</code> 进行初始化：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">TIM_Config</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>&#123;<br>    GPIO_InitTypeDef GPIO_InitStructure;<br>    <br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class=\"hljs-comment\">// GPIOB 时钟打开</span><br>    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); <span class=\"hljs-comment\">// TIM3 时钟打开</span><br>    <br>    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;<br>    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; <span class=\"hljs-comment\">// 复用推挽输出</span><br>    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class=\"hljs-comment\">// 输出 50MHz</span><br>    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>定时器 <code>TIM3</code> 配置：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">TIM_Init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint16_t</span> arr, <span class=\"hljs-type\">uint16_t</span> duty)</span>&#123;<br>    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;<br>    TIM_OCInitTypeDef TIM_OCInitStructure;<br>    <br>    TIM_DeInit(TIM3);<br>    TIM_TimeBaseStructure.TIM_Period = arr - <span class=\"hljs-number\">1</span>;\t<span class=\"hljs-comment\">// 自动重装载寄存器的值</span><br>    TIM_TimeBaseStructure.TIM_Prescaler = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 时钟预分频数</span><br>    TIM_TimeBaseStructure.TIM_ClockDivsion = <span class=\"hljs-number\">0x0</span>; <span class=\"hljs-comment\">// 采样分频</span><br>    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;<br>    TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure);<br>    <br>    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; <span class=\"hljs-comment\">// TIM 的 PWM1 模式</span><br>    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<br>    TIM_OCInitStructure.TIM_Pulse = duty; <span class=\"hljs-comment\">// 设置占空比</span><br>    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; <span class=\"hljs-comment\">// TIM 输出比较极性高</span><br>   \tTIM_OC4Init(TIM3, &amp;TIM_OCInitStructure);<br>    <br>    TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable); <span class=\"hljs-comment\">// 使能定时器 TIM3 在 CCR3 上的预装在寄存器</span><br>    TIM_ARRPreloadConfig(TIM3, ENABLE); <span class=\"hljs-comment\">// 使能定时器 TIM3 在 ARR 上的预装载寄存器</span><br>    TIM_Cmd(TIM3, ENABLE); <span class=\"hljs-comment\">// 使能定时器3</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>计数模式：</p>\n<p><img src=\"/img/STM32-PWM/Count Mode.png\" style=\"zoom:25%;\" /></p>\n<p><code>CubeMX</code> 配置计时器：</p>\n<p><img src=\"/img/STM32-PWM/CubeMX%20Timer.png\" /></p>\n<p>定时器的开关函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\">HAL_TIM_Base_Start_IT(&amp;htim2); <span class=\"hljs-comment\">// 开启定时器及溢出中断</span><br>HAL_TIM_Base_Stop_IT(&amp;htim2); <span class=\"hljs-comment\">// 关闭定时器及溢出中断</span><br>HAL_TIM_Base_Strat(&amp;htim2); <span class=\"hljs-comment\">// 开启定时器（不开启中断）</span><br>HAL_TIM_Base_Stop(&amp;htim2); <span class=\"hljs-comment\">// 关闭定时器</span><br></code></pre></div></td></tr></table></figure>\n<p>PWM 配置：</p>\n<p><img src=\"/img/STM32-PWM/Mode.png\" /></p>\n<p><img src=\"/img/STM32-PWM/Configuration.png\" /></p>\n<hr />\n<ul>\n<li>Prescaler 预分频系数：等待多少个时钟周期增加一次计数</li>\n<li>Counter Model 计数模式：向上、向下或者中间对齐等</li>\n<li>Counter Period 计数周期：重新开始计数前所要计数的最大数量</li>\n<li>Internal Clock Division 内部时钟分频：另一种时钟分频方法</li>\n<li>auto-reload-preload\n自动重装载：当计数达到最大时，重新启动计数器</li>\n</ul>\n<blockquote>\n<p>Calculate the PWM frequency</p>\n<ul>\n<li>System Clock is 72 MHz: We can \"count\" 72-million times each\nsecond</li>\n<li>8-bit resolution(0-255): Each cycle is 256 \"counts\"</li>\n</ul>\n<p><span class=\"math display\">\\[\n\\frac{72,000,000\\ \\text{counts}}{1\\ \\text{second}}\\cdot\\frac{1\\\n\\text{cycle}}{256\\ \\text{counts}}=\\frac{218250\\ \\text{cycles}}{1\\\n\\text{second}}\n\\]</span></p>\n<p>PWM frequency = 218250 Hz</p>\n</blockquote>\n<hr />\n<ul>\n<li><p>Mode 模式：PWM1 、PWM2</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>模式</th>\n<th>计数器 CNT 计数方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>PWM1</td>\n<td>递增</td>\n<td>CNT&lt;CCR，通道 CH 为<strong>有效</strong>，否则为无效</td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td>递减</td>\n<td>CNT&gt;CCR，通道 CH 为<strong>无效</strong>，否则为有效</td>\n</tr>\n<tr class=\"odd\">\n<td>PWM2</td>\n<td>递增</td>\n<td>CNT&lt;CCR，通道 CH 为<strong>无效</strong>，否则为有效</td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td>递减</td>\n<td>CNT&gt;CCR，通道 CH 为<strong>有效</strong>，否则为无效</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>Pulse 占空比：Counter Periode 之间的一个数</p></li>\n</ul>\n<p><code>HAL</code> 库代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;stm32f1xx_hal.h&quot;</span></span><br><br>TIM_HandleTypeDef htim2;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">SystemClock_Config</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Error_Handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PWM_Init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    TIM_OC_InitTypeDef sConfigOC;<br><br>    htim2.Instance = TIM2;<br>    htim2.Init.Prescaler = <span class=\"hljs-number\">7199</span>;<br>    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;<br>    htim2.Init.Period = <span class=\"hljs-number\">999</span>;<br>    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;<br>    <span class=\"hljs-keyword\">if</span> (HAL_TIM_PWM_Init(&amp;htim2) != HAL_OK)<br>    &#123;<br>        Error_Handler();<br>    &#125;<br><br>    sConfigOC.OCMode = TIM_OCMODE_PWM1;<br>    sConfigOC.Pulse = <span class=\"hljs-number\">499</span>;<br>    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;<br>    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;<br>    <span class=\"hljs-keyword\">if</span> (HAL_TIM_PWM_ConfigChannel(&amp;htim2, &amp;sConfigOC, TIM_CHANNEL_1) != HAL_OK)<br>    &#123;<br>        Error_Handler();<br>    &#125;<br><br>    HAL_TIM_MspPostInit(&amp;htim2);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    HAL_Init();<br>    SystemClock_Config();<br><br>    __HAL_RCC_GPIOA_CLK_ENABLE();<br>    GPIO_InitTypeDef GPIO_InitStruct;<br>    GPIO_InitStruct.Pin = GPIO_PIN_0;<br>    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;<br>    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;<br>    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);<br><br>    PWM_Init();<br><br>    HAL_TIM_PWM_Start(&amp;htim2, TIM_CHANNEL_1);<br><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>    &#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p><strong>修改频率:</strong></p>\n<p>可以通过修改预分频器（Prescaler）和计数周期（Period）的值来改变 PWM\n信号的频率。</p>\n<p>例如，假设你希望生成 1 kHz 的 PWM 信号：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\">htim2.Init.Prescaler = <span class=\"hljs-number\">71</span>;<br>htim2.Init.Period = <span class=\"hljs-number\">999</span>;<br></code></pre></div></td></tr></table></figure>\n","text":"STM32 定时器产生 PWM 波 对于 PWM 波来说最重要的两个参数就是频率和占空比。频率是周期的倒数，占空比是指脉宽时间占周期的比例。微控制器产生 PWM 波的原理是，定时器重复的从 0 计数到 ARR，设定比较值 CCRx。当定时器的计数值向上计数到与 CCRx 的值相等...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"自动控制","slug":"自动控制","count":2,"path":"api/categories/自动控制.json"}],"tags":[{"name":"STM32","slug":"STM32","count":1,"path":"api/tags/STM32.json"},{"name":"PWM","slug":"PWM","count":2,"path":"api/tags/PWM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#stm32-%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BA%A7%E7%94%9F-pwm-%E6%B3%A2\"><span class=\"toc-text\">STM32 定时器产生 PWM 波</span></a></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"E96 系列电阻标称阻值","uid":"5446d073459d8b66ad572b884caef029","slug":"Electronic/E96系列电阻标称阻值","date":"2023-03-21T03:10:00.000Z","updated":"2023-04-14T12:30:22.567Z","comments":true,"path":"api/articles/Electronic/E96系列电阻标称阻值.json","keywords":null,"cover":null,"text":"E96系列电阻标称阻值 ","link":"","photos":[],"count_time":{"symbolsCount":18,"symbolsTime":"1 mins."},"categories":[{"name":"阻值表","slug":"阻值表","count":1,"path":"api/categories/阻值表.json"}],"tags":[{"name":"电子技术","slug":"电子技术","count":1,"path":"api/tags/电子技术.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"脉冲宽度调制 PWM","uid":"927bf395dd3f4c1ed23a8c2f2923f289","slug":"Control/脉冲宽度调制 PWM","date":"2023-02-12T07:48:00.000Z","updated":"2023-02-12T07:57:37.390Z","comments":true,"path":"api/articles/Control/脉冲宽度调制 PWM.json","keywords":null,"cover":[],"text":"脉冲宽度调制 PWM 脉宽调制(PWM) 或脉冲持续时间调制(PDM)是一种通过有效地将电信号分成离散部分来降低电信号传输的平均功率的方法。馈送到负载的电压（和电流）的平均值通过快速打开和关闭电源与负载之间的开关来控制。同关断周期相比，开关开启的时间越长，提供给负载的总功率就越高...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"自动控制","slug":"自动控制","count":2,"path":"api/categories/自动控制.json"}],"tags":[{"name":"PWM","slug":"PWM","count":2,"path":"api/tags/PWM.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}