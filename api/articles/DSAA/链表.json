{"title":"链表 linked list","uid":"0d8865dd6f5b4fb80b5a9df16b916aeb","slug":"DSAA/链表","date":"2023-04-14T12:00:00.000Z","updated":"2023-04-14T12:17:15.577Z","comments":true,"path":"api/articles/DSAA/链表.json","keywords":null,"cover":null,"content":"<h1 id=\"链表-linked-list\">链表 linked list</h1>\n<h2 id=\"什么是链表\">什么是链表</h2>\n<p><strong>链表</strong>是数据元素的线性集合，其顺序不是由它们在内存中的物理位置给出的。每个元素都指向下一个元素。它是一种<em>数据结构</em>，由一组节点组成，这些节点共同表示一个序列。在其最基本的形式中，每个节点都包含：数据和指向序列中下一个节点的指针（链接）。这种结构允许在迭代期间从序列中的任何位置有效地插入或删除元素。<em>链表的一个缺点是访问时间是线性的(difficult\nto\npipeline)。</em>更快的访问（例如随机访问）是不行的。与链表相比，数组具有更好的缓存局部性(cache\nlocality)。</p>\n<p>链表是最简单和最常见的数据结构之一。它们可用于实现其它几种常见的抽象数据类型，包括列表、栈(Stack)、队列、关联数组和\nS 表达式，尽管直接实现这些数据结构而不使用链表作为基础并不罕见。</p>\n<p>链表相对于传统数组的主要优点是，可以轻松插入或删除列表中的元素，而无需重新分配或重组整个结构，因为数据项不需要连续存储在内存或磁盘上，而在运行时重组数组是一项成本更高的操作。链表允许在列表中的任意位置\n插入和删除节点，并且允许在列表遍历期间将链接保留在内存中添加或删除的链接之前，以恒定数量的操作来执行次操作。</p>\n<p>但是，由于简单链表本身不允许随机访问数据或任何形式的有效索引，因此许多基本操作（例如获取列表的最后一个节点、查找包含给定基准的节点或定位应插入新节点的位置）可能需要遍历大部分或全部列表元素。</p>\n<p><img src=\"/img/DSAA/linked list 1.png\" style=\"zoom:33%;\" /></p>\n<blockquote>\n<p>链表的每条记录通常称为“元素”(element)\n或节点(node)。包含下一个节点地址的字段通常称为“下一个链接”或“下一个指针”。其余称为“数据”。</p>\n</blockquote>\n<h3 id=\"为什么要使用链表\">为什么要使用链表？</h3>\n<p>数组(Arrays)可以用来存储相似类型的线性数据，但数组有以下的限制：</p>\n<ul>\n<li><strong>数组的大小是固定的</strong>：因此使用数组时必须先预设元素数量的上限。此外，通常情况下，无论是否使用，都需要分配数组上限大小的内存。</li>\n<li><strong>插入一个元素或删除一个数组中的已有元素花费很大</strong>：必须为新元素创建空间，为了创建这个空间，现有的数组元素必须移动。</li>\n</ul>\n<p>Example：</p>\n<p>在一个系统中，如果我们在一个数组\n<code>id[] = [1000, 1010, 1050, 2000, 2040]</code> 中维护一个有序的 ID\n列表。此时，想要插入一个新的 ID\n1005，那么为了维持排序的顺序，我们必须移动 1000 之后的所有元素。</p>\n<h3 id=\"链表相对于数组的优点\">链表相对于数组的优点</h3>\n<ul>\n<li>动态数组</li>\n<li>易于插入和删除</li>\n<li>在开头插入一个元素是一个常数时间操作，需要 <code>O(1)</code>\n时间，而在数组的开头插入一个元素需要 <code>O(n)</code> 时间，其中 n\n是数组中元素的数量。</li>\n</ul>\n<h3 id=\"链表的缺点\">链表的缺点</h3>\n<ul>\n<li>不能随机访问。必须从第一个节点开始按顺序访问节点。因此，不能用它的默认实现对链表进行有效的二分搜索。</li>\n<li>对于列表中的每个元素，指针都需要额外的内存空间。</li>\n<li>不是缓存友好(cache-friendly)。由于数组元素是连续位置，因此存在引用的局部性，这在链表中是不存在的。</li>\n<li>遍历和更改指针需要花费大量的时间。</li>\n<li>反向遍历<strong>单链表</strong>是不可能的。</li>\n<li>链表不可能像在数组中那样通过索引直接访问元素。</li>\n<li>所搜一个元素的代价很高，需要 <code>O(n)</code> 时间复杂度。</li>\n<li>链表的排序是十分复杂的，同时花费巨大。</li>\n</ul>\n<h3 id=\"链表的种类\">链表的种类</h3>\n<ul>\n<li>简单链表 (Simple Linked List) -\n只能在一个方向上移动或遍历链表。每个节点的 <code>next</code>\n指针指向其它节点，最后一个节点的 <code>next</code> 指针指向\n<code>NULL</code>。它也被称为“单链表”。</li>\n<li>双链表 (Doubly Linked List) -\n在这种类型的链表中看，可以在两个方向（向前和向后）移动或遍历链表。</li>\n<li>循环链表 (Circular Linked List) - 链表的最后一个节点的\n<code>next</code> 指针指向第一个节点。</li>\n<li>双向循环链表 (Doubly Circular Linked List) -\n这是一种更复杂的链表类型，它包含指向列表中下一个节点和上一个节点的指针。双链表和循环双向链表的区别，与单链表和循环链表的区别一样的。循环双向链表在第一个节点的前一个字段中不包含\n<code>NULL</code>。</li>\n<li>Header Linked List - 它在列表的开头包含一个标题节点。</li>\n</ul>\n<h3 id=\"链表的基本操作\">链表的基本操作</h3>\n<ul>\n<li>Deletion</li>\n<li>Insertion</li>\n<li>Search</li>\n<li>Display</li>\n</ul>\n<h3 id=\"单链表的简单实现\">单链表的简单实现</h3>\n<h4 id=\"c\">C</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// A linked list node</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>&#123;</span><br>    <span class=\"hljs-type\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">next</span>;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"c-1\">C++</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-type\">int</span> data;<br>    Node* next;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"python\">Python</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># Node class</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:<br>    <span class=\"hljs-comment\"># Function to initialize the node object</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):<br>        self.data = data\t<span class=\"hljs-comment\"># Assign data</span><br>        self.<span class=\"hljs-built_in\">next</span> = Node<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"遍历链表\">遍历链表</h3>\n<h4 id=\"c-2\">C</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>&#123;</span><br>    <span class=\"hljs-type\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">next</span>;</span><br>&#125;;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node* n)</span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(n != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, n-&gt;data);<br>        n = n-&gt;next;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">head</span> =</span> <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">second</span> =</span> <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">third</span> =</span> <span class=\"hljs-literal\">NULL</span>;<br>    <br>    <span class=\"hljs-comment\">// allocate 3 nodes in the heap</span><br>    head = (<span class=\"hljs-keyword\">struct</span> Node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));<br>    second = (<span class=\"hljs-keyword\">struct</span> Node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));<br>    third = (<span class=\"hljs-keyword\">struct</span> Node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));<br>    <br>    head-&gt;data = <span class=\"hljs-number\">1</span>;<br>    head-&gt;next = second;<br>    <br>    seconde-&gt;data = <span class=\"hljs-number\">2</span>;<br>    seconde-&gt;next = third;<br>    <br>    third-&gt;data = <span class=\"hljs-number\">3</span>;<br>    third-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>    <br>    prinfList(head);<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"c-3\">C++</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-type\">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printList</span><span class=\"hljs-params\">(Node* n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(n != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        cout &lt;&lt; n-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        n = n-&gt;next;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    Node* head = <span class=\"hljs-literal\">NULL</span>;<br>    Node* second = <span class=\"hljs-literal\">NULL</span>;<br>    Node* third = <span class=\"hljs-literal\">NULL</span>;<br>    <br>    <span class=\"hljs-comment\">// allocate 3 nodes in the heap</span><br>    head = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>();<br>    second = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>();<br>    third = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>();<br>    <br>    head-&gt;data = <span class=\"hljs-number\">1</span>;<br>    head-&gt;next = second;<br>    <br>    second-&gt;data = <span class=\"hljs-number\">2</span>;<br>    second-&gt;next = third;<br>    <br>    third-&gt;data = <span class=\"hljs-number\">3</span>;<br>    third-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>    <br>    <span class=\"hljs-built_in\">printList</span>(head);<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"python-1\">Python</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):<br>        self.data = data<br>        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span><br>        <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        self.head = <span class=\"hljs-literal\">None</span><br>       <br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">printList</span>(<span class=\"hljs-params\">self</span>):<br>        temp = self.head<br>        <span class=\"hljs-keyword\">while</span>(temp):<br>            <span class=\"hljs-built_in\">print</span>(temp.data)<br>            temp = temp.<span class=\"hljs-built_in\">next</span><br>            <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    llist = LinkedList()<br>    <br>    llist.head = Node(<span class=\"hljs-number\">1</span>)<br>    second = Node(<span class=\"hljs-number\">2</span>)<br>    third = Node(<span class=\"hljs-number\">3</span>)<br>    <br>    llist.head.<span class=\"hljs-built_in\">next</span> = second<br>    second.<span class=\"hljs-built_in\">next</span> = third<br>    <br>    llist.printList()<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"链表的应用\">链表的应用</h3>\n<ul>\n<li>链表可以用来实现其它的数据结构，如堆栈和队列</li>\n<li>链表可以用来实现哈希表</li>\n<li>链表可以用来实现图</li>\n</ul>\n<h2 id=\"链表的操作traverse-insert-and-delete\">链表的操作：Traverse,\nInsert and Delete</h2>\n<ul>\n<li>Traversal - 访问链表的每一个元素</li>\n<li>Insertion - 添加一个新的元素到链表中</li>\n<li>Deletion - 删除一个已有元素</li>\n<li>Search - 在链表中找到一个节点</li>\n<li>Sort - 对链表的节点进行排序</li>\n</ul>\n<h3 id=\"遍历一个链表\">遍历一个链表</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> head;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\nList elements are - \\n&quot;</span>);<br><span class=\"hljs-keyword\">while</span>(temp != <span class=\"hljs-literal\">NULL</span>)&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d ---&gt;&quot;</span>, temp-&gt;data);<br>    temp = temp-&gt;next;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"插入一个元素到链表中\">插入一个元素到链表中</h3>\n<ol type=\"1\">\n<li>在开头插入</li>\n</ol>\n<ul>\n<li>为新节点分配内存</li>\n<li>存入数据</li>\n<li>新节点的 <code>next</code> 指向 <code>head</code></li>\n<li>更改 <code>head</code> 指向最新创建的节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span>;</span><br>newNode = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));<br>newNode-&gt;data = <span class=\"hljs-number\">4</span>;<br>newNode-&gt;next = head;<br>head = newNode;<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>在末尾插入</li>\n</ol>\n<ul>\n<li>为新节点分配内存</li>\n<li>存入数据</li>\n<li>遍历到最后一个节点</li>\n<li>更改最后一个节点的 <code>next</code> 指向最新的节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span>;</span><br>newNode = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));<br>newNode-&gt;data = <span class=\"hljs-number\">4</span>;<br>newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> head;<br><span class=\"hljs-keyword\">while</span>(temp-&gt;next != <span class=\"hljs-literal\">NULL</span>)&#123;<br>    temp = temp-&gt;next;<br>&#125;<br>temp-&gt;next = newNode<br></code></pre></div></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>在中间插入</li>\n</ol>\n<ul>\n<li>为新节点分配内存</li>\n<li>存入数据</li>\n<li>遍历到新节点存入位置之前的节点</li>\n<li>更改 <code>next</code> 指针</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span>;</span><br>newNode = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));<br>newNode-&gt;data = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> head;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; position; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(temp-&gt;next != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        temp = temp-&gt;next;<br>    &#125;<br>&#125;<br>newNode-&gt;next = temp-&gt;next;<br>temp-&gt;next = newNode;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"从链表中删除一个节点\">从链表中删除一个节点</h3>\n<ol type=\"1\">\n<li>删除头节点</li>\n</ol>\n<ul>\n<li>将 <code>head</code> 指向第二个节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\">head = head-&gt;next;<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>删除末尾的节点</li>\n</ol>\n<ul>\n<li>遍历到倒数第二个元素</li>\n<li>将它的 <code>next</code> 指针指向 <code>NULL</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>* <span class=\"hljs-title\">temp</span> =</span> head;<br><span class=\"hljs-keyword\">while</span>(temp-&gt;next-&gt;next != <span class=\"hljs-literal\">NULL</span>)&#123;<br>    temp = temp-&gt;next;<br>&#125;<br>temp-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br></code></pre></div></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>删除中间的节点</li>\n</ol>\n<ul>\n<li>遍历到要删除节点之前的节点</li>\n<li>更改其 <code>next</code> 指针， 将要删除的节点从链表中排除</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; position; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(temp-&gt;next != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        temp = temp-&gt;next;<br>    &#125;<br>&#125;<br>temp-&gt;next = temp-&gt;next-&gt;next;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"在链表中搜索一个元素\">在链表中搜索一个元素</h3>\n<ul>\n<li>将 <code>head</code> 作为 <code>current</code> 节点</li>\n<li>运行一个循环，直到 <code>current</code> 节点是\n<code>NULL</code>，因为最后一个节点指向 <code>NULL</code></li>\n<li>在每次迭代中，检测节点是否等于 <code>item</code>。如果与\n<code>item</code> 匹配，则返回 <code>true</code>，否则返回\n<code>false</code>。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">searchNode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref, <span class=\"hljs-type\">int</span> key)</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">current</span> =</span> *head_ref;<br>    <br>    <span class=\"hljs-keyword\">while</span>(current != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(current-&gt;data == key) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        current = current-&gt;next;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"链表元素排序\">链表元素排序</h3>\n<p>冒泡排序：</p>\n<ol type=\"1\">\n<li>将 <code>head</code> 作为 <code>current</code> 节点，并创建一个\n<code>index</code> 节点备用。</li>\n<li>如果 <code>head</code> 是空，则返回。</li>\n<li>否则，运行一个循环直到以后一个节点。</li>\n<li>在每次迭代中依次执行 5-6 步。</li>\n<li>存储 <code>current</code> 的下一个节点在 <code>index</code>\n中。</li>\n<li>检查 <code>current</code>\n节点的数据是否大于下一个节点的。如果是，则交换 <code>current</code> 和\n<code>index</code>。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sortLinkedList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref)</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">current</span> =</span> *head_ref, *index = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-type\">int</span> temp;<br>    <br>    <span class=\"hljs-keyword\">if</span>(head_ref == <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">while</span>(current != <span class=\"hljs-literal\">NULL</span>)&#123;<br>            <span class=\"hljs-comment\">// index points to the node next to current</span><br>            index = current-&gt;next;<br>            <br>            <span class=\"hljs-keyword\">while</span>(index != <span class=\"hljs-literal\">NULL</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(current-&gt;data &gt; index-&gt;data)&#123;<br>                    temp = current-&gt;data;<br>                    current-&gt;data = index-&gt;data;<br>                    index-&gt;data = temp;<br>                &#125;<br>                index = index-&gt;next;<br>            &#125;<br>            current = current-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"python-2\">Python</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># Linked list operations in Python</span><br><br><span class=\"hljs-comment\"># create a node</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):<br>        self.data = data<br>        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        self.head = <span class=\"hljs-literal\">None</span><br>        <br>    <span class=\"hljs-comment\"># Insert at the begining</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertAtBegining</span>(<span class=\"hljs-params\">self, new_data</span>):<br>        new_node = Node(new_data)<br>        <br>        new_node.<span class=\"hljs-built_in\">next</span> = self.head<br>        self.head = new_node<br>    <br>    <span class=\"hljs-comment\"># Insert after a node</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertAfter</span>(<span class=\"hljs-params\">self, prev_node, new_data</span>):<br>        <span class=\"hljs-keyword\">if</span> prev_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The given previous node must inLinkedList.&quot;</span>)<br>            <span class=\"hljs-keyword\">return</span><br>        new_node = Node(new_data)<br>        new_node.<span class=\"hljs-built_in\">next</span> = prev_node.<span class=\"hljs-built_in\">next</span><br>        prev_node.<span class=\"hljs-built_in\">next</span> = new_node<br>    <span class=\"hljs-comment\"># Insert at the end</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertAtEnd</span>(<span class=\"hljs-params\">self, new_data</span>):<br>        new_node = Node(new_data)<br>        <br>        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            self.head = new_node<br>            <span class=\"hljs-keyword\">return</span><br>        <br>        last = self.head<br>        <span class=\"hljs-keyword\">while</span>(last.<span class=\"hljs-built_in\">next</span>):<br>            last = last.<span class=\"hljs-built_in\">next</span><br>        <br>        last.<span class=\"hljs-built_in\">next</span> = new_node<br>        <br>    <span class=\"hljs-comment\"># Deleting a node</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">deleteNode</span>(<span class=\"hljs-params\">self, position</span>):<br>        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">return</span><br>        <br>        temp = self.head<br>        <br>        <span class=\"hljs-keyword\">if</span> position == <span class=\"hljs-number\">0</span>:<br>            self.head = temp.<span class=\"hljs-built_in\">next</span><br>            temp = <span class=\"hljs-literal\">None</span><br>            <span class=\"hljs-keyword\">return</span><br>        <br>        <span class=\"hljs-comment\"># Find the key to be deleted</span><br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(position - <span class=\"hljs-number\">1</span>):<br>            temp = temp.<span class=\"hljs-built_in\">next</span><br>            <span class=\"hljs-keyword\">if</span> temp <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>                <span class=\"hljs-keyword\">break</span><br>        <br>        <span class=\"hljs-comment\"># If the key is not present</span><br>        <span class=\"hljs-keyword\">if</span> temp <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">return</span> <br>        <br>        <span class=\"hljs-keyword\">if</span> temp.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">return</span><br>        <br>        <span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span><br>        temp.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span><br>        temp.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-built_in\">next</span><br>    <br>    <span class=\"hljs-comment\"># Search an element</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, key</span>):<br>        current = self.head<br>        <br>        <span class=\"hljs-keyword\">while</span> current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">if</span> current.data == key:<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br>            <br>            current = current.<span class=\"hljs-built_in\">next</span><br>        <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span><br>    <br>    <span class=\"hljs-comment\"># Sort the linked list</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sortLinkedList</span>(<span class=\"hljs-params\">self, head</span>):<br>        current = head<br>        index = Node(<span class=\"hljs-literal\">None</span>)<br>        <br>        <span class=\"hljs-keyword\">if</span> head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">while</span> current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>                <span class=\"hljs-comment\"># index points to the node next to current </span><br>                index = current.<span class=\"hljs-built_in\">next</span><br>                <br>                <span class=\"hljs-keyword\">while</span> index <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>                    <span class=\"hljs-keyword\">if</span> current.data &gt; index.data:<br>                        current.data, index.data = index.data, current.data<br>                    index = index.<span class=\"hljs-built_in\">next</span><br>                current = current.<span class=\"hljs-built_in\">next</span><br><br>    <span class=\"hljs-comment\"># Print the linked list</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">printList</span>(<span class=\"hljs-params\">self</span>):<br>        temp = self.head<br>        <span class=\"hljs-keyword\">while</span>(temp):<br>            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(temp.data) + <span class=\"hljs-string\">&quot; &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)<br>            temp = temp.<span class=\"hljs-built_in\">next</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    llist = LinkedList()<br>    llist.insertAtEnd(<span class=\"hljs-number\">1</span>)<br>    llist.insertAtBeginning(<span class=\"hljs-number\">2</span>)<br>    llist.insertAtBeginning(<span class=\"hljs-number\">3</span>)<br>    llist.insertAtEnd(<span class=\"hljs-number\">4</span>)<br>    llist.inserAfter(llist.head.<span class=\"hljs-built_in\">next</span>, <span class=\"hljs-number\">5</span>)<br>    <br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;linked list: &quot;</span>)<br>    llist.printList()<br>    <br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nAfter deleting an element:&quot;</span>)<br>    llist.deleteNode(<span class=\"hljs-number\">3</span>)<br>    llist.printList()<br>    <br>    <span class=\"hljs-built_in\">print</span>()<br>    item_to_find = <span class=\"hljs-number\">3</span><br>    <span class=\"hljs-keyword\">if</span> llist.search(item_to_find):<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(item_to_find) + <span class=\"hljs-string\">&quot;is found&quot;</span>)<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(item_to_find) + <span class=\"hljs-string\">&quot;is not found&quot;</span>)<br>        <br>    llist.sortLinkedList(llist.head)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted List: &quot;</span>)<br>    llist.printList()<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"c-4\">C</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>&#123;</span><br>    <span class=\"hljs-type\">int</span> data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">next</span>;</span><br>&#125;;<br><br><span class=\"hljs-comment\">// Insert at the beginning</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertAtBeginning</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref, <span class=\"hljs-type\">int</span> new_data)</span>&#123;<br>    <span class=\"hljs-comment\">// Allocate memory to a node</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">new_node</span> =</span> (<span class=\"hljs-keyword\">struct</span> Node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));<br>    <br>    <span class=\"hljs-comment\">// insert the data</span><br>    new_node-&gt;data = new_data;<br>    new_node-&gt;next = (*head_ref);<br>    <br>    <span class=\"hljs-comment\">// Move head to new node</span><br>    (*head_ref) = new_node;<br>&#125;<br><br><span class=\"hljs-comment\">// Insert a node after a node</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertAfter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node* prev_node, <span class=\"hljs-type\">int</span> new_data)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(prev_node == <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the given previous node cannot be NULL&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">new_node</span> =</span> (<span class=\"hljs-keyword\">struct</span> Node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));<br>    new_node-&gt;data = new_data;<br>    new_node-&gt;next = prev_node-&gt;next;<br>    prev_node-&gt;next = new_node;<br>&#125;<br><br><span class=\"hljs-comment\">// Insert the end</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertAtEnd</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref, <span class=\"hljs-type\">int</span> new_data)</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">new_node</span> =</span> (<span class=\"hljs-keyword\">struct</span> Node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">last</span> =</span> *head_ref;<br>    <br>    new_node-&gt;data = new_data;<br>    new_node-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>    <br>    <span class=\"hljs-keyword\">if</span>(*head_ref == <span class=\"hljs-literal\">NULL</span>)&#123;<br>        *head_ref = new_node;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span>(last-&gt;next != <span class=\"hljs-literal\">NULL</span>) last = last-&gt;next;<br>    last-&gt;next = new_node;<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// Delete a node</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">deleteNode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref, <span class=\"hljs-type\">int</span> key)</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">temp</span> =</span> *head_ref, *prev;<br>    <br>    <span class=\"hljs-keyword\">if</span>(temp != <span class=\"hljs-literal\">NULL</span> &amp;&amp; temp-&gt;data == key)&#123;<br>        *head_ref = temp-&gt;next;<br>        <span class=\"hljs-built_in\">free</span>(temp);<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">// Find the key to be deleted</span><br>    <span class=\"hljs-keyword\">while</span>(temp != <span class=\"hljs-literal\">NULL</span> &amp;&amp; temp-&gt;data != key)&#123;<br>        prev = temp;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// If the key is not present</span><br>    <span class=\"hljs-keyword\">if</span>(temp == <span class=\"hljs-literal\">NULL</span>) <span class=\"hljs-keyword\">return</span>;<br>    <br>    <span class=\"hljs-comment\">// Remove the node</span><br>    prev-&gt;next = temp-&gt;next;<br>    <span class=\"hljs-built_in\">free</span>(temp);<br>&#125;<br><br><span class=\"hljs-comment\">// Search a node</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">searchNode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref, <span class=\"hljs-type\">int</span> key)</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">current</span> =</span> *head_ref;<br>    <br>    <span class=\"hljs-keyword\">while</span>(current != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span> (current-&gt;data == key) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        current = current-&gt;next;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// Sort the linked list</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sortLinkedList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node** head_ref)</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">current</span> =</span> *head_ref, *index = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-type\">int</span> temp;<br>    <span class=\"hljs-keyword\">if</span>(head_ref == <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">while</span>(current != <span class=\"hljs-literal\">NULL</span>)&#123;<br>            index = current-&gt;next;<br>            <br>            <span class=\"hljs-keyword\">while</span>(index != <span class=\"hljs-literal\">NULL</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span>(current-&gt;data &gt; index-&gt;data)&#123;<br>                    temp = current-&gt;data;<br>                    current-&gt;data = index-&gt;data;<br>                    index-&gt;data = temp;<br>                &#125;<br>                index = index-&gt;next;<br>           &#125;<br>            current = current-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// Print the linked list</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node* node)</span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(node != <span class=\"hljs-literal\">NULL</span>)&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; %d &quot;</span>, node-&gt;data);<br>        node = node-&gt;next;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>* <span class=\"hljs-title\">head</span> =</span> <span class=\"hljs-literal\">NULL</span>;<br>    <br>    insertAtEnd(&amp;head, <span class=\"hljs-number\">1</span>);<br>    insertAtBeginning(&amp;head, <span class=\"hljs-number\">2</span>);<br>    insertAtBeginning(&amp;head, <span class=\"hljs-number\">3</span>);<br>    insertAtEnd(&amp;head, <span class=\"hljs-number\">4</span>);<br>    insertAfter(head-&gt;next, <span class=\"hljs-number\">5</span>);<br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Linked list: &quot;</span>);<br>    printList(head);<br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nAfter deleting an element: &quot;</span>);<br>    deleteNode(&amp;head, <span class=\"hljs-number\">3</span>);<br>    printList(head);<br>    <br>    <span class=\"hljs-type\">int</span> item_to_find = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">if</span>(searchNode(&amp;head, item_to_find))&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%d is found&quot;</span>, item_to_find);<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%d is not found&quot;</span>, item_to_find);<br>    &#125;<br>    <br>    sortLinkedList(&amp;head);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSorted List: &quot;</span>);<br>    printList(head);<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n","text":"链表 linked list 什么是链表 链表是数据元素的线性集合，其顺序不是由它们在内存中的物理位置给出的。每个元素都指向下一个元素。它是一种数据结构，由一组节点组成，这些节点共同表示一个序列。在其最基本的形式中，每个节点都包含：数据和指向序列中下一个节点的指针（链接）。这种结...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"计算机","slug":"计算机","count":1,"path":"api/tags/计算机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8-linked-list\"><span class=\"toc-text\">链表 linked list</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">什么是链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">为什么要使用链表？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">链表相对于数组的优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">链表的缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">链表的种类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">链表的基本操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">单链表的简单实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c\"><span class=\"toc-text\">C</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c-1\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python\"><span class=\"toc-text\">Python</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">遍历链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c-2\"><span class=\"toc-text\">C</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c-3\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python-1\"><span class=\"toc-text\">Python</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">链表的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9Ctraverse-insert-and-delete\"><span class=\"toc-text\">链表的操作：Traverse,\nInsert and Delete</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">遍历一个链表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%88%B0%E9%93%BE%E8%A1%A8%E4%B8%AD\"><span class=\"toc-text\">插入一个元素到链表中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">从链表中删除一个节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%90%9C%E7%B4%A2%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">在链表中搜索一个元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">链表元素排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python-2\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-4\"><span class=\"toc-text\">C</span></a></li></ol></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"CAN 总线协议","uid":"386d227c4f88ed4186d8b0b65da86630","slug":"Communication Protocol/CAN 总线","date":"2023-04-01T09:02:00.000Z","updated":"2023-04-14T12:31:54.140Z","comments":true,"path":"api/articles/Communication Protocol/CAN 总线.json","keywords":null,"cover":[],"text":"CAN 总线协议 Controller Area Network (CAN bus) 是一种车辆总线标准，允许为控制器和设备在没有主机的情况下与彼此的应用程序进行通信（没有主从关系）。它是一种基于消息的协议，最初设计用于汽车内的多路复用电线以节省铜线，但它也可以许多其他情况。对于...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"通信协议","slug":"通信协议","count":1,"path":"api/categories/通信协议.json"}],"tags":[{"name":"CAN 总线","slug":"CAN-总线","count":1,"path":"api/tags/CAN-总线.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}