{"title":"STM32 DMA","uid":"da1a2b22445c6e9d06b74da423642c5e","slug":"MCU/STM32-DMA","date":"2022-10-14T16:00:00.000Z","updated":"2023-05-11T12:11:10.447Z","comments":true,"path":"api/articles/MCU/STM32-DMA.json","keywords":null,"cover":"/img/STM32-GPIO/STM32-logo.jpg","content":"<h2 id=\"dma-的介绍\">DMA 的介绍</h2>\n<p>直接内存访问(Direct memory accesss，DMA)\n用于在外设和内存之间以及内存到内存之间提供高速的数据传输。数据可以通过\nDMA 快速传输，不需要任何 CPU 操作。这样可以节约 CPU 资源。</p>\n<p>两个 DMA 控制器总共有 12 个通道（7 个用于 DMA1，5 个用于 DMA\n2），每个通道专门用于管理来自一个或多个外设的内存访问请求。它有一个仲裁器来处理\nDMA 请求之间的优先级。</p>\n<h2 id=\"dma-的主要特性\">DMA 的主要特性</h2>\n<ul>\n<li>12 个独立配置的通道：7 个用于 DMA1，5 个用于 DMA2</li>\n<li>每个通道都连接到专门的硬件 DMA\n请求，每个通道上也支持软件触发。该配置有软件完成</li>\n<li>DMA 通道请求的优先级是软件可编程的(very high、high、medium 和 low\n四个优先级别)</li>\n<li>独立的源和目标传输大小(byte, half word,\nword)，模拟打包和拆包。源/目的地址必须在数据大小上对齐</li>\n<li>支持环形缓冲区管理</li>\n<li>3 个事件标志（DMA 半传输、DMA 传输完成和 DMA\n传输错误）在逻辑上“或”在每个通道的单个中断请求中组合在一起</li>\n<li>内存间传输</li>\n<li>外设到内存和内存到外设，以及外设到外设的传输</li>\n<li>访问 Flash、SRAM、APB1、APB2 和 AHB 外设作为源和目标</li>\n<li>可编程传输数据数: 最多 65536 个</li>\n</ul>\n<p><img src=\"/img/STM32-DMA/DMA%20block.png\"></p>\n<h2 id=\"dma-功能描述\">DMA 功能描述</h2>\n<p>DMA 控制器通过与 Cortex-M3® 内核共享系统总线来执行直接内存传输。当\nCPU 和 DMA 访问同一目标（内存或外设）时，DMA\n请求可能会在某些总线周期内停止 CPU\n对系统总线的访问。总线矩阵实现轮询调度，从而确保 CPU\n至少有一半的系统总线带宽（内存和外设）。</p>\n<h3 id=\"dma-事务\">DMA 事务</h3>\n<p>事件发生后，外设向 DMA 控制器发送请求信号。DMA\n控制器根据通道优先级为请求提供服务。一旦 DMA 控制器访问外设，DMA\n控制器就会向外设发送确认信号。外设在从 DMA\n控制器获得确认信号后立即释放其请求。外设取消断言请求后，DMA\n控制器将释放确认。如果有更多的请求，外设可以发起下一个事务。</p>\n<p>总之，每次 DMA 传输由三个操作组成：</p>\n<ul>\n<li>从外设数据寄存器或通过内部当前外设/内存地址寄存器寻址的内存中的某个位置加载数据。首次传输的起始地址是\nDMA_CPARx 或 DMA_CMARx 寄存器中的外设/内存基地址</li>\n<li>存储加载到外设数据寄存器中的数据，或者通过内部当前外设/内存地址寄存器所寻址的内存中的某个位置的数据首次传输的起始地址是\nDMA_CPARx 或 DMA_CMARx 寄存器中的外设/内存基地址</li>\n<li>DMA_CNDTRx 寄存器递减，其中包含尚未执行的事务数。</li>\n</ul>\n<h3 id=\"仲裁器\">仲裁器</h3>\n<p>仲裁器根据通道请求的优先级管理通道请求，并启动外设/内存访问序列。</p>\n<p>优先级分两个阶段管理：</p>\n<ul>\n<li>软件：每个通道的优先级可以在 DMA_CCRx 寄存器中配置。共有 4 个等级：\n<ul>\n<li>Very high priority</li>\n<li>High priority</li>\n<li>Medium priority</li>\n<li>Low priority</li>\n</ul></li>\n<li>硬件：如果 2\n个请求具有相同的软件优先级，则编号最小的通道将获得优先级，而不是编号最高的通道。例如，通道\n2 优先于通道 4。</li>\n</ul>\n<h3 id=\"dma-通道\">DMA 通道</h3>\n<p>每个通道都可以处理位于固定地址的外设寄存器和内存地址之间的 DMA\n传输。要传输的数据量（最多\n65535）是可编程的。包含要传输的数据项数量的寄存器在每次传输后递减。</p>\n<h4 id=\"数据大小\">数据大小</h4>\n<p>外设和内存传输数据大小是可以通过 DMA_CCRx 寄存器的 PSIZE 和 MSIZE\n位设置的。</p>\n<h4 id=\"指针递增\">指针递增</h4>\n<p>根据 DMA_CCRx 寄存器中的 PINC 和 MINC\n位，外设和内存指针可以在每个事务之后自动进行增加。如果使能了增量模式，则下一次传输的地址将根据选择的数据大小在上一次的地址上增加\n1、2 或 4。第一次传输的地址在 DMA_CPARx/DMA_CMARx\n寄存器中。在传输过程中，这些寄存器的值将保持初始值不变。软件不可访问当前传输地址。</p>\n<p>如果通道被配置位非环形模式，在最后一次传输之后，不再为 DMA\n请求提供服务。若要加载新的待传输数据项到 DMA_CNDTRx 寄存器，则需要禁用\nDMA 通道。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果 DMA 通道被禁用，DMA 寄存器并不会被重置。在通道配置阶段，DMA\n寄存器(DMA_CCRx, DMA_CPARx and DMA_CMARx) 保持编程的初始值。</p></blockquote>\n<p>在环形模式下，最后一次传输之后，DMA_CNDTRx\n寄存器会自动加载初始编程值。当前的内部地址寄存器重新加载\nDMA_CPARx/DMA_CMARx 寄存器中的基地址值。</p>\n<h4 id=\"通道配置步骤\">通道配置步骤</h4>\n<ul>\n<li>在 DMA_CPARx\n寄存器中设置外设寄存器地址。数据将在外设事件发生后从这个地址移动到内存，或从内存移动到这个地址。</li>\n<li>在 DMA_CMARx\n寄存器中设置内存地址。在外设事件发生之后，将数据写入这个内存，或从中读取数据。</li>\n<li>配置 DMA_CNDTRx\n寄存器中待传输数据的总数。在每个外设事件之后，这个值将递减。</li>\n<li>配置通道优先级，DMA_CCRx 寄存器的 PL[1:0] 位</li>\n<li>在 DMA_CCRx 寄存器中配置数据传输方向、Circular\n模式、外设&amp;内存增量模式、外设&amp;内存数据大小和中断（半传输或完成传输之后）</li>\n<li>使能通道，DMA_CCRx 寄存器的 ENABLE 位</li>\n</ul>\n<p>一旦通道使能，它可以为连接到该通道上外设的任何请求提供服务。</p>\n<p>传输一半的字节后，将设置半传输标志(HTIF)，如果设置了半传输中断启用位(HTIE)，则会生成中断。在传输结束时，设置传输完成标志(TCIF)，如果设置了传输完成中断启用位(TCIE)，则会生成中断。</p>\n<h4 id=\"circular-模式\">Circular 模式</h4>\n<p>Circular 模式用于处理环形缓冲区和连续数据流。DMA_CCRx 寄存器的 CIRC\n位用于使能该模式。当激活环形模式，待传输数据的数量自动加载为初始值，这个初始值是在通道配置阶段编程写入的，将持续为\nDMA 请求提供服务。</p>\n<h4 id=\"memory-to-memory-模式\">Memory-to-memory 模式</h4>\n<p>DMA通道也可以在没有外设请求触发的情况下工作。这个模式就是 Memory to\nMemory 模式。</p>\n<p>当设置了 DMA_CCRx 寄存器的 MEM2MEM 位，然后设置 DMA_CCRx\n寄存器中的使能位(EN)，则通道在软件启用后立即启动传输。一旦 DMA_CNDTRx\n寄存器达到零，传输就会停止。Memory to Memory 模式不能与 Circular\n模式同时使用。</p>\n<h3 id=\"可编程的数据宽度数据对齐或大小端\">可编程的数据宽度，数据对齐或大小端</h3>\n<p>当 PSIZE 和 MSIZE 不相等时，DMA执行如下的数据对齐。</p>\n<p><img src=\"/img/STM32-DMA/DMA%20data%20width%20and%20endian%20behavior.png\"></p>\n<h4 id=\"寻址不支持字节或半字写操作的-ahb-外设\">寻址不支持字节或半字写操作的\nAHB 外设</h4>\n<p>当 DMA 开始 AHB 字节或半字写操作时，数据在 HWDATA[31:0]\n总线的未使用通道上复制。因此，当使用的 AHB\n从外设不支持字节或半字写入操作（当外设不使用 HSIZE\n时）并且不产生任何错误时，DMA 将写入 32 个 HWDATA\n位，如下面的两个示例所示：</p>\n<ul>\n<li>为了写半字 <code>0xABCD</code>，DMA 将 HWDATA 总线设置为\n<code>0xABCDABCD</code>，HSIZE = halfword</li>\n<li>为了写入字节 <code>0xAB</code>，DMA 将 HWDATA 总线设置为\n<code>0xABABABAB</code>，HSIZE = Byte</li>\n</ul>\n<p>假设 AHB/APB 桥是 AHB 32 位从外设，不考虑 HSIZE\n数据，它将按以下方式将任何 AHB 字节或半字操作转换为 32位 APB 操作：</p>\n<ul>\n<li>AHB 字节数据 <code>0xB0</code> 写入到 0x0(0x1/0x2/0x3)的操作将转换为\nAPB 字数据 <code>0xB0B0B0B0</code> 写入到 0x0</li>\n<li>AHB 半字数据 <code>0xB1B0</code> 写入到 0x0(0x1)的操作将转换为 APB\n字数据 <code>0xB1B0B1B0</code> 写入到 0x0</li>\n</ul>\n<p>例如，要写入 APB 备份寄存器（与 32 位地址边界对齐的 16\n位寄存器），必须将 MSIZE 配置为 <code>16-bit</code>，将 PSIZE 配置为\n<code>32-bit</code>。</p>\n<h3 id=\"错误管理\">错误管理</h3>\n<p>读取或写入保留的地址空间可能会产生 DMA 传输错误。当 DMA\n读取或写入访问期间发生 DMA\n传输错误时，错误通道通过硬件清除相应通道配置寄存器(DMA_CCRx) 中的 EN\n位自动禁用。设置DMA_IFR 寄存器中的通道传输错误中断标志(TEIF)，如果设置了\nDMA_CCRx 寄存器中的传输错误中断使能位(TEIE)，则生成中断。</p>\n<h3 id=\"中断\">中断</h3>\n<p>中断可以在每个 DMA\n通道的半传输、传输完成或传输错误三种情况下产生。</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Interrupt event</th>\n<th>Event flag</th>\n<th>Enable Control bit</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Half-transfer</td>\n<td>HTIF</td>\n<td>HTIE</td>\n</tr>\n<tr class=\"even\">\n<td>Transfer complete</td>\n<td>TCIF</td>\n<td>TCIE</td>\n</tr>\n<tr class=\"odd\">\n<td>Transfer error</td>\n<td>TEIF</td>\n<td>TEIE</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"dma-请求映射\">DMA 请求映射</h3>\n<h4 id=\"dma1-控制器\">DMA1 控制器</h4>\n<p>来自外设(TIMx[1, 2, 3, 4]、ADC1、SPI1、SPI/I2S2、I2Cx[1, 2] 和\nUSARTx[1, 2, 3])的 7 个请求在进入 DMA1 之前只需在逻辑上进行\nOR，这意味着一次只能启用一个请求。</p>\n<p>外设 DMA 请求可以通过在相应外设的寄存器中对 DMA\n控制位进行编程来独立激活/取消激活。</p>\n<p><img src=\"/img/STM32-DMA/DMA1%20request%20mapping.png\"></p>\n<p><img src=\"/img/STM32-DMA/Summary%20of%20DMA1%20requests.png\"></p>\n<h4 id=\"dma2-控制器\">DMA2 控制器</h4>\n<p>来自外设(TIMx[5, 6, 7, 8]、ADC3、SPI/I2S3、UART4、DAC_Channel[1, 2]\n和 SDIO)的 5 个请求在进入 DMA1 之前只需在逻辑上进行\nOR，这意味着一次只能启用一个请求。</p>\n<p>外设 DMA 请求可以通过在相应外设的寄存器中对 DMA\n控制位进行编程来独立激活/取消激活。</p>\n<p><img src=\"/img/STM32-DMA/DMA2%20request%20mapping.png\"></p>\n<p><img src=\"/img/STM32-DMA/Summary%20of%20DMA2%20requests.png\"></p>\n<h2 id=\"dma-寄存器\">DMA 寄存器</h2>\n<h3 id=\"dma-中断状态寄存器-dma_isr\">DMA 中断状态寄存器 (DMA_ISR)</h3>\n<p>Address offset: 0x00 Reset value: 0x0000 0000</p>\n<p><img src=\"/img/STM32-DMA/DMA_ISR.png\"></p>\n<p><code>TEIFx</code>: 通道(x=1..7)传输错误标志</p>\n<p>由硬件设置。通过软件将 <code>1</code> 写入 DMA_IFCR\n寄存器中的相应位来清除它。</p>\n<ul>\n<li><code>0</code> - 通道 x 没有传输错误(TE)</li>\n<li><code>1</code> - 通道 x 上发生传输错误(TE)</li>\n</ul>\n<p><code>HTIFx</code>: 通道(x=1..7)半传输标志</p>\n<p>由硬件设置。通过软件将 <code>1</code> 写入 DMA_IFCR\n寄存器中的相应位来清除它。</p>\n<ul>\n<li><code>0</code> - 通道 x 上没有半传输(HT)事件</li>\n<li><code>1</code> - 通道 x 上发生了半传输(HT)事件</li>\n</ul>\n<p><code>TCIFx</code>: 通道(x=1..7)传输完成标志</p>\n<p>由硬件设置。通过软件将 <code>1</code> 写入 DMA_IFCR\n寄存器中的相应位来清除它。</p>\n<ul>\n<li><code>0</code> - 通道 x 上没有传输完成(TC)事件</li>\n<li><code>1</code> - 通道 x 上发生了传输完成(TC)事件</li>\n</ul>\n<p><code>GIFx</code>: 通道(x=1..7)全局中断标志</p>\n<p>由硬件设置。通过软件将 <code>1</code> 写入 DMA_IFCR\n寄存器中的相应位来清除它。</p>\n<ul>\n<li><code>0</code> - 通道 x 上没有TE、HT或TC事件</li>\n<li><code>1</code> - 通道 x 发生了TE、HT或TC事件</li>\n</ul>\n<h3 id=\"dma中断标志清除寄存器-dma_ifcr\">DMA中断标志清除寄存器\n(DMA_IFCR)</h3>\n<p>Address offset: 0x04 Reset value: 0x0000 0000</p>\n<p><img src=\"/img/STM32-DMA/DMA_IFCR.png\"></p>\n<p><code>CTEIFx</code>: 通道(x=1..7)传输错误中断标志清除</p>\n<p>由软件设置和清除。</p>\n<ul>\n<li><code>0</code> - 无作用</li>\n<li><code>1</code> - 清除 DMA_ISR 寄存器中相应的 TEIF 标志</li>\n</ul>\n<p><code>CHTIFx</code>: 通道(x=1..7)半传输中断标志清除</p>\n<p>由软件设置和清除。</p>\n<ul>\n<li><code>0</code> - 无作用</li>\n<li><code>1</code> - 清除 DMA_ISR 寄存器中相应的 HTML 标志</li>\n</ul>\n<p><code>CTCIFx</code>: 通道(x=1..7)传输完成中断标志清除</p>\n<p>由软件设置和清除。</p>\n<ul>\n<li><code>0</code> - 无作用</li>\n<li><code>1</code> - 清除 DMA_ISR 寄存器中相应的 TCIF 标志</li>\n</ul>\n<p><code>CGIFx</code>: 通道(x=1..7)全局中断标志清除</p>\n<p>由软件设置和清除。</p>\n<ul>\n<li><code>0</code> - 无作用</li>\n<li><code>1</code> - 清除 DMA_ISR 寄存器中相应的TCIF 标志</li>\n</ul>\n<h3 id=\"dma通道-x-配置寄存器-dma_ccrx-xchannel-number\">DMA通道 x\n配置寄存器 (DMA_CCRx) (x=channel number)</h3>\n<p>Address offset: 0x08 + 0d20 × (channel number – 1) Reset value:\n0x0000 0000</p>\n<p><img src=\"/img/STM32-DMA/DMA_CCRx.png\"></p>\n<p><code>MEM2MEM</code>: Memory to memory 模式</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>PL[1:0]</code>: 通道优先级</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>00</code> - Low</li>\n<li><code>01</code> - Medium</li>\n<li><code>10</code> - High</li>\n<li><code>11</code> - Very high</li>\n</ul>\n<p><code>MSIZE[1:0]</code>: Memory size</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>00</code> - 8-bits</li>\n<li><code>01</code> - 16-bits</li>\n<li><code>10</code> - 32-bits</li>\n<li><code>11</code> - Reserved</li>\n</ul>\n<p><code>PSIZE[1:0]</code>: Peripheral size</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>00</code> - 8-bits</li>\n<li><code>01</code> - 16-bits</li>\n<li><code>10</code> - 32-bits</li>\n<li><code>11</code> - Reserved</li>\n</ul>\n<p><code>MINC</code>: Memory increment mode</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>PINC</code>: Peripheral increment mode</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>CIRC</code>: Circular mode</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>DIR</code>: 数据传输方向</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - 从外设读取</li>\n<li><code>1</code> - 从内存读取</li>\n</ul>\n<p><code>TEIE</code>: 传输错误中断使能</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>HTIE</code>: 半传输中断使能</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>TCIE</code>: 传输完成中断使能</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<p><code>EN</code> - 通道使能</p>\n<p>由软件设置和清除</p>\n<ul>\n<li><code>0</code> - Disabled</li>\n<li><code>1</code> - Enabled</li>\n</ul>\n<h3 id=\"dma-通道-x-数据数量寄存器-dma_cndtrx-xchannel-number\">DMA 通道 x\n数据数量寄存器 (DMA_CNDTRx) (x=channel number)</h3>\n<p>Address offset: 0x0C + 0d20 × (channel number – 1) Reset value:\n0x0000 0000</p>\n<p><img src=\"/img/STM32-DMA/DMA_CNDTRx.png\"></p>\n<p><code>NDT[15:0]</code>: 待传输的数据数量</p>\n<p>要传输的数据数量(0 ~\n65535)。此寄存器只能在禁用通道时写入。启用通道后，此寄存器是只读的，指示要传输的剩余字节。此寄存器在每次\nDMA\n传输后递减。传输完成后，如果通道配置为自动重载，则此寄存器可以保持为零，也可以通过先前编程的值自动重新加载模式。\n如果此寄存器为零，则无论通道是否启用，都无法提供任何事务。</p>\n<h3 id=\"dma通道-x-外设地址寄存器dma_cparx-xchannel-number\">DMA通道 x\n外设地址寄存器(DMA_CPARx) (x=channel number)</h3>\n<p>Address offset: 0x10 + 0d20 × (channel number – 1) Reset value:\n0x0000 0000</p>\n<p>当通道启用时，不能写入此寄存器。</p>\n<p><img src=\"/img/STM32-DMA/DMA_CPARx.png\"></p>\n<p><code>PA[31:0]</code>: 外设地址</p>\n<p>读取/写入数据的外设数据寄存器的基址。</p>\n<ul>\n<li>当 PSIZE 为 <code>01</code> (16位)时，忽略 PA[0]\n位。访问自动对齐到半字地址</li>\n<li>当 PSIZE 为 <code>10</code> (32位)时，忽略 PA[1:0]\n位。访问将自动与字地址对齐。</li>\n</ul>\n<h3 id=\"dma通道-x-内存地址寄存器-dma_cmarx-xchannel-number\">DMA通道 x\n内存地址寄存器 (DMA_CMARx) (x=channel number)</h3>\n<p>Address offset: 0x14 + 0d20 × (channel number – 1) Reset value:\n0x0000 0000</p>\n<p>当通道启用时，不能写入此寄存器。</p>\n<p><img src=\"/img/STM32-DMA/DMA_CMARx.png\"></p>\n<p><code>MA[31:0]</code>: 内存地址</p>\n<p>读取/写入数据的内存区域的基址。</p>\n<ul>\n<li>当 MSIZE为 <code>01</code> (16位)时，忽略 MA[0]\n位。访问自动对齐到半字地址</li>\n<li>当 MSIZE为 <code>10</code> (32位)时，忽略 MA[1:0]\n位。访问将自动与字地址对齐。</li>\n</ul>\n","text":"DMA 的介绍 直接内存访问(Direct memory accesss，DMA) 用于在外设和内存之间以及内存到内存之间提供高速的数据传输。数据可以通过 DMA 快速传输，不需要任何 CPU 操作。这样可以节约 CPU 资源。 两个 DMA 控制器总共有 12 个通道（7 个用...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"单片机","slug":"单片机","count":4,"path":"api/categories/单片机.json"}],"tags":[{"name":"STM32","slug":"STM32","count":4,"path":"api/tags/STM32.json"},{"name":"DMA","slug":"DMA","count":1,"path":"api/tags/DMA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dma-%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">DMA 的介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dma-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">DMA 的主要特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dma-%E5%8A%9F%E8%83%BD%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">DMA 功能描述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma-%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">DMA 事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%B2%E8%A3%81%E5%99%A8\"><span class=\"toc-text\">仲裁器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma-%E9%80%9A%E9%81%93\"><span class=\"toc-text\">DMA 通道</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">数据大小</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E9%80%92%E5%A2%9E\"><span class=\"toc-text\">指针递增</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E9%81%93%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">通道配置步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#circular-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">Circular 模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#memory-to-memory-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">Memory-to-memory 模式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90%E6%88%96%E5%A4%A7%E5%B0%8F%E7%AB%AF\"><span class=\"toc-text\">可编程的数据宽度，数据对齐或大小端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%BB%E5%9D%80%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AD%97%E8%8A%82%E6%88%96%E5%8D%8A%E5%AD%97%E5%86%99%E6%93%8D%E4%BD%9C%E7%9A%84-ahb-%E5%A4%96%E8%AE%BE\"><span class=\"toc-text\">寻址不支持字节或半字写操作的\nAHB 外设</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">错误管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">中断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma-%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">DMA 请求映射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dma1-%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">DMA1 控制器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dma2-%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">DMA2 控制器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dma-%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">DMA 寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma-%E4%B8%AD%E6%96%AD%E7%8A%B6%E6%80%81%E5%AF%84%E5%AD%98%E5%99%A8-dma_isr\"><span class=\"toc-text\">DMA 中断状态寄存器 (DMA_ISR)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma%E4%B8%AD%E6%96%AD%E6%A0%87%E5%BF%97%E6%B8%85%E9%99%A4%E5%AF%84%E5%AD%98%E5%99%A8-dma_ifcr\"><span class=\"toc-text\">DMA中断标志清除寄存器\n(DMA_IFCR)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma%E9%80%9A%E9%81%93-x-%E9%85%8D%E7%BD%AE%E5%AF%84%E5%AD%98%E5%99%A8-dma_ccrx-xchannel-number\"><span class=\"toc-text\">DMA通道 x\n配置寄存器 (DMA_CCRx) (x&#x3D;channel number)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma-%E9%80%9A%E9%81%93-x-%E6%95%B0%E6%8D%AE%E6%95%B0%E9%87%8F%E5%AF%84%E5%AD%98%E5%99%A8-dma_cndtrx-xchannel-number\"><span class=\"toc-text\">DMA 通道 x\n数据数量寄存器 (DMA_CNDTRx) (x&#x3D;channel number)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma%E9%80%9A%E9%81%93-x-%E5%A4%96%E8%AE%BE%E5%9C%B0%E5%9D%80%E5%AF%84%E5%AD%98%E5%99%A8dma_cparx-xchannel-number\"><span class=\"toc-text\">DMA通道 x\n外设地址寄存器(DMA_CPARx) (x&#x3D;channel number)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dma%E9%80%9A%E9%81%93-x-%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E5%AF%84%E5%AD%98%E5%99%A8-dma_cmarx-xchannel-number\"><span class=\"toc-text\">DMA通道 x\n内存地址寄存器 (DMA_CMARx) (x&#x3D;channel number)</span></a></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"矩阵的导数运算(1)","uid":"d97c1a68285e6aac869410b1223c6673","slug":"Math/矩阵的导数运算1","date":"2023-02-10T08:37:00.000Z","updated":"2023-04-17T07:50:26.463Z","comments":true,"path":"api/articles/Math/矩阵的导数运算1.json","keywords":null,"cover":"/img/bg/math.jpg","text":"矩阵的导数运算 (1) 标量方程对向量的导数： 定义： - 标量 [] - 向量 [] 求导结果的行数与分母相同，称为分母布局(Denominator Layout) 行数和分子相同，称为分子布局(Numerator Layout) 例 ， 分母布局 分子布局 向量方程对向量的导...","link":"","photos":[],"count_time":{"symbolsCount":241,"symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":3,"path":"api/categories/数学.json"}],"tags":[{"name":"矩阵求导","slug":"矩阵求导","count":1,"path":"api/tags/矩阵求导.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"STM32 中断和事件","uid":"123422951594fa2cdc8f869cafbfa775","slug":"MCU/STM32-IAE","date":"2022-10-12T09:36:00.000Z","updated":"2023-05-06T11:34:51.397Z","comments":true,"path":"api/articles/MCU/STM32-IAE.json","keywords":null,"cover":"/img/STM32-GPIO/STM32-logo.jpg","text":"嵌套向量中断控制器 (NVIC) 特点 68条 (不包括 16 条 Cortex®-M3 中断线) 16 个可编程优先级 (使用 4 位中断优先级) 低延迟异常和中断处理 系统控制寄存器的实现 NVIC 和处理器核心接口紧密耦合，使得低延迟中断处理和高效处理延迟到达的中断成为可能...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"单片机","slug":"单片机","count":4,"path":"api/categories/单片机.json"}],"tags":[{"name":"STM32","slug":"STM32","count":4,"path":"api/tags/STM32.json"},{"name":"中断和事件","slug":"中断和事件","count":1,"path":"api/tags/中断和事件.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}