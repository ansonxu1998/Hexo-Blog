{"title":"MCU Bootloader","uid":"406f35918def0d366ae46a92ad742516","slug":"MCU/MCU_Bootloader","date":"2023-06-30T03:01:00.000Z","updated":"2023-10-08T03:36:21.308Z","comments":true,"path":"api/articles/MCU/MCU_Bootloader.json","keywords":null,"cover":"/img/STM32-GPIO/STM32-logo.jpg","content":"<h2 id=\"中断向量地址偏移\">中断向量地址偏移</h2>\n<p>① 重新设置 <code>_vector</code> 地址</p>\n<p>② 从 <code>new vector</code> 取出第 1 个值赋给 SP</p>\n<p>③ 从 <code>new vector</code> 取出第 2 个值赋给 PC</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">start_app\tPROC\n\t\tEXPORT\tstart_app\n\t\t; 设置异常向量地址为 0x08040000\n\t\tldr r3, &#x3D;0xE000ED08 ; 寄存器地址\n\t\tstr r0, [r3]\n\t\t\n\t\tldr sp,\t[r0]\t\t\n\t\tldr r1, [r0, #4]\n\t\t\n\t\tBX r1\n\t\tENDP\n\t\tEND</code></pre>\n<p>Bootloader 主函数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">extern void start_app(unsigned int new_vector);\n\nint main()&#123;\n    unsigned int new_vector &#x3D; 0x08040000;\n    start_app(new_vector);\n    return 0;\n&#125;</code></pre>\n<h2 id=\"app-复制自身代码到-ram-中\">APP 复制自身代码到 RAM 中</h2>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">Reset_Handler\tPROC\n\t\t\t\tEXPORT\tReset_Handler\n\t\t\t\tIMPORT\tmymain\n\t\t\t\tIMPORT\tcopy_myself\n\t\t\t\tIMPORT\t|Image$$ER_IROM1$$Length|\n\t\t\t\t\n\t\t\t\tadr\tr0, Reset_Handler\t; r0 &#x3D; 0x08040000\n\t\t\t\tbic\tr0, r0, #0xff\n\t\t\t\t\n\t\t\t\tldr\tr1, &#x3D;__Vectors\t; r1 &#x3D; 0x20000000\n\t\t\t\tldr r2, &#x3D; |Image$$ER_IROM1$$Length| ; LENGTH\n\t\t\t\t\n\t\t\t\tBL\tcopy_myself\n\t\t\t\tBL \tmymain\n\t\t\t\t; 绝对跳转\n\t\t\t\t; lar pc, &#x3D;mymain\n\t\t\t\t\n\t\t\t\tENDP\n\t\t\t\tEND</code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void copy_myself(int *from, int *to, int len)&#123;\n    int i,\n    for (i &#x3D; 0; i &lt; len&#x2F;4 + 1; i++)&#123;\n        to[i] &#x3D; from[i];\n    &#125;\n&#125;</code></pre>\n<h2 id=\"为-app.bin-添加-u-boot-头部\">为 APP.bin 添加 U-boot 头部</h2>\n<p>镜像头部结构体：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">typedef struct image_header&#123;\n    __be32\tih_magic;\t&#x2F;* Image Header Magic Number *&#x2F;\n    __be32\tih_hcrc;\t&#x2F;* Image Header\tCRC Checksum *&#x2F;\n    __be32\tih_time;\t&#x2F;* Image Header\tCreation Timestamp *&#x2F;\n    __be32\tih_size;\t&#x2F;* Image Data Size *&#x2F;\n    __be32 \tih_load;\t&#x2F;* Data\tLoad Address *&#x2F;\n    __be32\tih_ep;\t\t&#x2F;* Entry Point Address *&#x2F;\n    __be32\tih_dcrc;\t&#x2F;* Image Data CRC  Checksum *&#x2F;\n    uint8_t\tih_os;\t\t&#x2F;* Operating System *&#x2F;\n    uint8_t ih_arch;\t&#x2F;* CPU architecture *&#x2F;\n    uint8_t ih_type;\t&#x2F;* Image Type *&#x2F;\n    uint8_t ih_comp;\t&#x2F;* Compression Type *&#x2F;\n    uint8_t ih_name[IH_NMLEN] &#x2F;* Image Nmae *&#x2F;\n&#125;image_header_t;</code></pre>\n<p>使用 <code>mkimage</code> 工具添加头部：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">Usage: .&#x2F;mkimage -l image\n          -l &#x3D;&#x3D;&gt; list image header information\n.&#x2F;mkimage [-x] -A arch -O os -T type -C comp -a addr -e ep -n name -d data_file\n[:data_file...] image\n          -A &#x3D;&#x3D;&gt; set architecture to &#39;arch&#39;\n          -O &#x3D;&#x3D;&gt; set operating system to &#39;os&#39;\n          -T &#x3D;&#x3D;&gt; set image type to &#39;type&#39;\n          -C &#x3D;&#x3D;&gt; set compression type &#39;comp&#39;\n          -a &#x3D;&#x3D;&gt; set load address to &#39;addr&#39; (hex)\n          -e &#x3D;&#x3D;&gt; set entry point to &#39;ep&#39; (hex)\n          -n &#x3D;&#x3D;&gt; set image name to &#39;name&#39;\n          -d &#x3D;&#x3D;&gt; use image data from &#39;datafile&#39;\n          -x &#x3D;&#x3D;&gt; set XIP (execute in place)\n       .&#x2F;mkimage [-D dtc_options] [-f fit-image.its|-F] fit-image\n          -D &#x3D;&gt; set all options for device tree compiler\n          -f &#x3D;&gt; input filename for FIT source\n</code></pre>\n<p><code>-A</code>：指定 CPU 架构</p>\n<p>Alpha、ARM、Intel x86、IA64、MIPS、MIPS 64 Bit、PowerPC、IBM S390、SuperH、SPARC、SPARC 64 Bit、MC68000</p>\n<p><code>-O</code>：指定操作系统</p>\n<p>openbsd、netbsd、freebsd、4_4bsd、linux、svr4、esix、solaris、irix、sco、dell、ncr、lynxos、vxworks、psos、qnx、u-boot、rtems、artos</p>\n<p><code>-T</code>：指定映像类型</p>\n<p>standalone、kernel、ramdisk、multi、firmware、script、filesystem</p>\n<p><code>-C</code>：映像压缩方式</p>\n<p>none、gzip、bzip2</p>\n<p><code>-a</code>：指定映象在内存中的<strong>加载地址</strong></p>\n<p><code>-e</code>：指定映象运行的<strong>入口点地址</strong></p>\n<p><code>-n</code>： 指定映象名 <code>-d</code>： 指定制作映象的源文件</p>\n<p>Bootloader 解析头部信息：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#define IH_NMLEN\t32\t\t&#x2F;* Image Name Length *&#x2F;\ntypedef unsigned int __be32;\ntypedef unsigned char uint8_t;\ntypedef struct image_header&#123;\n    __be32\tih_magic;\t&#x2F;* Image Header Magic Number *&#x2F;\n    __be32\tih_hcrc;\t&#x2F;* Image Header\tCRC Checksum *&#x2F;\n    __be32\tih_time;\t&#x2F;* Image Header\tCreation Timestamp *&#x2F;\n    __be32\tih_size;\t&#x2F;* Image Data Size *&#x2F;\n    __be32 \tih_load;\t&#x2F;* Data\tLoad Address *&#x2F;\n    __be32\tih_ep;\t\t&#x2F;* Entry Point Address *&#x2F;\n    __be32\tih_dcrc;\t&#x2F;* Image Data CRC  Checksum *&#x2F;\n    uint8_t\tih_os;\t\t&#x2F;* Operating System *&#x2F;\n    uint8_t ih_arch;\t&#x2F;* CPU architecture *&#x2F;\n    uint8_t ih_type;\t&#x2F;* Image Type *&#x2F;\n    uint8_t ih_comp;\t&#x2F;* Compression Type *&#x2F;\n    uint8_t ih_name[IH_NMLEN]; &#x2F;* Image Nmae *&#x2F;\n&#125;image_header_t;\n\n&#x2F;&#x2F; 字节序转换\nunsigned int be32_to_cpu(unsigned int x)&#123;\n    unsigned char *p &#x3D; (unsigned char *)&amp;x;\n    unsigned int le;\n    le &#x3D; (p[0] &lt;&lt; 24) + (p[1] &lt;&lt; 16) + (p[2] &lt;&lt; 8) + p[3];\n    return le;\n&#125; \n\n&#x2F;&#x2F; 拷贝程序\nvoid copy_app(int *from, int *to, int len)&#123;\n    int i;\n    for (i &#x3D; 0; i &lt; len&#x2F;4 + 1; i++)&#123;\n        to[i] &#x3D; from[i];\n    &#125;\n&#125;\nvoid relocate_start_app(unsigned int pos)&#123;\n    image_header_t *head;\n    unsigned int load;\n    unsigned int size;\n    unsigned int new_pos &#x3D; pos+sizeof(image_header_t);\n    &#x2F;* 读出头部 *&#x2F;\n    head &#x3D; (image_header_t *)pos;\n    &#x2F;* 解析头部 *&#x2F;\n    load &#x3D; be32_to_cpu(head-&gt;ih_load);\n    size &#x3D; be32_to_cpu(head-&gt;ih_size);\n    &#x2F;* 拷贝程序到 RAM *&#x2F;\n    copy_app((int *)new_pos, (int *)load, size); &#x2F;&#x2F; 偏移一个头部的大小\n    &#x2F;* 跳转执行 *&#x2F;\n    start_app(new_pos);\n&#125;</code></pre>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">start_app\tPROC\n\t\t\tEXPORT\tstart_app\n\t\t\tldr r3, &#x3D;0xE000ED08\n\t\t\tstr r0, [r3]\n\t\t\t\n\t\t\tldr\tsp, [r0]\n\t\t\tldr\tr1, [r0, #4]\n\t\t\t\n\t\t\tbx\tr1\n\t\t\tENDP\n\t\t\tEND</code></pre>\n<h2 id=\"若-mcu-不支持中断向量地址偏移\">若 MCU 不支持中断向量地址偏移</h2>\n<p>在 Bootloader 中实现必要的中断向量：</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">&#x2F;* file: start.s *&#x2F;\n                PRESERVE8\n                THUMB\n\n\n; Vector Table Mapped to Address 0 at Reset\n                AREA    RESET, DATA, READONLY\n\t\t\t\tEXPORT  __Vectors\n\t\t\t\t;IMPORT SVC_Handler\n\t\t\t\tIMPORT PendSV_Handler\n\t\t\t\tIMPORT SysTick_Handler\n\t\t\t\tIMPORT USART1_IRQHandler\n\t\t\t\tIMPORT USART3_IRQHandler\n\t\t\t\tIMPORT EXTI15_10_IRQHandler\n\t\t\t\tIMPORT TIM8_UP_IRQHandler\n\t\t\t\t\t\n__Vectors       DCD     0               ; Top of Stack\n                DCD     Reset_Handler              ; Reset Handler\n                DCD     0 ;NMI_Handler                ; NMI Handler\n                DCD     0 ;HardFault_Handler          ; Hard Fault Handler\n                DCD     0 ;MemManage_Handler          ; MPU Fault Handler\n                DCD     0 ;BusFault_Handler           ; Bus Fault Handler\n                DCD     0 ;UsageFault_Handler         ; Usage Fault Handler\n                DCD     0                          ; Reserved\n                DCD     0                          ; Reserved\n                DCD     0                          ; Reserved\n                DCD     0                          ; Reserved\n                DCD     SVC_Handler                ; SVCall Handler\n                DCD     0 ;DebugMon_Handler           ; Debug Monitor Handler\n                DCD     0                          ; Reserved\n                DCD     PendSV_Handler             ; PendSV Handler\n                DCD     SysTick_Handler            ; SysTick Handler\n\n                ; External Interrupts\n                DCD     0 ;WWDG_IRQHandler            ; Window Watchdog\n                DCD     0 ;PVD_IRQHandler             ; PVD through EXTI Line detect\n                DCD     0 ;TAMPER_IRQHandler          ; Tamper\n                DCD     0 ;RTC_IRQHandler             ; RTC\n                DCD     0 ;FLASH_IRQHandler           ; Flash\n                DCD     0 ;RCC_IRQHandler             ; RCC\n                DCD     0 ;EXTI0_IRQHandler           ; EXTI Line 0\n                DCD     0 ;EXTI1_IRQHandler           ; EXTI Line 1\n                DCD     0 ;EXTI2_IRQHandler           ; EXTI Line 2\n                DCD     0 ;EXTI3_IRQHandler           ; EXTI Line 3\n                DCD     0 ;EXTI4_IRQHandler           ; EXTI Line 4\n                DCD     0 ;DMA1_Channel1_IRQHandler   ; DMA1 Channel 1\n                DCD     0 ;DMA1_Channel2_IRQHandler   ; DMA1 Channel 2\n                DCD     0 ;DMA1_Channel3_IRQHandler   ; DMA1 Channel 3\n                DCD     0 ;DMA1_Channel4_IRQHandler   ; DMA1 Channel 4\n                DCD     0 ;DMA1_Channel5_IRQHandler   ; DMA1 Channel 5\n                DCD     0 ;DMA1_Channel6_IRQHandler   ; DMA1 Channel 6\n                DCD     0 ;DMA1_Channel7_IRQHandler   ; DMA1 Channel 7\n                DCD     0 ;ADC1_2_IRQHandler          ; ADC1 &amp; ADC2\n                DCD     0 ;USB_HP_CAN1_TX_IRQHandler  ; USB High Priority or CAN1 TX\n                DCD     0 ;USB_LP_CAN1_RX0_IRQHandler ; USB Low  Priority or CAN1 RX0\n                DCD     0 ;CAN1_RX1_IRQHandler        ; CAN1 RX1\n                DCD     0 ;CAN1_SCE_IRQHandler        ; CAN1 SCE\n                DCD     0 ;EXTI9_5_IRQHandler         ; EXTI Line 9..5\n                DCD     0 ;TIM1_BRK_IRQHandler        ; TIM1 Break\n                DCD     0 ;TIM1_UP_IRQHandler         ; TIM1 Update\n                DCD     0 ;TIM1_TRG_COM_IRQHandler    ; TIM1 Trigger and Commutation\n                DCD     0 ;TIM1_CC_IRQHandler         ; TIM1 Capture Compare\n                DCD     0 ;TIM2_IRQHandler            ; TIM2\n                DCD     0 ;TIM3_IRQHandler            ; TIM3\n                DCD     0 ;TIM4_IRQHandler            ; TIM4\n                DCD     0 ;I2C1_EV_IRQHandler         ; I2C1 Event\n                DCD     0 ;I2C1_ER_IRQHandler         ; I2C1 Error\n                DCD     0 ;I2C2_EV_IRQHandler         ; I2C2 Event\n                DCD     0 ;I2C2_ER_IRQHandler         ; I2C2 Error\n                DCD     0 ;SPI1_IRQHandler            ; SPI1\n                DCD     0 ;SPI2_IRQHandler            ; SPI2\n                DCD     USART1_IRQHandler          ; USART1\n                DCD     0 ;USART2_IRQHandler          ; USART2\n                DCD     USART3_IRQHandler          ; USART3\n                DCD     EXTI15_10_IRQHandler       ; EXTI Line 15..10\n                DCD     0 ;RTC_Alarm_IRQHandler        ; RTC Alarm through EXTI Line\n                DCD     0 ;USBWakeUp_IRQHandler       ; USB Wakeup from suspend\n                DCD     0 ;TIM8_BRK_IRQHandler        ; TIM8 Break\n                DCD     TIM8_UP_IRQHandler         ; TIM8 Update\n                DCD     0 ;TIM8_TRG_COM_IRQHandler    ; TIM8 Trigger and Commutation\n                DCD     0 ;TIM8_CC_IRQHandler         ; TIM8 Capture Compare\n                DCD     0 ;ADC3_IRQHandler            ; ADC3\n                DCD     0 ;FSMC_IRQHandler            ; FSMC\n                DCD     0 ;SDIO_IRQHandler            ; SDIO\n                DCD     0 ;TIM5_IRQHandler            ; TIM5\n                DCD     0 ;SPI3_IRQHandler            ; SPI3\n                DCD     0 ;UART4_IRQHandler           ; UART4\n                DCD     0 ;UART5_IRQHandler           ; UART5\n                DCD     0 ;TIM6_IRQHandler            ; TIM6\n                DCD     0 ;TIM7_IRQHandler            ; TIM7\n                DCD     0 ;DMA2_Channel1_IRQHandler   ; DMA2 Channel1\n                DCD     0 ;DMA2_Channel2_IRQHandler   ; DMA2 Channel2\n                DCD     0 ;DMA2_Channel3_IRQHandler   ; DMA2 Channel3\n                DCD     0 ;DMA2_Channel4_5_IRQHandler ; DMA2 Channel4 &amp; Channel5\n__Vectors_End\n\n__Vectors_Size  EQU  __Vectors_End - __Vectors\n\n\n\t\t\t\tAREA    |.text|, CODE, READONLY\n\n; Reset handler\nReset_Handler   PROC\n\t\t\t\tEXPORT  Reset_Handler             [WEAK]\n                IMPORT  mymain\n\t\t\t\tLDR SP, &#x3D;(0x20000000+0x10000)\n\t\t\t\tBL mymain\n                ENDP\n\nstart_app   PROC\n\t\t\t\tEXPORT  start_app\n\n\t\t\t\t; set vector base address as 0x08040000\n\t\t\t\t;ldr r3, &#x3D;0xE000ED08\n\t\t\t\t;str r0, [r3]\n\t\t\t\tldr sp, [r0]      ; read val from new vector\n\t\t\t\tldr r1, [r0, #4]  ; read val from &quot;new vector + 4“\n\t\t\t\tBX r1\n                ENDP\n\nSVC_Handler     PROC\n                EXPORT  SVC_Handler\n\t\t\t\tldr r0, &#x3D;(0x20000000 + 0x10000 - 4)\n\t\t\t\tldr r0, [r0]  ; r0 &#x3D; new_vector\n\t\t\t\tldr r0, [r0, #0x2c]  ; new SVC_Handler\n\t\t\t\tbx r0\n                ENDP\n\t\t\t\tEND</code></pre>\n<p>当中断产生时，Bootloader 中的中断向量跳转到 App 中的新的中断向量：</p>\n<p><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">typedef void (*exception_func)(void);\nstruct vectors &#123;\n\tunsigned int sp;\n\texception_func     Reset_Handler              ; \n\texception_func     NMI_Handler                ; \n\texception_func     HardFault_Handler          ; \n\texception_func     MemManage_Handler          ; \n\texception_func     BusFault_Handler           ; \n\texception_func     UsageFault_Handler         ; \n\texception_func     dummy0                     ; \n\texception_func     dummy1                     ; \n\texception_func     dummy2                     ; \n\texception_func     dummy3                     ; \n\texception_func     SVC_Handler                ; \n\texception_func     DebugMon_Handler           ; \n\texception_func     dummy4                     ; \n\texception_func     PendSV_Handler             ; \n\texception_func     SysTick_Handler            ; \n\n\t&#x2F;&#x2F; External Interrupts\n\texception_func     WWDG_IRQHandler            ; \n\texception_func     PVD_IRQHandler             ; \n\texception_func     TAMPER_IRQHandler          ; \n\texception_func     RTC_IRQHandler             ; \n\texception_func     FLASH_IRQHandler           ; \n\texception_func     RCC_IRQHandler             ; \n\texception_func     EXTI0_IRQHandler           ; \n\texception_func     EXTI1_IRQHandler           ; \n\texception_func     EXTI2_IRQHandler           ; \n\texception_func     EXTI3_IRQHandler           ; \n\texception_func     EXTI4_IRQHandler           ; \n\texception_func     DMA1_Channel1_IRQHandler   ; \n\texception_func     DMA1_Channel2_IRQHandler   ; \n\texception_func     DMA1_Channel3_IRQHandler   ; \n\texception_func     DMA1_Channel4_IRQHandler   ; \n\texception_func     DMA1_Channel5_IRQHandler   ; \n\texception_func     DMA1_Channel6_IRQHandler   ; \n\texception_func     DMA1_Channel7_IRQHandler   ; \n\texception_func     ADC1_2_IRQHandler          ; \n\texception_func     USB_HP_CAN1_TX_IRQHandler  ;  \n\texception_func     USB_LP_CAN1_RX0_IRQHandler ;  \n\texception_func     CAN1_RX1_IRQHandler        ; \n\texception_func     CAN1_SCE_IRQHandler        ; \n\texception_func     EXTI9_5_IRQHandler         ; \n\texception_func     TIM1_BRK_IRQHandler        ; \n\texception_func     TIM1_UP_IRQHandler         ; \n\texception_func     TIM1_TRG_COM_IRQHandler    ; \n\texception_func     TIM1_CC_IRQHandler         ; \n\texception_func     TIM2_IRQHandler            ; \n\texception_func     TIM3_IRQHandler            ; \n\texception_func     TIM4_IRQHandler            ; \n\texception_func     I2C1_EV_IRQHandler         ; \n\texception_func     I2C1_ER_IRQHandler         ; \n\texception_func     I2C2_EV_IRQHandler         ; \n\texception_func     I2C2_ER_IRQHandler         ; \n\texception_func     SPI1_IRQHandler            ; \n\texception_func     SPI2_IRQHandler            ; \n\texception_func     USART1_IRQHandler          ; \n\texception_func     USART2_IRQHandler          ; \n\texception_func     USART3_IRQHandler          ; \n\texception_func     EXTI15_10_IRQHandler       ; \n\texception_func     RTC_Alarm_IRQHandler       ;\n\texception_func     USBWakeUp_IRQHandler       ; \n\texception_func     TIM8_BRK_IRQHandler        ; \n\texception_func     TIM8_UP_IRQHandler         ; \n\texception_func     TIM8_TRG_COM_IRQHandler    ;\n\texception_func     TIM8_CC_IRQHandler         ; \n\texception_func     ADC3_IRQHandler            ; \n\texception_func     FSMC_IRQHandler            ; \n\texception_func     SDIO_IRQHandler            ; \n\texception_func     TIM5_IRQHandler            ; \n\texception_func     SPI3_IRQHandler            ; \n\texception_func     UART4_IRQHandler           ; \n\texception_func     UART5_IRQHandler           ; \n\texception_func     TIM6_IRQHandler            ; \n\texception_func     TIM7_IRQHandler            ; \n\texception_func     DMA2_Channel1_IRQHandler   ; \n\texception_func     DMA2_Channel2_IRQHandler   ; \n\texception_func     DMA2_Channel3_IRQHandler   ; \n\texception_func     DMA2_Channel4_5_IRQHandler ; \n&#125;;\n\n&#x2F;&#x2F; 存放新的中断向量地址的地址，确保该内存不会被占用\n#define RAM_END (0x20000000+0x10000-4)\n\n&#x2F;&#x2F; 设置跳转的新中断向量\nvoid set_new_vector(unsigned int new_pos)&#123;\n\t*((unsigned int *)RAM_END) &#x3D; new_pos;  &#x2F;* 0x20000000 *&#x2F;\n&#125;\n\nvoid PendSV_Handler(void)&#123;\n\tstruct vectors *new_vector &#x3D; (struct vectors *)(*((unsigned int *)RAM_END));\n\tnew_vector-&gt;PendSV_Handler();\n&#125;\n\nvoid SysTick_Handler(void)&#123;\n\tstruct vectors *new_vector &#x3D; (struct vectors *)(*((unsigned int *)RAM_END));\n\tnew_vector-&gt;SysTick_Handler();\n&#125;\n\nvoid USART1_IRQHandler(void)&#123;\n\tstruct vectors *new_vector &#x3D; (struct vectors *)(*((unsigned int *)RAM_END));\n\tnew_vector-&gt;USART1_IRQHandler();\n&#125;\n\nvoid USART3_IRQHandler(void)&#123;\n\tstruct vectors *new_vector &#x3D; (struct vectors *)(*((unsigned int *)RAM_END));\n\tnew_vector-&gt;USART1_IRQHandler();\n&#125;\n\nvoid EXTI15_10_IRQHandler(void)&#123;\n\tstruct vectors *new_vector &#x3D; (struct vectors *)(*((unsigned int *)RAM_END));\n\tnew_vector-&gt;EXTI15_10_IRQHandler();\n&#125;\n\nvoid TIM8_UP_IRQHandler(void)&#123;\n\tstruct vectors *new_vector &#x3D; (struct vectors *)(*((unsigned int *)RAM_END));\n\tnew_vector-&gt;TIM8_UP_IRQHandler();\n&#125;</code></pre></p>\n","text":"中断向量地址偏移 ① 重新设置 _vector 地址 ② 从 new vector 取出第 1 个值赋给 SP ③ 从 new vector 取出第 2 个值赋给 PC start_app PROC EXPORT start_app ; 设置异常向量地址为 0x08040000 ...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"STM32","slug":"STM32","count":2,"path":"api/categories/STM32.json"}],"tags":[{"name":"Bootloader","slug":"Bootloader","count":1,"path":"api/tags/Bootloader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E5%9C%B0%E5%9D%80%E5%81%8F%E7%A7%BB\"><span class=\"toc-text\">中断向量地址偏移</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#app-%E5%A4%8D%E5%88%B6%E8%87%AA%E8%BA%AB%E4%BB%A3%E7%A0%81%E5%88%B0-ram-%E4%B8%AD\"><span class=\"toc-text\">APP 复制自身代码到 RAM 中</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA-app.bin-%E6%B7%BB%E5%8A%A0-u-boot-%E5%A4%B4%E9%83%A8\"><span class=\"toc-text\">为 APP.bin 添加 U-boot 头部</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8B%A5-mcu-%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E5%9C%B0%E5%9D%80%E5%81%8F%E7%A7%BB\"><span class=\"toc-text\">若 MCU 不支持中断向量地址偏移</span></a></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"无感 FOC-扩展卡尔曼滤波观测器","uid":"3c1e105762b23aa3751ddcfe95ca126f","slug":"Control/无感FOC-扩展卡尔曼滤波观测器","date":"2023-07-10T07:17:00.000Z","updated":"2023-08-23T07:33:09.063Z","comments":true,"path":"api/articles/Control/无感FOC-扩展卡尔曼滤波观测器.json","keywords":null,"cover":"/img/bg/FOC.png","text":"电机状态方程 永磁同步电机在 坐标下的方程为： 其中 反电动势 为： 转速 和转子位置 的关系如下： 综上可得： 线性系统的状态观测器 确定状态观测器的状态变量为 卡尔曼观测器的输出矩阵 为： 故 矩阵为： 矩阵为： 将状态方程写成矩阵的形式： 由该系统是非线性系统，所以暂时无法...","link":"","photos":[],"count_time":{"symbolsCount":401,"symbolsTime":"1 mins."},"categories":[{"name":"自动控制","slug":"自动控制","count":2,"path":"api/categories/自动控制.json"}],"tags":[{"name":"FOC","slug":"FOC","count":1,"path":"api/tags/FOC.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OBD2 协议","uid":"6196392442c97458b57996bc517db85e","slug":"Automotive-Electronic/OBD2","date":"2023-06-28T02:36:00.000Z","updated":"2023-06-28T07:33:13.506Z","comments":true,"path":"api/articles/Automotive-Electronic/OBD2.json","keywords":null,"cover":"/img/OBD/OBD interface.svg","text":"Ref: OBD2 Explained - A Simple Intro [2023] OBD2 原始数据帧 OBD2 消息由标识符和数据组成。数据由于 Mode、PID 和 数据字节(A,B,C,D)组成。 Identifier - OBD 消息的标识符是标准的 11 位的，用...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"汽车电子","slug":"汽车电子","count":2,"path":"api/categories/汽车电子.json"}],"tags":[{"name":"汽车诊断协议","slug":"汽车诊断协议","count":1,"path":"api/tags/汽车诊断协议.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}