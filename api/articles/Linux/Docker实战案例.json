{"title":"Docker实战案例","uid":"7d5686ce3c9c17768b418785872c4c2b","slug":"Linux/Docker实战案例","date":"2022-06-30T07:13:00.000Z","updated":"2022-06-30T07:26:16.697Z","comments":true,"path":"api/articles/Linux/Docker实战案例.json","keywords":null,"cover":null,"content":"<h2 id=\"操作系统\">操作系统</h2>\n<h3 id=\"busybox\">BusyBox</h3>\n<p>BusyBox 是一个集成了一百多个最常用 Linux\n命令和工具（如cat、echo、grep、mount、telnet等）的精简工具箱，它只有几MB的大小，很方便进行各种快速验证，被誉为“Linux系统的瑞士军刀”。BusyBox\n可运行于多款 POSIX\n环境的操作系统中，如Linux（包括Android）、Hurd、FreeBSD等。</p>\n<p>下载 busybox：latest 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker pull busybox:latest</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"alpine\">Alpine</h3>\n<p>Alpine操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常的 Linux\n发行版，Alpine 采用了musl libc 和 BusyBox\n以减小系统的体积和运行时资源消耗，但功能上比BusyBox又完善得多，因此得到开源社区越来越多的青睐。</p>\n<h3 id=\"debianubuntu\">Debian/Ubuntu</h3>\n<p>Debian 和 Ubuntu 都是目前较为流行的 Debian\n系的服务器操作系统，十分适合研发场景。Docker Hub\n上提供了官方镜像，国内各大容器云服务也基本都提供了相应的支持。</p>\n<p>debian镜像很适合作为基础镜像，用于构建自定义镜像。</p>\n<p>当试图直接使用 apt-get 安装一个软件的时候，会提示\n<code>E：Unable to locate package</code>.</p>\n<p>这并非系统不支持 apt-get 命令。Docker镜像在制作时为了精简清除了 apt\n仓库信息，因此需要先执行 <code>apt-get update</code>\n命令来更新仓库信息。更新信息后即可成功通过 apt-get 命令来安装软件.</p>\n<h3 id=\"centosfedora\">CentOS/Fedora</h3>\n<p>CentOS 和 Fedora 都是基于 Redhat 的常见 Linux 分支。CentOS\n是目前企业级服务器的常用操作系统；Fedora 则主要面向个人桌面用户。</p>\n<p>Fedora 是由 Fedora Project 社区开发，红帽公司赞助的 Linux\n发行版。它的目标是创建一套新颖、多功能并且自由和开源的操作系统。</p>\n<h2 id=\"为镜像添加ssh服务\">为镜像添加SSH服务</h2>\n<h3 id=\"基于docker-commit命令创建容器\">基于docker\ncommit命令创建容器</h3>\n<ol type=\"1\">\n<li>准备工作</li>\n</ol>\n<p>使用 ubuntu: 14.04 镜像来创建一个容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -it ubuntu:14.04 /bin/bash</span><br></code></pre></div></td></tr></table></figure>\n<p>更新 apt 缓存，并安装 openssh-server:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">apt-get updata</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">apt-get install openshh-server -y</span><br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>配置 SSH 服务</li>\n</ol>\n<p>如果需要正常启动 SSH 服务，则目录 <code>/var/run/sshd</code>\n必须存在。手动创建它，并启动 SSH 服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">mkdir -p /var/run/sshd<br>/usr/sbin/sshd -D &amp;<br></code></pre></div></td></tr></table></figure>\n<p>查看容器的 22 端口，可见此端口已经处于监听状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">netstat -tunlp<br></code></pre></div></td></tr></table></figure>\n<p>修改 SSH 服务的安全登录配置，取消 pam 登录限制：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sed -ri &#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27; /etc/pam.d/sshd<br></code></pre></div></td></tr></table></figure>\n<p>在 root 用户目录下创建 .ssh\n目录，并复制需要登录的公钥信息（一般为本地主机用户目录下的\n.ssh/id_rsa.pub 文件，可由 ssh-keygen-t rsa 命令生成）到 authorized_keys\n文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">mkdir root/.ssh<br>vim /root/.ssh/authorized_keys<br></code></pre></div></td></tr></table></figure>\n<p>创建自动启动 SSH 服务的可执行文件 run.sh，并添加可执行权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">vim /run.sh<br>chmod +x run.sh<br></code></pre></div></td></tr></table></figure>\n<p>其中，run.sh 脚本内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>/usr/sbin/sshd -D<br></code></pre></div></td></tr></table></figure>\n<p>退出容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">exit<br></code></pre></div></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>保存镜像</li>\n</ol>\n<p>将所退出的容器用 <code>docker commit</code> 命令保存为一个新的 sshd:\nubuntu镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker commit fc1 sshd:ubuntu<br></code></pre></div></td></tr></table></figure>\n<ol start=\"4\" type=\"1\">\n<li>使用镜像</li>\n</ol>\n<p>启动容器，并添加端口映射 <code>10022 -&gt; 22</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -p 10022:22 -d sshd:ubuntu /run.sh<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"使用-dockerfile-创建\">使用 Dockerfile 创建</h3>\n<ol type=\"1\">\n<li>创建工作目录</li>\n</ol>\n<p>创建一个 sshd_ubuntu 工作目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">mkdir sshd_ubuntu<br></code></pre></div></td></tr></table></figure>\n<p>创建 Dockerfile 和 run.sh 文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">cd sshd_ubuntu/<br>touch Dockerfile run.sh<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>编写 run.sh 脚本和 authorized_keys 文件</li>\n</ol>\n<p>run.sh 脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>/usr/sbin/sshd -D<br></code></pre></div></td></tr></table></figure>\n<p>在宿主机上生成 SSH 密钥对，并创建 authorized_keys 文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">ssh-keygen -t rsa<br>cat ~/.shh/id_rsa.pub &gt; authorized_keys<br></code></pre></div></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>编写 Dockerfile</li>\n</ol>\n<p><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 设置继承镜像</span><br><span class=\"hljs-keyword\">FROM</span> ubuntu:<span class=\"hljs-number\">14.04</span><br><br><span class=\"hljs-comment\"># 作者</span><br><span class=\"hljs-keyword\">MAINTAINER</span> docker_user (<span class=\"hljs-keyword\">user</span>@docker.com)<br><br><span class=\"hljs-comment\"># 开始运行更新命令</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get updata</span><br><br><span class=\"hljs-comment\"># 安装 ssh 服务</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y openssh-server</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">mkdir</span> -p /var/run/sshd</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">mkdir</span> -p /root/.ssh</span><br><br><span class=\"hljs-comment\"># 取消 pam 限制</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> sed -ri <span class=\"hljs-string\">&#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27;</span> /etc/pam.d/sshd</span><br><br><span class=\"hljs-comment\"># 复制配置文件到相应位置，并赋予脚本可执行权限</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> authorized_keys /root/.ssh/authorized_key</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> run.sh /run.sh</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> 755 /run.sh</span><br><br><span class=\"hljs-comment\"># 开放端口</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">22</span><br><br><span class=\"hljs-comment\"># 设置自启动命令</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/run.sh&quot;</span>]</span><br></code></pre></div></td></tr></table></figure></p>\n<ol start=\"4\" type=\"1\">\n<li>创建镜像</li>\n</ol>\n<p>在 sshd_ubuntu 目录下， 使用 <code>docker build</code>\n命令来创建镜像。这里需要注意最后还有一个\n<code>.</code>，表示使用当前目录中的 Dockerfile：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">cd sshd_ubuntu<br>docker build -t sshd:Dockerfile .<br></code></pre></div></td></tr></table></figure>\n<p>如果读者使用 Dockerfile 创建自定义镜像，那么需要注意的是 Docker\n会自动删除中间临时创建的层，还需要注意每一步的操作和编写的 Dockerfile\n中命令的对应关系。</p>\n<h2 id=\"web-服务与应用\">Web 服务与应用</h2>\n<h3 id=\"apache\">Apache</h3>\n<p>Apache 是一个高稳定性的、商业级别的开源 Web 服务器。目前 Apache\n已经是世界使用排名第一的 Web\n服务器软件。由于其良好的跨平台和安全性，Apache\n被广泛应用在多种平台和操作系统上。作为 Apache\n软件基金会支持的项目，它的开发者社区完善而高效。自1995年发布至今，一直以高标准进行维护与开发。Apache\n名称源自美国的西南部一个印第安人部落：阿帕奇族，它支持类 UNIX 和 Windows\n系统。</p>\n<ol type=\"1\">\n<li>使用官方镜像</li>\n</ol>\n<p>官方提供了名为 httpd 的 Apache 镜像，可以作为基础 Web 服务镜像。</p>\n<p>Dockerfile文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> httpd:<span class=\"hljs-number\">2.4</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./public-html /usr/local/apache2/htdocs/&lt;i</span><br></code></pre></div></td></tr></table></figure>\n<p>创建项目目录 public-html，并在此目录下创建 index.html文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>                Hello, Docker!<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>构建自定义镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker build -t apache2-image .<br></code></pre></div></td></tr></table></figure>\n<p>运行镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -it --rm --name apache-container -p 80:80 apache2-image<br></code></pre></div></td></tr></table></figure>\n<p>也可以不创建自定义镜像，直接通过映射目录方式运行 Apache 容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -it --rm --name my-apache-app -p 80:80 -v &quot;$PWD&quot;:/usr/local/apache2/htdocs/ httpd:2.4<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>使用自定义镜像</li>\n</ol>\n<p>创建一个 apache_ubuutu 工作目录，在其中创建 Dockerfile 文件、run.sh\n文件 和 sample 目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">mkdir apache_ubuntu &amp;&amp; cd apache_ubuntu<br>touch Dockerfile run.sh<br>mkdir sample<br></code></pre></div></td></tr></table></figure>\n<p>Dockerfile 文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 设置 自己创建的 sshd 镜像</span><br><span class=\"hljs-keyword\">FROM</span> sshd:Dockerfile<br><span class=\"hljs-comment\"># 作者信息</span><br><span class=\"hljs-keyword\">MAINTAINER</span> docker_user (<span class=\"hljs-keyword\">user</span>@docker.com)<br><span class=\"hljs-comment\"># 设置环境变量，所有操作都是非交互式的</span><br><span class=\"hljs-keyword\">ENV</span> DEBIAN_FRONTEND noninteractive<br><span class=\"hljs-comment\"># 安装</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get -yq install apache2 &amp;&amp; \\</span><br><span class=\"language-bash\">\t<span class=\"hljs-built_in\">rm</span> -rf /var/lib/apt/lists/*</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp;\\</span><br><span class=\"language-bash\">\tdpkg-reconfigure -f noninteractive tzdata</span><br><span class=\"hljs-comment\"># 添加用户的脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> run.sh /run.sh</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> 755 /*.sh</span><br><span class=\"hljs-comment\"># 添加一个示例的web站点，删掉默认安装在 apache 文件夹下面的文件，并将用户添加的示例用软链接链到/var/www/html目录下面</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">mkdir</span> -p /var/lock/apache2 &amp;&amp; <span class=\"hljs-built_in\">mkdir</span> -p /app &amp;&amp; <span class=\"hljs-built_in\">rm</span> -fr /var/www/html &amp;&amp; <span class=\"hljs-built_in\">ln</span> -s /app /var/www/html</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> sample/ /app</span><br><span class=\"hljs-comment\">#设置 apache 相关的一些变量，在容器启动的时候可以使用 -e 参数替代</span><br><span class=\"hljs-keyword\">ENV</span> APACHE_RUN_USER www-data<br><span class=\"hljs-keyword\">ENV</span> APACHE_RUN_GROUP www-data<br><span class=\"hljs-keyword\">ENV</span> APACHE_LOG_DIR /var/log/apache2<br><span class=\"hljs-keyword\">ENV</span> APACHE_PID_FILE /var/<span class=\"hljs-keyword\">run</span><span class=\"language-bash\">/apache2.pid</span><br><span class=\"hljs-keyword\">ENV</span> APACHE_RUN_DIR /var/<span class=\"hljs-keyword\">run</span><span class=\"language-bash\">/apache2</span><br><span class=\"hljs-keyword\">ENV</span> APACHE_LOCK_DIR /var/lock/apache2<br><span class=\"hljs-keyword\">ENV</span> APACHE_SERVERADMIN admin@localhost<br><span class=\"hljs-keyword\">ENV</span> APACHE_SERVERNAME localhost<br><span class=\"hljs-keyword\">ENV</span> APACHE_SERVERALIAS docker.localhost<br><span class=\"hljs-keyword\">ENV</span> APACHE_DOCUMENTROOT /var/www<br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/run.sh&quot;</span>]</span><br></code></pre></div></td></tr></table></figure>\n<p>此 sample 站点的内容为输出 Hello Docker！。然后在 sample 目录下创建\nindex.html 文件，内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello, Docker!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>run.sh 脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span> run.sh</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>/usr/sbin/sshd &amp;<br>exec apache2 -D FOREGROUND<br></code></pre></div></td></tr></table></figure>\n<p>使用 <code>docker build</code> 命令创建 apache:ubuntu 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker build -t apache:ubuntu<br></code></pre></div></td></tr></table></figure>\n<div class=\"note note-success\">\n            <p>在使用 Dockerfile创建镜像时，会继承父镜像的开放端口，但却不会继承启动命令。</p>\n          </div>\n<h3 id=\"nginx\">Nginx</h3>\n<p>Nginx 是一款功能强大的开源反向代理服务器，支持\nHTTP、HTTPS、SMTP、POP3、IMAP 等协议。它也可以作为负载均衡器、HTTP\n缓存或 Web 服务器。Nginx\n一开始就专注于高并发和高性能的应用场景。它使用类 BSD 开源协议，支持\nLinux、BSD、Mac、Solaris、AIX 等类Unix系统，同时也有 Windows\n上的移植版本。</p>\n<ol type=\"1\">\n<li>使用官方镜像</li>\n</ol>\n<p>只用 <code>docker run</code> 直接运行官方 Nginx 镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -d -p 80:80 --name webserver nginx<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>自定义 Web 页面</li>\n</ol>\n<p>创建 index.html 文件，并将 index.html 文件挂载至容器中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name nginx-container -p 80:80 -v index.html:/usr/share/nginx/html:ro -d nignx<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"tomcat\">Tomcat</h3>\n<p>Tomcat 是由 Apache 软件基金会下属的 Jakarta 项目开发的一个 Servlet\n容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 Java\nServer Page（JSP）的支持。同时，它提供了作为 Web\n服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat\n阀等。由于 Tomcat 本身也内含了一个 HTTP 服务器，也可以当作一个单独的Web\n服务器来使用。</p>\n<p>搜索 Tomcat 相关镜像的个数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker search tomcat |wc -l<br></code></pre></div></td></tr></table></figure>\n<ol type=\"1\">\n<li>准备工作</li>\n</ol>\n<p>创建 tomcat7.0_jdk1.6 文件夹，从 www.oracle.com 网站上下载 sun_jdk\n1.6 压缩包，解压为 jdk 目录。</p>\n<p>创建 Dockerfile 和 run.sh 文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">mkdir tomcat7.0_jdk1.6<br>cd tomcat7.0_jdk1.6<br>touch Dockerfile run.sh<br></code></pre></div></td></tr></table></figure>\n<p>下载Tomcat，可以到官方网站下载最新的版本，也可以直接使用下面链接中给出的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.56/bin/apache-tomcat-7.0.56.zip<br></code></pre></div></td></tr></table></figure>\n<p>解压后，tomcat7.0_jdk1.6目录结构应如下所示（多余的压缩包文件已经被删除）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">ls<br>Dockerfile  apache-tomcat-7.0.56   jdk  run.sh<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>Dockerfile 文件和其他脚本文件</li>\n</ol>\n<p>Dockerfile 文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> sshd:Dockerfile<br><span class=\"hljs-comment\">#设置继承自用户创建的 sshd 镜像</span><br><br><br><span class=\"hljs-keyword\">MAINTAINER</span> docker_user (<span class=\"hljs-keyword\">user</span>@docker.com)<br><span class=\"hljs-comment\">#创建者的基本信息</span><br><br><br><span class=\"hljs-comment\">#设置环境变量，所有操作都是非交互式的</span><br><span class=\"hljs-keyword\">ENV</span> DEBIAN_FRONTEND noninteractive<br><br><span class=\"hljs-comment\">#注意这里要更改系统的时区设置</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \\</span><br><span class=\"language-bash\">        dpkg-reconfigure -f noninteractive tzdata</span><br>        <br><span class=\"hljs-comment\">#安装跟 tomcat 用户认证相关的软件</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get install -yq --no-install-recommends wget pwgen ca-certificates &amp;&amp; \\</span><br><span class=\"language-bash\">    apt-get clean &amp;&amp; \\</span><br><span class=\"language-bash\">    <span class=\"hljs-built_in\">rm</span> -rf /var/lib/apt/lists/*</span><br>    <br><span class=\"hljs-comment\">#设置 tomcat 的环境变量，若读者有其他的环境变量需要设置，也可以在这里添加。</span><br><span class=\"hljs-keyword\">ENV</span> CATALINA_HOME /tomcat<br><span class=\"hljs-keyword\">ENV</span> JAVA_HOME /jdk<br><br><span class=\"hljs-comment\">#复制 tomcat 和 jdk 文件到镜像中</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> apache-tomcat-7.0.56 /tomcat</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> jdk /jdk</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> create_tomcat_admin_user.sh /create_tomcat_admin_user.sh</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> run.sh /run.sh</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x /*.sh</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x /tomcat/bin/*.sh</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/run.sh&quot;</span>]</span><br></code></pre></div></td></tr></table></figure>\n<p>创建 tomcat 用户和密码脚本文件 create_tomcat_admin_user.sh\n文件，内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>if [ -f /.tomcat_admin_created ]; then<br>    echo &quot;Tomcat &#x27;admin&#x27; user already created&quot;<br>    exit 0<br>fi<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">generate password</span><br>PASS=$&#123;TOMCAT_PASS:-$(pwgen -s 12 1)&#125;<br>_word=$( [ $&#123;TOMCAT_PASS&#125; ] &amp;&amp; echo &quot;preset&quot; || echo &quot;random&quot; )<br>echo &quot;=&gt; Creating and admin user with a $&#123;_word&#125; password in Tomcat&quot;<br>sed -i -r &#x27;s/&lt;\\/tomcat-users&gt;//&#x27; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &#x27;&lt;role rolename=&quot;manager-gui&quot;/&gt;&#x27; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &#x27;&lt;role rolename=&quot;manager-script&quot;/&gt;&#x27; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &#x27;&lt;role rolename=&quot;manager-jmx&quot;/&gt;&#x27; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &#x27;&lt;role rolename=&quot;admin-gui&quot;/&gt;&#x27; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &#x27;&lt;role rolename=&quot;admin-script&quot;/&gt;&#x27; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &quot;&lt;user username=\\&quot;admin\\&quot; password=\\&quot;$&#123;PASS&#125;\\&quot; roles=\\&quot;manager-gui,manager-<br>    script,manager-jmx,admin-gui, admin-script\\&quot;/&gt;&quot; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/<br>    tomcat-users.xml<br>echo &#x27;&lt;/tomcat-users&gt;&#x27; &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml<br>echo &quot;=&gt; Done!&quot;<br>touch /.tomcat_admin_created<br>echo &quot;========================================================================&quot;<br>echo &quot;You can now configure to this Tomcat server using:&quot;<br>echo &quot;&quot;<br>echo &quot;    admin:$&#123;PASS&#125;&quot;<br>echo &quot;&quot;<br>echo &quot;========================================================================&quot;<br></code></pre></div></td></tr></table></figure>\n<p>编写 run.sh 脚本文件，内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>if [ ! -f /.tomcat_admin_created ]; then<br>    /create_tomcat_admin_user.sh<br>fi<br>/usr/sbin/sshd -D &amp;<br>exec $&#123;CATALINA_HOME&#125;/bin/catalina.sh run<br></code></pre></div></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>创建和测试镜像</li>\n</ol>\n<p>创建镜像 tomcat7.0：jdk1.6：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker build -t tomcat7.0:jdk1.6 .<br></code></pre></div></td></tr></table></figure>\n<p>启动一个 tomcat 容器进行测试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -d -P tomcat7.0:jdk1.6<br></code></pre></div></td></tr></table></figure>\n<p>通过 <code>docker logs</code> 得到 tomcat 的密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker logs 3cd<br>=&gt; Creating and admin user with a random password in Tomcat<br>=&gt; Done!<br>========================================================================<br>You can now configure to this Tomcat server using:<br>    admin:aBwN0CNCPckw<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"jetty\">Jetty</h3>\n<p>Jetty 是一个优秀的开源 Servlet\n容器，以其高效、小巧、可嵌入式等优点深得人心，它为基于 Java 的 Web\n内容（如 JSP 和 Servlet）提供运行环境。Jetty 基于 Java 语言编写，它的\nAPI 以一组 JAR 包的形式发布。开发人员可以将 Jetty\n容器实例化成一个对象，可以迅速为一些独立运行的 Java 应用提供 Web\n服务。</p>\n<p>DockerHub 官方提供了 Jetty 镜像，直接运行 <code>docker run</code>\n指令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -d jetty<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"lamp\">LAMP</h3>\n<p>LAMP（Linux-Apache-MySQL-PHP）是目前流行的 Web\n工具栈，其中包括：Linux 操作系统，Apache 网络服务器，MySQL\n数据库，Perl、PHP 或者 Python\n编程语言。其组成工具均是成熟的开源软件，被大量网站所采用。和 Java/J2EE\n架构相比，LAMP 具有 Web\n资源丰富、轻量、快速开发等特点；和微软的.NET架构相比，LAMP更具有通用、跨平台、高性能、低价格的优势。因此\nLAMP 无论是在性能、质量还是价格方面都是企业搭建网站的首选平台。</p>\n<ol type=\"1\">\n<li>使用 linode/lamp 镜像</li>\n</ol>\n<p>直接运行镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -p 80:80 -t -i linode/lamp /bin/bash<br></code></pre></div></td></tr></table></figure>\n<p>在容器内部 shell 启动 apache 以及 mysql 服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">service apache2 start<br>service mysql start<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>使用 tutum/lamp 镜像</li>\n</ol>\n<p>直接运行镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -d -p 80:80 -p 3306:3306 tutum/lamp<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"cms\">CMS</h3>\n<p>内容管理系统（Content Management\nSystem，CMS）指的是提供内容编辑服务的平台程序。CMS\n可以让不懂编程的用户方便又轻松地发布、更改和管理各类数字内容（主要以文本和图像为主）。</p>\n<h4 id=\"wordpress\">WordPress</h4>\n<p>WordPress 基于 PHP 和\nMySQL，架构设计简单明了，支持主题，插件和各种功能模块。更重要的是，WordPress\n拥有庞大的社区，在线资源非常丰富，并且在各大网络空间商和云平台中受到广泛的支持。根据2013年8月的统计数据，流量排名前一千万的网站中其使用率高达22%。</p>\n<ol type=\"1\">\n<li>使用官方镜像</li>\n</ol>\n<p>下载官方镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker pull wordpress<br></code></pre></div></td></tr></table></figure>\n<p>创建并运行一个 wordpress 容器，并连接到 mysql 容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name some-wordpress --link some-mysql:mysql -d wordpress<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>使用 Compose 搭建 WordPress 应用</li>\n</ol>\n<p>新建一个 docker-compose.yml 文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">wordpress:</span><br>\t<span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">wordpress</span><br>\t<span class=\"hljs-attr\">links:</span> <br>\t\t<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">db:mysql</span><br>\t<span class=\"hljs-attr\">ports:</span><br>\t\t<span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">8080</span><span class=\"hljs-string\">:80</span><br><span class=\"hljs-attr\">db:</span><br>\t<span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mariadb</span><br>\t<span class=\"hljs-attr\">environment:</span><br>\t\t<span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">example</span><br></code></pre></div></td></tr></table></figure>\n<p>然后执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker-compose up<br></code></pre></div></td></tr></table></figure>\n<div class=\"note note-success\">\n            <p>如果提示没有 docker-compose 命令，可以通过 pip install docker-compose来在线安装。</p>\n          </div>\n<h4 id=\"ghost\">Ghost</h4>\n<p>Ghost 是一个广受欢迎的开源博客平台，使用 JavaScript 编写，以 MIT\n协议发布。它的设计非常简约，使用起来体验优异，非常适合做内容发布，故而受到很多极客或技术工作者的喜爱。</p>\n<p>直接运行官方镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name ghost-container -d ghost<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"数据库应用\">数据库应用</h3>\n<p>主流的数据库类型主要包括关系型(SQL)和非关系型(NoSQL)两种。</p>\n<p>关系数据库是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据，支持复杂的事物处理和结构化查询。代表实现有\nMySQL、Oracle、PostGreSQL、MariaDB、SQLServer 等。</p>\n<p>非关系数据库是新兴的数据库技术，它放弃了传统关系型数据库的部分强一致性限制，带来性能上的提升，使其更适用于需要大规模并行处理的场景。非关系型数据库是关系型数据库的良好补充，代表产品有\nMongoDB、Redis、CouchDB 等。</p>\n<h4 id=\"mysql\">MySQL</h4>\n<p>MySQL\n是全球最流行的开源的开源关系数据库软件之一，因为其高性能、成熟可靠和适应性而得到广泛应用。</p>\n<p>使用官方镜像启动一个 MySQL Server 实例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name mysql1 -e MYSQL_ROOT_PASSWORD=123 -d mysql:latest<br></code></pre></div></td></tr></table></figure>\n<p>MySQL 服务的标准端口是 3306，用户可以通过 CLI\n工具对配置进行修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -it --link some-mysql:mysql --rm mysql sh -c &#x27;exec mysql -h&quot;$MYSQL_ PORT_3306_TCP_ADDR&quot; -P&quot;$MYSQL_PORT_3306_TCP_PORT&quot; -uroot -p&quot;$MYSQL_ENV_MYSQL_ROOT_PASSWORD&quot;&#x27;<br></code></pre></div></td></tr></table></figure>\n<ol type=\"1\">\n<li>系统与日志访问</li>\n</ol>\n<p>用户可以使用 docker exec 指令调用内部系统中的 bash\nshell，以访问容器内部系统：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker exec -it some-mysql bash<br></code></pre></div></td></tr></table></figure>\n<p>MySQL Server 日志可以使用 docker logs 指令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker logs some-mysql<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>使用自定义配置文件</li>\n</ol>\n<p>如果用户希望使用自定义 MySQL 配置，则可以创建一个目录，内置 cnf\n配置文件，然后将其挂载至容器的 /etc/mysql/conf.d\n目录。比如，自定义配置文件为\n/my/custom/config-file.cnf，则可以使用以下指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag<br></code></pre></div></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>脱离cnf文件进行配置</li>\n</ol>\n<p>很多的配置选项可以通过标签（flags）传递至 mysqld\n进程。这样用户就可以脱离cnf配置文件，对容器进行弹性的定制。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collatioo-server=utf8mb4_unicode_ci<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"mongodb\">MongoDB</h4>\n<p>MongoDB 是一款可扩展、高性能的开源文档数据库，是当今最流行的 NoSQL\n数据库软件之一。它采用 C++\n开发，支持复杂的数据类型和强大的查询语言，提供了关系数据库的绝大部分功能。</p>\n<p><strong>使用官方镜像</strong></p>\n<p>用户可以使用 <code>docker run</code> 指令直接运行官方 mongodb\n镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name mongo-container -d mongo<br></code></pre></div></td></tr></table></figure>\n<ol type=\"1\">\n<li>连接 mongodb 容器</li>\n</ol>\n<p>使用 <code>--link</code> 参数，连接新建的\n<code>mongo-container</code> 容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -it --link mongo-container:db alpine sh<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>直接使用 mongo cli 指令</li>\n</ol>\n<p>如果想直接在宿主机器上使用 mongodb 镜像，可以在\n<code>docker run</code> 指令后面加入entrypoint\n指令，这样就可以非常方便的直接进入 mongo cli 了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -it --link mongo-container:db --entrypoint mongo mongo --host db<br></code></pre></div></td></tr></table></figure>\n<p><strong>使用自定义 Dockerfile</strong></p>\n<p>Dockerfile 文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 设置从用户之前创建的 sshd 镜像继承。</span><br><span class=\"hljs-keyword\">FROM</span> sshd<br><span class=\"hljs-keyword\">MAINTAINER</span> docker_user (<span class=\"hljs-keyword\">user</span>@docker.com)<br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; \\</span><br><span class=\"language-bash\">    apt-get install -y mongodb pwgen &amp;&amp; \\</span><br><span class=\"language-bash\">    apt-get clean &amp;&amp; \\</span><br><span class=\"language-bash\">    <span class=\"hljs-built_in\">rm</span> -rf /var/lib/apt/lists/*</span><br>    <br><span class=\"hljs-comment\"># 创建 mongodb 存放数据文件的文件夹</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">mkdir</span> -p /data/db</span><br><span class=\"hljs-keyword\">VOLUME</span><span class=\"language-bash\"> /data/db</span><br><span class=\"hljs-keyword\">ENV</span> AUTH yes<br><br><span class=\"hljs-comment\"># 添加脚本</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> run.sh /run.sh</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> set_mongodb_password.sh /set_mongodb_password.sh</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> 755 ./*.sh</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">27017</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">28017</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/run.sh&quot;</span>]</span><br></code></pre></div></td></tr></table></figure>\n<p>新建 set_mongodb_password.sh\n脚本。此脚本主要负责配置数据库的用户名和密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这个脚本主要是用来设置数据库的用户名和密码。</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">判断是否已经设置过密码。</span><br>if [ -f /.mongodb_password_set ]; then<br>        echo &quot;MongoDB password already set!&quot;<br>        exit 0<br>fi<br>/usr/bin/mongod --smallfiles --nojournal &amp;<br>PASS=$&#123;MONGODB_PASS:-$(pwgen -s 12 1)&#125;<br>_word=$( [ $&#123;MONGODB_PASS&#125; ] &amp;&amp; echo &quot;preset&quot; || echo &quot;random&quot; )<br>RET=1<br>while [[ RET -ne 0 ]]; do<br>    echo &quot;=&gt; Waiting for confirmation of MongoDB service startup&quot;<br>    sleep 5<br>    mongo admin --eval &quot;help&quot; &gt;/dev/null 2&gt;&amp;1<br>    RET=$?<br>done<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">通过 docker logs + <span class=\"hljs-built_in\">id</span> 可以看到下面的输出。</span><br>echo &quot;=&gt; Creating an admin user with a $&#123;_word&#125; password in MongoDB&quot;<br>mongo admin --eval &quot;db.addUser(&#123;user: &#x27;admin&#x27;, pwd: &#x27;$PASS&#x27;, roles: <br>    [ &#x27;userAdminAnyDatabase&#x27;, &#x27;dbAdminAnyDatabase&#x27; ]&#125;);&quot;<br>mongo admin --eval &quot;db.shutdownServer();&quot;<br>echo &quot;=&gt; Done!&quot;<br>touch /.mongodb_password_set<br>echo &quot;========================================================================&quot;<br>echo &quot;You can now connect to this MongoDB server using:&quot;<br>echo &quot;&quot;<br>echo &quot;    mongo admin -u admin -p $PASS --host &lt;host&gt; --port &lt;port&gt;&quot;<br>echo &quot;&quot;<br>echo &quot;Please remember to change the above password as soon as possible!&quot;<br>echo &quot;========================================================================&quot;<br><br></code></pre></div></td></tr></table></figure>\n<p>新建 run.sh，此脚本是主要的 mongodb 启动脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>if [ ! -f /.mongodb_password_set ]; then<br>        /set_mongodb_password.sh<br>fi<br>if [ &quot;$AUTH&quot; == &quot;yes&quot; ]; then<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里读者可以自己设定 Mongodb 的启动参数。</span><br>\texport mongodb=&#x27;/usr/bin/mongod --nojournal --auth --httpinterface --rest&#x27;<br>else<br>\texport mongodb=&#x27;/usr/bin/mongod --nojournal --httpinterface --rest&#x27;<br>fi<br>if [ ! -f /data/db/mongod.lock ]; then<br>    eval $mongodb<br>else<br>    export mongodb=$mongodb&#x27; --dbpath /data/db&#x27;<br>    rm /data/db/mongod.lock<br>    mongod --dbpath /data/db --repair &amp;&amp; eval $mongodb<br>fi<br></code></pre></div></td></tr></table></figure>\n<p>第二步，使用 <code>docker build</code> 指令构建镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker build -t mongodb-imaga .<br></code></pre></div></td></tr></table></figure>\n<p>第三步，启动后台容器，并分别映射 27017 和 28017 端口到本地：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -d -p 27017:27017 -p 28017:28017 mongodb<br></code></pre></div></td></tr></table></figure>\n<p>通过 docker logs 来查看默认的 admin 帐户密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker logs sa9<br>    ==============================================================<br>        You can now connect to this MongoDB server using:<br>            mongo admin -u admin -p 5elsT6KtjrqV --host &lt;host&gt; --port &lt;port&gt;<br>        Please remember to change the above password as soon as possible!<br>        ===============================================================<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"redis\">Redis</h4>\n<p>Redis\n是一个开源（BSD许可）的基于内存的数据结构存储系统，可以用作数据库、缓存和消息中间件。</p>\n<p>通过 <code>docker run</code> 指令可以直接启动一个 redis-container\n容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run --name redis-container -d redis<br></code></pre></div></td></tr></table></figure>\n<ol type=\"1\">\n<li>连接redis容器</li>\n</ol>\n<p>用户可以使用 <code>--link</code> 参数，连接创建的 redis-container\n容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -it --link redis-container:db alpine sh<br></code></pre></div></td></tr></table></figure>\n<p>还可以使用 n c指令（即NetCat）检测 redis 服务的可用性：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nc db 6379<br></code></pre></div></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>使用自定义配置</li>\n</ol>\n<p>可以通过数据卷实现自定义 redis 配置，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">docker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name <br>    myredis redis redis-server /usr/local/etc/redis/redis.conf<br></code></pre></div></td></tr></table></figure>\n","text":"操作系统 BusyBox BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如cat、echo、grep、mount、telnet等）的精简工具箱，它只有几MB的大小，很方便进行各种快速验证，被誉为“Linux系统的瑞士军刀”。BusyBox 可运行于多款 PO...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"《Docker技术入门与实践》","slug":"《Docker技术入门与实践》","count":2,"path":"api/categories/《Docker技术入门与实践》.json"}],"tags":[{"name":"Docker","slug":"Docker","count":2,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">操作系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#busybox\"><span class=\"toc-text\">BusyBox</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#alpine\"><span class=\"toc-text\">Alpine</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#debianubuntu\"><span class=\"toc-text\">Debian&#x2F;Ubuntu</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#centosfedora\"><span class=\"toc-text\">CentOS&#x2F;Fedora</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E9%95%9C%E5%83%8F%E6%B7%BB%E5%8A%A0ssh%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">为镜像添加SSH服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8Edocker-commit%E5%91%BD%E4%BB%A4%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">基于docker\ncommit命令创建容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-dockerfile-%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">使用 Dockerfile 创建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web-%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">Web 服务与应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#apache\"><span class=\"toc-text\">Apache</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nginx\"><span class=\"toc-text\">Nginx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#tomcat\"><span class=\"toc-text\">Tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jetty\"><span class=\"toc-text\">Jetty</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lamp\"><span class=\"toc-text\">LAMP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cms\"><span class=\"toc-text\">CMS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wordpress\"><span class=\"toc-text\">WordPress</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ghost\"><span class=\"toc-text\">Ghost</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">数据库应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mysql\"><span class=\"toc-text\">MySQL</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mongodb\"><span class=\"toc-text\">MongoDB</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#redis\"><span class=\"toc-text\">Redis</span></a></li></ol></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"立创 EAD 导出 AD 封装","uid":"0eaae2e7a8b8a57479711ca2360e5962","slug":"Altium-Designer/立创EAD导出AD封装","date":"2022-09-08T08:43:00.000Z","updated":"2022-09-08T08:48:04.563Z","comments":true,"path":"api/articles/Altium-Designer/立创EAD导出AD封装.json","keywords":null,"cover":[],"text":"立创 EDA 导出 AD 封装 导出 AD 库 确认导出 得到 AD 的 pcb 文件 生成的是 pcb 文件，需要再 AD 中生成元件封装库 生成元件封装库 得到元件封装库 导出 3D 模型文件 导出 3D 模型 选择导出 使用 FreeCAD 打开文件，并删除 PCB 底板 ...","link":"","photos":[],"count_time":{"symbolsCount":201,"symbolsTime":"1 mins."},"categories":[{"name":"Altium Designer","slug":"Altium-Designer","count":2,"path":"api/categories/Altium-Designer.json"}],"tags":[{"name":"Note","slug":"Note","count":2,"path":"api/tags/Note.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"棋盘格角点检测","uid":"1eaff4e22fb5fa029043d1942e6ee81c","slug":"Digital-Image/X-Corner","date":"2022-06-29T07:11:00.000Z","updated":"2022-06-29T07:41:49.503Z","comments":true,"path":"api/articles/Digital-Image/X-Corner.json","keywords":null,"cover":[],"text":"A New Sub-Pixel Detector for X-Corners in Camera Calibration Targets 基于海塞矩阵的方法 一个标准的 X-Corners 如下图所示： 其表达式为： \\[ f(x,y)=\\begin{cases} 0,&amp;...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"图像处理","slug":"图像处理","count":1,"path":"api/categories/图像处理.json"}],"tags":[{"name":"相机标定","slug":"相机标定","count":1,"path":"api/tags/相机标定.json"},{"name":"角点检测","slug":"角点检测","count":1,"path":"api/tags/角点检测.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}