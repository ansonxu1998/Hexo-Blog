{"title":"网络管理工具 NetworkManager","uid":"80d29f01d39b07c6bd5a27520f206740","slug":"Linux/NetworkManager","date":"2023-06-17T04:51:00.000Z","updated":"2023-06-17T12:59:22.674Z","comments":true,"path":"api/articles/Linux/NetworkManager.json","keywords":null,"cover":"/img/bg/Linux.png","content":"<p>NetworkManager 是一个系统网络服务，它可以管理网络设备和网络连接，在可用的情况下保持网络连接的通畅。它管理以太网、WiFi、移动宽带和PPPoE设备，同时还提供各种不同VPN服务的VPN集成。</p>\n<p>默认情况下，Ubuntu Core 的网络管理由 systemd 的 network 和 netplan 来处理。当安装 NetworkManger 时，它将通过创建一个 netplan 配置文件来控制系统中的所有网络设备，在该文件中，它将设置自己为默认的网络呈现器。</p>\n<h2 id=\"networkmanager的功能\">NetworkManager的功能</h2>\n<p>上游的 NetworkManager 项目提供了广泛的特性，其中大部分(但不是全部)目前都在snap包中可用（Ubuntu）。</p>\n<ul>\n<li>WiFi connectivity</li>\n<li>WAN connectivity(together with ModemManager)</li>\n<li>Ethernet connectivity</li>\n<li>WiFi access point creation</li>\n<li>Shared connections</li>\n<li>VPN connections</li>\n</ul>\n<h3 id=\"安装-networkmanager-服务\">安装 NetworkManager 服务</h3>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo apt-get install networkmanager</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">snap install network-manager</code></pre>\n<h2 id=\"查看网络状态\">查看网络状态</h2>\n<p>使用 <code>nmcli</code> 命令行工具查询 NetworkManager 的连接和设备状态。</p>\n<p>显示 NetworkManager 已知的设备状态：<code>nmcli d</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli d\nDEVICE           TYPE      STATE      CONNECTION\nwlp3s0           wifi      connected  WHUT-WLAN</code></pre>\n<p>显示 NetworkManager 连接的当前状态：<code>nmcli c</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c\nNAME       UUID                                  TYPE  DEVICE\nWHUT-WLAN  e95d5c84-cd1e-4995-b91d-9e0014fab93b  wifi  wlp3s0</code></pre>\n<p>查看无线接口的状态，包括 WiFi 和 WWAN(蜂窝) 的 radio 参数：<code>nmcli r</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli r\nWIFI-HW  WIFI     WWAN-HW  WWAN\nenabled  enabled  enabled  enabled</code></pre>\n<h2 id=\"配置-wifi-连接\">配置 WiFi 连接</h2>\n<h3 id=\"建立无线连接\">建立无线连接</h3>\n<p>确保 WiFi radio 是打开状态：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli r wifi on</code></pre>\n<p>列出可用的 WiFi 连接：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli d wifi list\n\nIN-USE  BSSID              SSID        MODE   CHAN  RATE        SIGNAL  BARS  SECURITY\n        9C:1C:12:A3:34:42  WHUT-1X     Infra  1     195 Mbit&#x2F;s  57      ▂▄▆_  WPA2 802.1X\n        9C:1C:12:A3:34:41  WHUT-WLAN6  Infra  1     195 Mbit&#x2F;s  57      ▂▄▆_  --\n*       9C:1C:12:A8:91:D0  WHUT-WLAN   Infra  153   405 Mbit&#x2F;s  52      ▂▄__  --\n        8C:AB:8E:97:13:A0  PDCN        Infra  12    270 Mbit&#x2F;s  25      ▂___  WPA2\n        9C:1C:12:A3:34:50  WHUT-WLAN   Infra  161   405 Mbit&#x2F;s  25      ▂___  --\n        A2:C5:F7:ED:79:1D  a506        Infra  36    270 Mbit&#x2F;s  22      ▂___  WPA2</code></pre>\n<p>接入 WiFi 命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli d wifi connect &lt;SSID&gt; password &lt;password&gt;</code></pre>\n<h3 id=\"连接隐藏网络\">连接隐藏网络</h3>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>隐藏网络是一种普通的无线网络，除非请求，否则它不会广播自己的SSID。这意味着它的名称不能搜索，必须从其他来源知道。</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c add type wifi con-name &lt;name&gt; ifname wlan0 ssid &lt;ssid&gt;\n$ nmcli c modify &lt;name&gt; wifi-sec.key-mgmt wpa-psk wifi-sec.psk &lt;password&gt;</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c up &lt;name&gt;</code></pre>\n<h2 id=\"配置-wifi-接入点ap\">配置 WiFi 接入点（AP）</h2>\n<p>可以使用 NetworkManager 创建 WiFi 接入点：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli d wifi hotspot ifname &lt;wifi_iface&gt; ssid &lt;ssid&gt; password &lt;password&gt;</code></pre>\n<ul>\n<li><wifi_iface> - wifi network interface</li>\n<li><ssid> - AP 的 SSID</li>\n<li><password> - 访问密码</li>\n</ul>\n<p>如果命令成功，NM 将创建一个名为 <code>Hotspot &lt;N&gt;</code>的连接。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>默认情况下，创建的 AP 提供共享连接，因此如果提供 AP 的设备也具有访问 Internet 的权限，那么连接到它的设备应该能够访问Internet。</p></blockquote>\n<h2 id=\"配置蜂窝连接\">配置蜂窝连接</h2>\n<p>首先需要安装 <code>modem-manager</code>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo apt install modem-manager</code></pre>\n<p>检查 modem 是否正常检测：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo modem-manager.mmcli -L</code></pre>\n<p>显示 modem 的详细信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo modem-manager.mmcli -m 0</code></pre>\n<p><code>0</code> - 设备索引</p>\n<p>输入SIM PIN:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo modem-manager.mmcli -i 0 --pin&#x3D;&lt;PIN&gt;\nsuccessfully sent PIN code to the SIM</code></pre>\n<p>更多用于处理SIM卡 PIN 的命令包括:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sudo modem-manager.mmcli -i 0 --pin&#x3D;&lt;PIN&gt; --enable-pin\n$ sudo modem-manager.mmcli -i 0 --pin&#x3D;&lt;PIN&gt; --disable-pin\n$ sudo modem-manager.mmcli -i 0 --pin&#x3D;&lt;PIN&gt; --change-pin&#x3D;&lt;NEW_PIN&gt;\n$ sudo modem-manager.mmcli -i 0 --puk&#x3D;&lt;PUK&gt;</code></pre>\n<p>分别是启用 PIN 锁定、禁用 PIN 锁定、更改 PIN 码和解锁 PUK锁定的SIM卡。</p>\n<p>之后，添加一个蜂窝连接：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c add type gsm ifname &lt;interface&gt; con-name &lt;name&gt; apn &lt;operator_apn&gt;\n$ nmcli r wwan on</code></pre>\n<ul>\n<li><interface> - <code>sudo mmcli -m &lt;N&gt;</code> 输出中作为 “主端口” 列出的字符串</li>\n<li><name> - 用于标识连接的任意名称</li>\n<li><operator_apn> - APN 名称</li>\n</ul>\n<p>注意，这通常是带有模式 tty* 或 cdc-wdm* 设备的串行端口，而不是网络接口。由于这些接口名称可能会根据系统中存在的设备而更改，因此更好的替代方法是使用 mmcli (device:…) 显示的 sysfs 路径或使用' * '，它将使用 MM 检测到的任何 modem 设备:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo nmcli c add type gsm ifname &#39;*&#39; con-name &lt;name&gt; apn &lt;operator_apn&gt;</code></pre>\n<p>在执行这些命令之后，每当 ModemManager 报告 modem 已注册时，NetworkManager 将自动尝试启动蜂窝连接。成功完成后，NetworkManager 将为新网络接口创建路由，优先级低于以太网或 WiFi 接口。要禁用连接，执行如下命令:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli r wwan off</code></pre>\n<p>或者更改 autoconnect 属性并关闭连接，如果需要更精细的控制:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c modify &lt;name&gt; connection.autoconnect [yes|no]\n$ nmcli c down &lt;name&gt;</code></pre>\n<p>在创建/修改 WWAN 连接时，可以提供 PIN (因此它是自动输入的)或其他 APN 配置信息。例如:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c add type gsm ifname &lt;interface&gt; con-name &lt;name&gt; apn &lt;operator_apn&gt; username &lt;user&gt; password &lt;password&gt; pin &lt;PIN&gt;</code></pre>\n<h2 id=\"配置共享网络\">配置共享网络</h2>\n<p>将设备作为其他设备可以连接的网关。使用如下的命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c add con-name &lt;name&gt; type ethernet ifname &lt;iface&gt; ipv4.method shared ipv6.method ignore \n$ nmcli c up &lt;name&gt;</code></pre>\n<ul>\n<li><name> - 连接的任意名称</li>\n<li><iface> - 外部设备将连接到的接口名称</li>\n</ul>\n<p>在这种情况下，使用以太网接口(类型以太网)，提供 IPv 4地址，但这扩展到其他接口和IPv6。当连接建立时，NM 启动一个监听 &lt; interface &gt; 的 DHCP 服务器，并更改网络配置，以便转发数据包，并为接口启用伪装。当然，要做到这一点，我们需要一个不同于 &lt; interface &gt; 的接口，它必须具有外部连接。</p>\n<h2 id=\"配置-vpn\">配置 VPN</h2>\n<p>VPN 支持需要使用 <code>core22</code> 和来自 <code>22/*</code> 通道的 network-manager。目前支持两种类型的 VPN:</p>\n<ul>\n<li>OpenVPN</li>\n<li>WireGuard</li>\n</ul>\n<h3 id=\"配置-openvpn-连接\">配置 OpenVPN 连接</h3>\n<p>Network Manager 支持两种创建 OpenVPN 连接的方法:</p>\n<ul>\n<li>导入 OpenVPN 证书文件</li>\n<li>使用 <code>nmcli</code> 手动设置所需的参数</li>\n</ul>\n<p>第一种方法只需要将 OpenVPN 配置文件复制到以下位置之一:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo nmcli c import type openvpn file &#x2F;var&#x2F;snap&#x2F;network-manager&#x2F;common&#x2F;myopenvp.ovpn</code></pre>\n<p>该命令需要以 root 用户身份运行，因为它使用从配置文件中提取的数据创建证书和密钥文件。这些需要由 network-manager 访问，它本身以root id 运行。</p>\n<p>使用第二种方法需要复制证书和密钥，并根据需要创建/修改连接。例如:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nmcli c add connection.id vpntest connection.type vpn \\\n    vpn.service-type org.freedesktop.NetworkManager.openvpn \\\n    ipv4.never-default true \\\n    ipv6.never-default true \\\n    +vpn.data ca&#x3D;&#x2F;var&#x2F;snap&#x2F;network-manager&#x2F;common&#x2F;creds&#x2F;server_ca.crt \\\n    +vpn.data cert&#x3D;&#x2F;var&#x2F;snap&#x2F;network-manager&#x2F;common&#x2F;creds&#x2F;user.crt \\\n    +vpn.data cert-pass-flags&#x3D;0 \\\n    +vpn.data cipher&#x3D;AES-128-CBC \\\n    +vpn.data comp-lzo&#x3D;adaptive \\\n    +vpn.data connection-type&#x3D;tls \\\n    +vpn.data dev&#x3D;tun \\\n    +vpn.data key&#x3D;&#x2F;var&#x2F;snap&#x2F;network-manager&#x2F;common&#x2F;creds&#x2F;user.key \\\n    +vpn.data ping&#x3D;10 \\\n    +vpn.data ping-restart&#x3D;60 \\\n    +vpn.data remote&#x3D;&lt;server&gt;:&lt;port&gt; \\\n    +vpn.data remote-cert-tls&#x3D;server \\\n    +vpn.data ta&#x3D;&#x2F;var&#x2F;snap&#x2F;network-manager&#x2F;common&#x2F;creds&#x2F;tls_auth.key \\\n    +vpn.data ta-dir&#x3D;1 \\\n    +vpn.data verify-x509-name&#x3D;name:access.is</code></pre>\n<h3 id=\"配置-wireguard-连接\">配置 WireGuard 连接</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nmcli c import type WireGuard file &#x2F;var&#x2F;snap&#x2F;nm-vpn-client&#x2F;common&#x2F;wg.conf</code></pre>\n<h2 id=\"编辑连接\">编辑连接</h2>\n<p>使用 <code>nmcli</code> 控制台</p>\n<p>除了提供使用命令行管理和修改网络连接的可能性之外，network-manager 还提供了一个内置的交互式控制台来实现相同的功能：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli connection edit</code></pre>\n<p>它将打开一个交互式控制台。在第一步中，系统将提示输入连接类型。有效连接类型的列表将显示在屏幕上。选择连接类型之后，将跳转到 <code>nmcli</code> 控制台。</p>\n<p>或者，如果已知有效的连接类型，你可以通过提供类型作为参数直接跳转到 nmcl i控制台:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli connection edit type &lt;type&gt;</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c edit\nValid connection types: 6lowpan, 802-11-olpc-mesh (olpc-mesh), 802-11-wireless (wifi), 802-3-ethernet (ethernet), adsl, bluetooth, bond, bridge, cdma, dummy, generic, gsm, infiniband, ip-tunnel, macsec, macvlan, ovs-bridge, ovs-interface, ovs-port, pppoe, team, tun, vlan, vpn, vxlan, wifi-p2p, wimax, wireguard, wpan, bond-slave, bridge-slave, team-slave\nEnter connection type: wifi\n\n&#x3D;&#x3D;&#x3D;| nmcli interactive connection editor |&#x3D;&#x3D;&#x3D;\n\nAdding a new &#39;802-11-wireless&#39; connection\n\nType &#39;help&#39; or &#39;?&#39; for available commands.\nType &#39;print&#39; to show all the connection properties.\nType &#39;describe [&lt;setting&gt;.&lt;prop&gt;]&#39; for detailed property description.\n\nYou may edit the following settings: connection, 802-11-wireless (wifi), 802-11-wireless-security (wifi-sec), 802-1x, ethtool, match, ipv4, ipv6, tc, proxy\nnmcli&gt;</code></pre>\n<p>要获取可用命令列表，输入 'help' 或 '?':</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nmcli&gt; ?\n------------------------------------------------------------------------------\n---[ Main menu ]---\ngoto     [&lt;setting&gt; | &lt;prop&gt;]        :: go to a setting or property\nremove   &lt;setting&gt;[.&lt;prop&gt;] | &lt;prop&gt; :: remove setting or reset property value\nset      [&lt;setting&gt;.&lt;prop&gt; &lt;value&gt;]  :: set property value\ndescribe [&lt;setting&gt;.&lt;prop&gt;]          :: describe property\nprint    [all | &lt;setting&gt;[.&lt;prop&gt;]]  :: print the connection\nverify   [all | fix]                 :: verify the connection\nsave     [persistent|temporary]      :: save the connection\nactivate [&lt;ifname&gt;] [&#x2F;&lt;ap&gt;|&lt;nsp&gt;]    :: activate the connection\nback                                 :: go one level up (back)\nhelp&#x2F;?   [&lt;command&gt;]                 :: print this help\nnmcli    &lt;conf-option&gt; &lt;value&gt;       :: nmcli configuration\nquit                                 :: exit nmcli\n------------------------------------------------------------------------------\nnmcli&gt;</code></pre>\n<h3 id=\"修改连接细节\">修改连接细节</h3>\n<p>可以通过打印连接详细信息从命令行了解可用的设置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c show &lt;name&gt;</code></pre>\n<ul>\n<li><name> - 连接名称</li>\n</ul>\n<h4 id=\"ipv4-and-ipv6-选项\">IPv4 and IPv6 选项</h4>\n<p>例如，对于 IPv4 设置，可以这样做:</p>\n<pre class=\"line-numbers language-auto\" data-language=\"auto\"><code class=\"language-auto\">$ nmcli c show &lt;name&gt; | grep ipv4\nipv4.method:                            auto\nipv4.dns:\nipv4.dns-search:\nipv4.dns-options:                       (default)\nipv4.addresses:\nipv4.gateway:                           --\nipv4.routes:\nipv4.route-metric:                      -1\nipv4.ignore-auto-routes:                no\nipv4.ignore-auto-dns:                   no\nipv4.dhcp-client-id:                    --\nipv4.dhcp-timeout:                      0\nipv4.dhcp-send-hostname:                yes\nipv4.dhcp-hostname:                     --\nipv4.dhcp-fqdn:                         --\nipv4.never-default:                     no\nipv4.may-fail:                          yes\nipv4.dad-timeout:                       -1 (default)</code></pre>\n<p>例如，设置 DNS 服务器需要输入:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c modify &lt;name&gt; ipv4.dns &quot;8.8.8.8&quot;</code></pre>\n<h3 id=\"wifi-省电选项\">WiFi 省电选项</h3>\n<p>WiFi 省电选项可以有以下值之一:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">VALUE</th>\n<th style=\"text-align: center;\">MEANING</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Default</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Ignore, do not touch currently configured setting</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">Disable</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">3</td>\n<td style=\"text-align: center;\">Enable</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli c modify &lt;name&gt; 802-11-wireless.powersave 2</code></pre>\n<h2 id=\"日志\">日志</h2>\n<p>NetworkManager 支持动态更改日志级别，并允许对记录的内容进行细粒度控制。</p>\n<p>首先检查当前的日志设置，输入:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli general logging</code></pre>\n<p>可以全局更改级别，也可以单独更改每个域的级别：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nmcli general logging [level &lt;level&gt; [domain &lt;domain&gt;]]</code></pre>\n<p>日志级别：</p>\n<p><strong>ERR</strong>: will log only critical errors <strong>WARN</strong>: will log warning messages <strong>INFO</strong>: will log various informational messages <strong>DEBUG</strong>: enables verbose logging for debugging purposes is the category of messages that shall be logged with given severity. <strong>WIFI</strong> will include only WiFi related messages, <strong>IP4</strong> will include only IPv4 related messages, and so on.</p>\n","text":"NetworkManager 是一个系统网络服务，它可以管理网络设备和网络连接，在可用的情况下保持网络连接的通畅。它管理以太网、WiFi、移动宽带和PPPoE设备，同时还提供各种不同VPN服务的VPN集成。 默认情况下，Ubuntu Core 的网络管理由 systemd 的 n...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"网络管理工具","slug":"网络管理工具","count":1,"path":"api/tags/网络管理工具.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#networkmanager%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">NetworkManager的功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-networkmanager-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">安装 NetworkManager 服务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">查看网络状态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-wifi-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">配置 WiFi 连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">建立无线连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E9%9A%90%E8%97%8F%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">连接隐藏网络</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-wifi-%E6%8E%A5%E5%85%A5%E7%82%B9ap\"><span class=\"toc-text\">配置 WiFi 接入点（AP）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E8%9C%82%E7%AA%9D%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">配置蜂窝连接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">配置共享网络</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-vpn\"><span class=\"toc-text\">配置 VPN</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-openvpn-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">配置 OpenVPN 连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-wireguard-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">配置 WireGuard 连接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">编辑连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E8%BF%9E%E6%8E%A5%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">修改连接细节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ipv4-and-ipv6-%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">IPv4 and IPv6 选项</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#wifi-%E7%9C%81%E7%94%B5%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">WiFi 省电选项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">日志</span></a></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"FreeRTOS 的定时器 (Timer)","uid":"0de178335a5288a6c84f26e77dfbea47","slug":"FreeRTOS/Timer","date":"2023-05-07T09:24:00.000Z","updated":"2023-05-07T09:36:40.877Z","comments":true,"path":"api/articles/FreeRTOS/Timer.json","keywords":null,"cover":"/img/FreeRTOS/logo.jpg","text":"软件定时器用于在将来一个设定的时间或以固定频率定期的执行函数。软件定时器所执行的函数被称为软件定时器的回调函数。 软件定时器由 FreeRTOS 内核实现，并受其控制。它不需要硬件支持，也与硬件定时器或硬件计数器无关。软件计时器不使用任何处理时间，除非软件计时器回调函数正在实际执...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":3,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"FreeRTOS","slug":"FreeRTOS","count":3,"path":"api/tags/FreeRTOS.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}