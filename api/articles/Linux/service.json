{"title":"Linux 服务","uid":"d8ed3ff70bac5529479cf8a31499ebd5","slug":"Linux/service","date":"2022-05-04T04:05:00.000Z","updated":"2023-04-15T05:22:21.703Z","comments":true,"path":"api/articles/Linux/service.json","keywords":null,"cover":"/img/bg/bg2.jpg","content":"<h1 id=\"linux-服务\">Linux 服务</h1>\n<h3 id=\"daemon与服务\">daemon与服务</h3>\n<p>系统为了某些功能必须要提供一些服务（系统本身或者网络方面），这个服务就称为<code>service</code>。<code>service</code>\n的提供需要程序来运行，完成这个 <code>service</code> 的程序就称之为\n<code>daemon</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>服务的名称被建立之后，在 Linux\n中使用时，通常在服务的名称之后会加上一个<code>d</code>。</p></blockquote>\n<h3 id=\"systemd\">systemd</h3>\n<p><code>systemd</code> 全部就是仅有一个 <code>systemd</code> 服务搭配\n<code>systemctl</code> 命令来处理，无须其他额外的命令来支持。</p>\n<p><code>systemd</code>\n将所有的服务定义为一个服务单元(<code>unit</code>)，并将每个\n<code>unit</code> 归类到不同的服务类型中(<code>type</code>)中。</p>\n<p><code>systemd</code>\n将服务单元(<code>unit</code>)以下几个类型(<code>type</code>):</p>\n<ul>\n<li>service</li>\n<li>socket</li>\n<li>target</li>\n<li>path</li>\n<li>snapshot</li>\n<li>timer</li>\n<li>...</li>\n</ul>\n<p><code>systemd</code> 将许多的功能集合成为一个所谓的\n<code>target</code>\n项目，这个项目这要在设计操作环境的创建，所以是集合了许多的\n<code>daemon</code>，执行某个 <code>target</code> 就是执行很多的\n<code>daemon</code>。</p>\n<h4 id=\"systemd-配置文件放置的目录\"><code>systemd</code>\n配置文件放置的目录</h4>\n<p>服务的基本类型包括：系统服务、数据监听与交换的 <code>socket</code>\n文件服务(<code>socket</code>)、存储系统状态的快照类型、提供不同类似运行级别分类的操作环境(<code>target</code>)。</p>\n<p>文件目录：</p>\n<ul>\n<li><code>/usr/lib/systemd/system/</code>：每个服务最主要的启动脚本设置。</li>\n<li><code>/run/systemd/system/</code>：系统执行过程中所产生的服务脚本。</li>\n<li><code>/etc/systemd/system/</code>：管理员根据主机系统的需求所建立的执行脚本。</li>\n</ul>\n<p>操作系统所执行的服务均设置在<code>/etc/systemd/system/</code>\n中设置，仅是一些链接文件。而实际的启动脚本文件在\n<code>/usr/lib/systemd/system/</code>\n中，必须在该目录下才能修改相应服务的启动设置。</p>\n<h4 id=\"systemd-的-unit-类型\"><code>systemd</code> 的 <code>unit</code>\n类型</h4>\n<p>扩展名就是服务的类型。例如：<code>multipathd.service</code>\n、<code>multi-user.target</code>。</p>\n<p>几种常见的 <code>systemd</code> 的服务类型：</p>\n<table>\n<colgroup>\n<col style=\"width: 29%\" />\n<col style=\"width: 70%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">扩展名</th>\n<th style=\"text-align: left;\">主要服务功能</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>.service</code></td>\n<td style=\"text-align: left;\">一般服务类型(service\nunit)：主要是系统服务，包括服务器本身需要的本地服务以及网络服务等，经常被使用到的服务大多是这种类型。所以，这也是最常见的类型了。</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>.socket</code></td>\n<td style=\"text-align: left;\">内部程序数据交换的 <code>socket</code>\n服务(<code>socket unit</code>)：主要是 IPC(Inter-process communication)\n的传输信息 <code>socket</code> 文件 (<code>socket file</code>)\n功能。这种类型的服务通常在监控信息传递的\n<code>socket</code>文件中，当通过此 <code>socket</code>\n文件传递信息要链接服务时，就根据当时的状态将该用户的要求传送到对应的\n<code>daemon</code>，若 <code>daemon</code> 尚未启动，则启动该\n<code>daemon</code> 后在传送用户的要求。</br> 使用 <code>socket</code>\n类型的服务一般较少用到，因此在开机启动时通常会稍微延迟启动的时间。一般用于本地服务较多。</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>.target</code></td>\n<td\nstyle=\"text-align: left;\">执行环境类型(<code>target unit</code>)：其实是一群\n<code>unit</code> 的集合。</td>\n</tr>\n<tr class=\"even\">\n<td\nstyle=\"text-align: center;\"><code>.mount</code></br><code>.automount</code></td>\n<td style=\"text-align: left;\">文件系统挂载相关的服务(automount\nunit/mount unit)：例如来自网络的自动挂载、NFS\n文件系统挂载等与文件系统相关性较高的进程管理。</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>.path</code></td>\n<td style=\"text-align: left;\">检测特定文件或目录类型(path\nunit)：某些服务需要检测某些特定的目录来提供队列服务，例如最常见的打印服务，就是通过检测打印队列目录来启动打印功能。</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>timer</code></td>\n<td\nstyle=\"text-align: left;\">循环执行的服务(<code>timer unit</code>)：这个服务有点类似\nanacrontab，不过是由 <code>systemd</code> 主动提供。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"systemctl-管理服务\"><code>systemctl</code> 管理服务</h3>\n<p><code>systemd</code> 这个启动服务的机制，主要是通过一个名为\n<code>systemctl</code> 的命令来完成的。</p>\n<h4\nid=\"systemctl-管理单一服务service-unit-的启动开机启动与查看状态\"><code>systemctl</code>\n管理单一服务(<code>service unit</code>) 的启动/开机启动与查看状态</h4>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl [command] [unit]\ncommand:\nstart:\t\t立刻开启[unit]\nstop:\t\t立刻关闭[unit]\nrestart:\t立刻重新启动[unit]\nreload: \t不关闭[unit]的情况下，重新加载配置文件，让设置生效\nenable:\t\t设置开机时，[unit]自动启动\ndisable:\t关闭开机时自动启动\nstatus:\t\t当前[unit]的状态\nis-active:\t当前是否正在运行中\nis-enable:\t是否设置开机自动启动</code></pre>\n<p><code>systemctl status docker.service</code>:</p>\n<p><img src=\"/img/service/status.png\" /></p>\n<ul>\n<li>Loaded：开机是服务是否自动启动\n[<strong>enabled</strong>，<strong>disabled</strong>]</li>\n<li>Active：是否正在执行[<strong>running</strong>，<strong>dead</strong>]</li>\n</ul>\n<p>几种常见的服务状态：</p>\n<ul>\n<li>active (running)：正在运行</li>\n<li>active (exited)：仅执行一次就正常结束的服务，目前没有进程执行</li>\n<li>active\n(waiting)：正在运行中，还需要等待其他事件发生才能继续执行</li>\n<li>inactive：服务当前没有运行</li>\n</ul>\n<p><code>daemon</code> 的默认状态：</p>\n<ul>\n<li>enabled：开机自动运行</li>\n<li>disabled：开机不运行</li>\n<li>static：不可以自行启动，但是可能会其他 <code>enabled</code>\n的服务唤醒</li>\n<li>mask：<code>daemon</code>\n无论如何都不会被启动，因为已经被强制注销</li>\n</ul>\n<h4 id=\"systemctl-查看系统上的所有服务\"><code>systemctl</code>\n查看系统上的所有服务</h4>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl [command] [--type&#x3D;TPYE] [--all]\ncommand:\nlist-units:\t\t\t依据 unit 显示目前所有启动 unit，若加上 --all 会列出没有启动的\nlist-units-files:\t依据 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F; 内的文件，将所有文件列表说明\n--type&#x3D;TPYE: 服务类型: service、socket、target等</code></pre>\n<h4 id=\"systemctl-管理不同的操作环境target-unit\"><code>systemctl</code>\n管理不同的操作环境(<code>target unit</code>)</h4>\n<p><code>systemctl list-units --type=target --all</code>：</p>\n<p><img src=\"/img/service/target.png\" /></p>\n<p>与操作界面相关性较高的 <code>tatget</code> 有以下几个：</p>\n<ul>\n<li>graphical.target：命令加上图形界面，包含有 multi-user.target</li>\n<li>multi-user.target：纯命令行模式</li>\n<li>rescue.target：在无法使用 root 登录的情况下，<code>systemd</code>\n在启动时会多加一个额外的临时系统，与原本的操作系统无关，此时可以获得\nroot 权限来维护系统。</li>\n<li>emergency.target：紧急处理系统的错误，还是需要使用 root\n登录的情况，在无法使用 rescue.target 时，可以尝试这种模式</li>\n<li>shutdown.target：关机模式</li>\n<li>getty.target：可设置需要几个 tty 的操作</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl [command] [unit.target]\ncommand:\nget-default:\t获取当前的 target\nset-default:\t设置 [unit.target] 为默认的操作模式\nisolate:\t\t切换到 [unit.target] 操作模式\n\n在不重新启动的情况下，将目前操作环境改为纯命令模式，关闭图形界面\nsystemctl isolate multi-user.target</code></pre>\n<p><font color=\"#00dddd\">在 <code>target</code> 项目中必须使用\n<code>isolate</code> 才能切换操作环境，而不是 <code>start</code>\n</font></p>\n<p><code>systemd</code> 还提供可一些简单的命令来切换操作模式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl poweroff\t\t系统关机\nsystemctl reboot \t\t重新启动\nsystemctl suspend\t\t进入挂起模式\nsystemctl hibernate\t\t进入休眠模式\nsystemctl rescue\t\t强制进入休眠模式\nsystemctl emergency \t强制进入紧急恢复模式</code></pre>\n<ul>\n<li>suspend：挂起模式会将系统的状态数据保存到内存中，然后关闭大部分的系统硬件。当用户按下唤醒机器的按钮时，系统数据会在内存中恢复，然后启动大部分被关闭的硬件</li>\n<li>hibernate：休眠模式则是将系统状态保存到硬盘当中，保存完毕后，将计算机关机。</li>\n</ul>\n<h4 id=\"systemctl-分析各种服务之间的依赖关系\"><code>systemctl</code>\n分析各种服务之间的依赖关系</h4>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl list-dependencies [unit] [--reverse]\n--reverse: 反向追踪谁使用该 [unit].</code></pre>\n<p><code>systemctl list-dependencies</code>：</p>\n<p><img src=\"/img/service/dependencies.png\" /></p>\n<h4 id=\"与-systemd-的-daemon-运行过程相关的目录\">与 <code>systemd</code>\n的 <code>daemon</code> 运行过程相关的目录</h4>\n<p><code>systemd</code> 启动脚本配置文件在\n<code>/usr/lib/systemd/system/</code> 与\n<code>/etc/systemd/system/</code> 目录下。</p>\n<ul>\n<li><p><code>/usr/lib/systemd/system/</code></p>\n<p>官方提供的软件安装后，默认的启动脚本配置文件放在该目录下，这里的数据尽量不要修改，如需要修改，应该修改\n<code>/etc/systemd/system/</code> 下的文件</p></li>\n<li><p><code>/run/systemd/system/</code></p>\n<p>系统执行过程中所产生的服务脚本，其优先级高于\n<code>/usr/lib/systemd/system/</code></p></li>\n<li><p><code>/etc/systemd/system/</code></p>\n<p>管理员依据主机系统的需要所建立的执行脚本，执行优先级高于\n<code>/run/systemd/system/</code></p></li>\n<li><p><code>/etc/sysconfig/*</code></p>\n<p>服务将初始化的一些选项设置写入到这个目录</p></li>\n<li><p><code>/var/lib/</code></p>\n<p>一些会产生数据的服务都会将它的数据写入到 <code>/var/lib/</code>\n目录中。</p></li>\n<li><p><code>/run/</code></p>\n<p>放置 <code>daemon</code> 的缓存</p></li>\n</ul>\n<hr />\n<p>获取 socket 文件的位置：</p>\n<p><code>systemctl list-sockets</code>:</p>\n<p><img src=\"/img/service/sockets.png\" /></p>\n<hr />\n<p>查询服务所对应的端口，位于 <code>/etc/services</code></p>\n<p>执行 <code>cat /etc/services</code> 查看端口：</p>\n<p><img src=\"/img/service/port%20number.png\" /></p>\n<hr />\n<h4 id=\"关闭网络服务\">关闭网络服务</h4>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>会产生一个网络监听端口(port)的进程，就可以称它是网络服务</p></blockquote>\n<p>查看网络端口的方式：</p>\n<p><code>netstat -tlunp</code></p>\n<p><img src=\"/img/service/net%20port.png\" /></p>\n<p>关闭一个网络服务：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl stop avahi-daemon.service\nsystemctl stop avahi-daemon.socket\nsystemctl disable avahi-daemon.service avahi-daemon.socket</code></pre>\n<h3 id=\"systemctl-对于-service-类型的配置文件\"><code>systemctl</code>\n对于 <code>service</code> 类型的配置文件</h3>\n<ul>\n<li><code>/usr/lib/systemd/system/vsftpd.service</code>\n：官方发布默认配置文件</li>\n<li><code>/etc/systemd/system/vsftpd.service.d/custom.conf</code>：在\n<code>/etc/systemd/system</code>\n下建立与配置文件相同文件名的目录，但是要加上 <code>.d</code>\n扩展名，然后在该目录下建立配置文件即可。配置文件的扩展名最好用\n<code>.conf</code>。</li>\n<li><code>/etc/systemd/system/vsftpd.service.wants/*</code>：此目录内的文件为<strong>链接</strong>文件，设置依赖服务的链接。启动\n<code>vsftpd.service</code> 之后，最好加上该目录下建议的服务。</li>\n<li><code>/etc/systemd/system/vsftpd.service.requires/*</code>：此目录内的文件为<strong>链接</strong>文件，设置依赖服务的链接。在启动\n<code>vsftpd.service</code> 之前，需要事先启动的服务。</li>\n</ul>\n<p><img src=\"/img/service/sshd.png\" /></p>\n<p>配置文件中，能够将整个设置分为三个部分：</p>\n<ul>\n<li>[Unit]：<code>unit</code> 本身的说明，以及其他依赖\n<code>deamon</code> 的设置，包括在什么服务之后才启动此 unit\n之类的设置值。</li>\n<li>[Service]、[Socket]、[Timer]、[Mount]、[Path]：不同的 unit\n类型就要使用相应的设置项目。这个项目主要用来规范服务启动的脚本、环境配置文件名、重新启动的方式等。、</li>\n<li>[Install] ：将此 <code>unit</code> 安装到哪个 target 里去</li>\n</ul>\n<p>配置文件内的设置规则：</p>\n<ul>\n<li>设置项目通常是可以重复的，例如可以重复设置两个 After\n在配置文件中，但是会替换前面的。</li>\n<li>如果设置参数需要有\n【是/否】的项目(布尔值，Boolean)，可以使用1、yes、true、on代表启动，用0、no、false、off代表关闭</li>\n<li>空白行、开头为 # 或 ；的那一行，代表注释</li>\n</ul>\n<h4 id=\"两个-vsftpd-运行的实例\">两个 vsftpd 运行的实例</h4>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 1. 建立所需要的配置文件\ncd &#x2F;etc&#x2F;vsftpd\ncp vsftpd.conf vsftpd2.conf\n# 修改端口\nvim vsftpd2.conf\nlisten_port&#x3D;555\n# 2. 处理启动脚本设置\ncd &#x2F;etc&#x2F;systemd&#x2F;system\ncp &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;vsftpd.service vsftpfd2.service\nvim vsftpd.service\n# 3. 重新加载 systemd 的脚本配置文件内容\nsystemctl daemon-reload</code></pre>\n<h3 id=\"自定义服务\">自定义服务</h3>\n<p>脚本：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># vim &#x2F;backups&#x2F;backup.sh\n----\n#! &#x2F;bin&#x2F;bash\nsource &#x3D; &quot;&#x2F;etc &#x2F;home &#x2F;root &#x2F;var&#x2F;lib &#x2F;var&#x2F;spool&#x2F;&#123;cron, at, mail&#125;&quot;\ntarget &#x3D; &quot;&#x2F;backups&#x2F;backup-system-$(data +%Y-%m-%d).tar.gz&quot;\n[ ! -d &#x2F;backups ] &amp;&amp; mkdir &#x2F;backups\ntar -zcvf $&#123;target&#125; $&#123;source&#125; $&gt; &#x2F;backups&#x2F;backup.log\n# chmod a+x &#x2F;backups&#x2F;backup.sh</code></pre>\n<p>设计一个名为 <code>bachup.service</code> 的启动脚本设置：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;backup.service\n[Unit] \nDescription&#x3D;backup my server\nRequires&#x3D;atd.service\n[Service]\nType&#x3D;simple\nExecStart&#x3D;&#x2F;bin&#x2F;bash -c &quot; echo &#x2F;backups&#x2F;bachup.sh | at now&quot;\n[Install]\nWantedBy&#x3D;multi-user.target</code></pre>\n<h3 id=\"systemctl-针对-timer-的配置文件\"><code>systemctl</code> 针对\n<code>timer</code> 的配置文件</h3>\n<p>任务需求：</p>\n<p>想要使用 systemd 的 timer 功能，必须要有几个要件：</p>\n<ul>\n<li>操作系统的 <code>timer.target</code> 一定要启动。</li>\n<li>要有个 <code>sname.service</code> 的服务存在(sname\n是你自己指定的名称)</li>\n<li>要有个 <code>sname.timer</code> 的时间启动服务存在</li>\n</ul>\n<p><font color='#00dddd'> sname.timer </font> 的设置值</p>\n<p>可以到 <code>/etc/systemd/system</code> 下面去建立一个\n<code>*.timer</code> 文件</p>\n<p>基本设置如下：</p>\n<table>\n<colgroup>\n<col style=\"width: 22%\" />\n<col style=\"width: 77%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>设置参数</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>OnActiveSec</td>\n<td>当 timer.target 启动多久后才执行这个 unit</td>\n</tr>\n<tr class=\"even\">\n<td>OnBootSec</td>\n<td>当启动完成后多久之后才执行</td>\n</tr>\n<tr class=\"odd\">\n<td>OnStartupSec</td>\n<td>当 systemd 第一次启动之后过多久才执行</td>\n</tr>\n<tr class=\"even\">\n<td>OnUnitActiveSec</td>\n<td>这个 timer 配置文件所管理的那个 unit\n服务在最后一次启动后，隔多久再执行一次的意思</td>\n</tr>\n<tr class=\"odd\">\n<td>OnUnitlnactiveSec</td>\n<td>这个 timer 配置文件所管理的那个 unit\n服务在最后一次停止后，隔多久再执行一次的意思</td>\n</tr>\n<tr class=\"even\">\n<td>OnCalendar</td>\n<td>使用实际时间（非循环时间）的方式来启动服务的意思</td>\n</tr>\n<tr class=\"odd\">\n<td>Unit</td>\n<td>一般来说不太需要设置，因此如同上面提到的，基本上我们设置都是\nsname.server + sname.timer，那如果你的 sname 并不相同时，那在 .timer\n的文件中，就得要指定是哪个 service unit</td>\n</tr>\n<tr class=\"even\">\n<td>Persistent</td>\n<td>当使用 OnCalendar\n的设置时，指定该功能要不要持续进行的意思，通常是设置为\nyes，比较能够满足类似 anacron 的功能</td>\n</tr>\n</tbody>\n</table>\n<p><font color='#00dddd'>使用于 OnCalendar 的时间 </font></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法：英文周名 YYYY-MM-DD HH:MM:SS</p>\n<p>范例：Thu 2015-08-13 13:40:00</p></blockquote>\n<p>也可以直接使用间隔时间来处理。常用的间隔时间单位有：</p>\n<ul>\n<li>us 或 usec：微妙</li>\n<li>ms 或 msec：毫秒</li>\n<li>s、sec、second、seconds</li>\n<li>m、min、minute、minutes</li>\n<li>h、hr、hour、hours</li>\n<li>d、day、days</li>\n<li>w、week、weeks</li>\n<li>month、months</li>\n<li>y、year、years</li>\n</ul>\n<p>常见的使用范例：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>隔 3 小时： 3h 或 3hr 或 3hours</p>\n<p>隔 300 分钟过 10 秒： 10s 300m</p>\n<p>隔 5 天又 100 分钟： 100m 5 day</p></blockquote>\n<p><font color='#00dddd'>一个循环时间运行的案例</font>：</p>\n<ul>\n<li>启动后 2 小时开始执行一次 backup.service</li>\n<li>自从第一次执行后，未来每两天执行一次 backup.service</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;backup.timer\n[Unit]\nDescription&#x3D;backup my server timer\n[Timer]\nOnBootSec&#x3D;2hrs\nOnUnitActiveSec&#x3D;2days\n[Install]\nWantedBy&#x3D;multi-user.target</code></pre>\n<p><font color='#00dddd'>固定日期运行案例</font>：</p>\n<ul>\n<li>星期天凌晨2点运行</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;backup2.timer\n[Unit]\nDescription&#x3D;backup my server timer2\n[Timer]\nOnCalendar&#x3D;Sun *-*-* 02:00:00\nPersistent&#x3D;true\nUnit&#x3D;backup.service\n[Install]\nWantedBy&#x3D;multi-user.target</code></pre>\n","text":"Linux 服务 daemon与服务 系统为了某些功能必须要提供一些服务（系统本身或者网络方面），这个服务就称为service。service 的提供需要程序来运行，完成这个 service 的程序就称之为 daemon。 服务的名称被建立之后，在 Linux 中使用时，通常在服...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux 服务","slug":"Linux-服务","count":1,"path":"api/tags/Linux-服务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#linux-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">Linux 服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#daemon%E4%B8%8E%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">daemon与服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#systemd\"><span class=\"toc-text\">systemd</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#systemd-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%94%BE%E7%BD%AE%E7%9A%84%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">systemd\n配置文件放置的目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#systemd-%E7%9A%84-unit-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">systemd 的 unit\n类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#systemctl-%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">systemctl 管理服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#systemctl-%E7%AE%A1%E7%90%86%E5%8D%95%E4%B8%80%E6%9C%8D%E5%8A%A1service-unit-%E7%9A%84%E5%90%AF%E5%8A%A8%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%B8%8E%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">systemctl\n管理单一服务(service unit) 的启动&#x2F;开机启动与查看状态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#systemctl-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84%E6%89%80%E6%9C%89%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">systemctl\n查看系统上的所有服务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#systemctl-%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%9A%84%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83target-unit\"><span class=\"toc-text\">systemctl\n管理不同的操作环境(target unit)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#systemctl-%E5%88%86%E6%9E%90%E5%90%84%E7%A7%8D%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">systemctl\n分析各种服务之间的依赖关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8E-systemd-%E7%9A%84-daemon-%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">与 systemd\n的 daemon 运行过程相关的目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%97%AD%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">关闭网络服务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#systemctl-%E5%AF%B9%E4%BA%8E-service-%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">systemctl\n对于 service 类型的配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E4%B8%AA-vsftpd-%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">两个 vsftpd 运行的实例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">自定义服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#systemctl-%E9%92%88%E5%AF%B9-timer-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">systemctl 针对\ntimer 的配置文件</span></a></li></ol></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MQTT V3.1","uid":"a903464ea5b37de55ddd5756ddfafbfa","slug":"IOT/Mqtt","date":"2022-06-18T12:30:03.000Z","updated":"2023-04-15T05:21:05.900Z","comments":true,"path":"api/articles/IOT/Mqtt.json","keywords":null,"cover":"/img/bg/bg1.jpg","text":"消息格式 每个 MQTT 消息可能包含三个部分： Fixed header(全部消息类型) Variable header(部分消息类型) Payload(部分消息类型) Fixed header 每个 MQTT 消息类型都必须包含 fixed header. fixed hea...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"通信协议","slug":"通信协议","count":2,"path":"api/categories/通信协议.json"}],"tags":[{"name":"MQTT","slug":"MQTT","count":1,"path":"api/tags/MQTT.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"路径规划算法","uid":"2b59eb5778e5da9b12f5210e8d61016e","slug":"Self-Driving/PathPlan","date":"2022-05-03T16:00:00.000Z","updated":"2023-04-15T05:23:56.570Z","comments":true,"path":"api/articles/Self-Driving/PathPlan.json","keywords":null,"cover":"/img/PathPlaning/A-Star-1.png","text":"1. 自动驾驶汽车定位-感知-规划-决策-控制概述 定位 定位，即通过GPS、惯导、激光雷达等传感器，获取车辆的位置和航向信息。 绝对定位是指通过GPS实现，采用双天线，通过卫星获得车辆在地球上的绝对位置和航向信息。 相对定位是指根据车辆的初始位姿，通过惯导、里程计等传感器获得加...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"自动驾驶","slug":"自动驾驶","count":1,"path":"api/categories/自动驾驶.json"}],"tags":[{"name":"路径规划","slug":"路径规划","count":1,"path":"api/tags/路径规划.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}