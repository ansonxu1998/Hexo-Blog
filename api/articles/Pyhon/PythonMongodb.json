{"title":"Python MongoDB","uid":"eb44103d9200dfa14741693bcd11c4b0","slug":"Pyhon/PythonMongodb","date":"2022-10-20T07:00:00.000Z","updated":"2023-08-19T06:41:45.374Z","comments":true,"path":"api/articles/Pyhon/PythonMongodb.json","keywords":null,"cover":"/img/python/logo.png","content":"<h2 id=\"pymongo\">PyMongo</h2>\n<p>Python 要连接 MongoDB 需要MongoDB 驱动，这里使用 PyMongo 驱动连接。</p>\n<h3 id=\"pip-安装\">pip 安装</h3>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>$ pip install pymongo</p></blockquote>\n<p>安装指定版本：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>$ pip install pymongo==3.5.1</p></blockquote>\n<h3 id=\"测试pymongo\">测试PyMongo</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo</code></pre>\n<h2 id=\"创建数据库\">创建数据库</h2>\n<h3 id=\"创建一个数据库\">创建一个数据库</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient - pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&#39;runoobdb&#39;]</code></pre>\n<h3 id=\"判断数据库是否存在\">判断数据库是否存在·</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient - pymongo.MongoClient(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#39;)\n\ndblist &#x3D; myclient.list_database_names()\nif &quot;runoobdb&quot; in dblist:\n    print(&quot;数据库已存在&quot;)</code></pre>\n<h2 id=\"创建集合\">创建集合</h2>\n<p>MongoDB 中的集合类似 SQL 的表</p>\n<h3 id=\"创建一个集合\">创建一个集合</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\n\nmycol &#x3D; mydb[&quot;sites&quot;]</code></pre>\n<h3 id=\"判断集合是否存在\">判断集合是否存在</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\n\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\n\ncollist &#x3D; mydb.list_collection_names()\nif &quot;sites&quot; in collist:\n    print(&quot;集合已存在&quot;)</code></pre>\n<h2 id=\"增删改查等操作\">增、删、改、查等操作</h2>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Pytho Mongodb 插入文档</strong></p></blockquote>\n<h3 id=\"插入集合\">插入集合</h3>\n<p>集合中插入文档使用<code>insert_one</code>方法，该方法的第一参数是字典<code>name =&gt; value</code>对。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n\nmydict &#x3D; &#123;&quot;name&quot;: &quot;RUNOOB&quot;, &quot;alexa&quot;: &quot;10000&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.runoob.com&quot;&#125;\n\nx &#x3D; mycol.insert_one(mydict)\nprint(x)</code></pre>\n<p>执行的输出结果：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&lt;pymongo.results.InsertOneResult object at 0x10a34b288&gt;</p></blockquote>\n<h3 id=\"返回-_id-字段\">返回 _id 字段</h3>\n<p><code>insert_one()</code>方法返回 <strong>InsertOneResult</strong> 对象，该对象包含 <strong>inserted_id</strong> 属性，它是插入文档的 <strong>id</strong> 值</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;)\nmydb &#x3D; myclient[&#39;runoobdb&#39;]\nmycol &#x3D; mydb[&#39;sites&#39;]\n\nmydict &#x3D; &#123;&quot;name&quot;: &quot;Google&quot;, &quot;alexa&quot;: &quot;1&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.google.com&quot;&#125;\n\nx &#x3D; mycol.insert_one(mydict)\n\nprint(x.inserted_id)</code></pre>\n<p>执行输出结果为：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>5b2369cac315325f3698a1cf</p></blockquote>\n<h3 id=\"插入多个文档\">插入多个文档</h3>\n<p>集合中插入多个文档使用 <code>insert_many()</code> 方法，该方法的第一个参数是字典列表。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmylist &#x3D; [\n  &#123; &quot;name&quot;: &quot;Taobao&quot;, &quot;alexa&quot;: &quot;100&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.taobao.com&quot; &#125;,\n  &#123; &quot;name&quot;: &quot;QQ&quot;, &quot;alexa&quot;: &quot;101&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.qq.com&quot; &#125;,\n  &#123; &quot;name&quot;: &quot;Facebook&quot;, &quot;alexa&quot;: &quot;10&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.facebook.com&quot; &#125;,\n  &#123; &quot;name&quot;: &quot;知乎&quot;, &quot;alexa&quot;: &quot;103&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.zhihu.com&quot; &#125;,\n  &#123; &quot;name&quot;: &quot;Github&quot;, &quot;alexa&quot;: &quot;109&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.github.com&quot; &#125;\n]\n \nx &#x3D; mycol.insert_many(mylist)\n \n# 输出插入的所有文档对应的 _id 值\nprint(x.inserted_ids)</code></pre>\n<p><code>insert_many()</code> 方法返回 <strong>InsetManyResult</strong> 对象，该对象包含 <strong>inserted_ids</strong> 属性，该属性保存着所有插入文档的 <strong>id</strong> 值。</p>\n<h3 id=\"插入指定-_id-的多个文档\">插入指定 _id 的多个文档</h3>\n<p>我们也可以自己指定 id，插入，以下实例我们在 <strong>site2</strong> 集合中插入数据，**_id** 为我们指定的：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;site2&quot;]\n \nmylist &#x3D; [\n  &#123; &quot;_id&quot;: 1, &quot;name&quot;: &quot;RUNOOB&quot;, &quot;cn_name&quot;: &quot;菜鸟教程&quot;&#125;,\n  &#123; &quot;_id&quot;: 2, &quot;name&quot;: &quot;Google&quot;, &quot;address&quot;: &quot;Google 搜索&quot;&#125;,\n  &#123; &quot;_id&quot;: 3, &quot;name&quot;: &quot;Facebook&quot;, &quot;address&quot;: &quot;脸书&quot;&#125;,\n  &#123; &quot;_id&quot;: 4, &quot;name&quot;: &quot;Taobao&quot;, &quot;address&quot;: &quot;淘宝&quot;&#125;,\n  &#123; &quot;_id&quot;: 5, &quot;name&quot;: &quot;Zhihu&quot;, &quot;address&quot;: &quot;知乎&quot;&#125;\n]\n \nx &#x3D; mycol.insert_many(mylist)\n \n# 输出插入的所有文档对应的 _id 值\nprint(x.inserted_ids)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Python Mongodb 查询文档</strong></p></blockquote>\n<h3 id=\"查询集合中所有数据\">查询集合中所有数据</h3>\n<p><code>find()</code> 方法可以查询集合中的所有数据，类似 SQL 中的 <code>SELECT *</code> 操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&#39;runoobdb&#39;]\nmycol &#x3D; mydb[&#39;sites&#39;]\n\nfor x in mycol.find():\n    print(x)</code></pre>\n<h3 id=\"查询指定字段的数据\">查询指定字段的数据</h3>\n<p>可以使用 <code>find()</code> 方法来查询指定字段的数据，将要返回的字段对应值设置为1。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n\nfor x in mycol.find(&#123;&#125;, &#123;&quot;_id&quot;: 0, &quot;name&quot;: 1, &quot;alexa&quot;: 1&#125;)</code></pre>\n<h3 id=\"根据指定条件查询\">根据指定条件查询</h3>\n<p>可以在 <code>find()</code> 中设置参数来过滤数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nimport pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;name&quot;: &quot;RUNOOB&quot; &#125;\n \nmydoc &#x3D; mycol.find(myquery)\n \nfor x in mydoc:\n  print(x)</code></pre>\n<h3 id=\"高级查询\">高级查询</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;name&quot;: &#123; &quot;$gt&quot;: &quot;H&quot; &#125; &#125;\n \nmydoc &#x3D; mycol.find(myquery)\n \nfor x in mydoc:\n  print(x)</code></pre>\n<h3 id=\"使用正则表达式查询\">使用正则表达式查询</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;name&quot;: &#123; &quot;$regex&quot;: &quot;^R&quot; &#125; &#125;\n \nmydoc &#x3D; mycol.find(myquery)\n \nfor x in mydoc:\n  print(x)</code></pre>\n<h3 id=\"返回指定条数记录\">返回指定条数记录</h3>\n<p>要对查询结果设置指定条数的记录可以使用 <code>limit()</code> 方法，该方法只接受一个数字参数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyresult &#x3D; mycol.find().limit(3)\n \n# 输出结果\nfor x in myresult:\n  print(x)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Python Mongodb 修改文档</strong></p></blockquote>\n<p>可以在 MongoDB 中使用 <code>update_one()</code> 方法修改文档中的记录。该方法第一个参数为查询条件，第二个参数为要修改的字段。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;alexa&quot;: &quot;10000&quot; &#125;\nnewvalues &#x3D; &#123; &quot;$set&quot;: &#123; &quot;alexa&quot;: &quot;12345&quot; &#125; &#125;\n \nmycol.update_one(myquery, newvalues)\n \n# 输出修改后的  &quot;sites&quot;  集合\nfor x in mycol.find():\n  print(x)</code></pre>\n<p><code>update_one()</code> 方法只能修改匹配到的第一条记录，如果要修改所有匹配到的记录，可以使用 <code>update_many()</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;name&quot;: &#123; &quot;$regex&quot;: &quot;^F&quot; &#125; &#125;\nnewvalues &#x3D; &#123; &quot;$set&quot;: &#123; &quot;alexa&quot;: &quot;123&quot; &#125; &#125;\n \nx &#x3D; mycol.update_many(myquery, newvalues)\n \nprint(x.modified_count, &quot;文档已修改&quot;)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>排序</strong></p></blockquote>\n<p><code>sort()</code> 方法可以指定升序或降序排序。</p>\n<p><code>sort()</code> 方法第一个参数为要排序的字段，第二个字段指定排序规则，<strong>1</strong>为升序，<strong>-1</strong>为降序，默认为升序。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient(&quot;runoob&quot;)\nmycol &#x3D; mydb[&quot;sites&quot;]\n\nmydoc &#x3D; mycol.find().sort(&quot;alexa&quot;)\nfor x in mydoc:\n    print(x)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Python Mongodb 删除数据</strong></p></blockquote>\n<p>我们可以使用<code>delete_one()</code> 方法来删除一个文档，该方法第一个参数为查询对象，指定要删除的数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n\nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;name&quot;: &quot;Taobao&quot; &#125;\n \nmycol.delete_one(myquery)\n \n# 删除后输出\nfor x in mycol.find():\n  print(x)</code></pre>\n<p>可以使用 <code>delete_many()</code> 方法来删除多个文档，该方法第一个参数为查询对象，指定要删除哪些数据。</p>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmyquery &#x3D; &#123; &quot;name&quot;: &#123;&quot;$regex&quot;: &quot;^F&quot;&#125; &#125;\n \nx &#x3D; mycol.delete_many(myquery)\n \nprint(x.deleted_count, &quot;个文档已删除&quot;)</code></pre></p>\n<h3 id=\"删除集合中的所有文档\">删除集合中的所有文档</h3>\n<p><code>delete_many()</code> 方法如果传入的是一个空的查询对象，则会删除集合中的所有文档：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nx &#x3D; mycol.delete_many(&#123;&#125;)\n \nprint(x.deleted_count, &quot;个文档已删除&quot;)</code></pre>\n<h3 id=\"删除集合\">删除集合</h3>\n<p>可以使用 <code>drop()</code> 方法来删除一个集合。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pymongo\n \nmyclient &#x3D; pymongo.MongoClient(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;)\nmydb &#x3D; myclient[&quot;runoobdb&quot;]\nmycol &#x3D; mydb[&quot;sites&quot;]\n \nmycol.drop()</code></pre>\n<h3 id=\"counting\">Counting</h3>\n<p>If we just want to know how many document match a query we can perform a <code>count_documents()</code> operation instead of a full query. We can get a count of all the documents in a collection:</p>\n<pre class=\"line-numbers language-phthon\" data-language=\"phthon\"><code class=\"language-phthon\">posts.count_documents(&#123;&#125;)</code></pre>\n<p>of just of those documents that match a specific query:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">posts.count_documents(&#123;&quot;author&quot;: &quot;Mike&quot;&#125;)</code></pre>\n<h3 id=\"range-queries\">Range Queries</h3>\n<p>MongoDB supports many different types of advanced queries.</p>\n<p>As an example, lets perform a query where we limit reults to posts older than a certain date, but also sort the results by author:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d &#x3D; datetime.datetime(2009, 11, 12, 12)\nfor post in posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: d&#125;&#125;).sort(&quot;author&quot;):\n    pprint.pprint(post)</code></pre>\n<p>Here we use the special <code>$lt</code> operator to do a range query, and also call <code>sort()</code> to sort the results by author.</p>\n<h3 id=\"indexing\">Indexing</h3>\n<p>Adding indexes can help accelerate certain queries and can also additional functionality to querying and storing documents. In this example, we'll demonstrate how to craete a unique index on a key that rejects documents whose value for that key already exists in the index.</p>\n<p>First, we'll need to create the index:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">result &#x3D; db.profiles.create_index([(&#39;user_id&#39;, pymongo.ASCENDING)], unique&#x3D;True)\nsorted(list(db.profiles.index_information()))</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Notice that we have two indexes now: one is the index on <code>_id</code> that MongoDB creats automatically, and the other is the index on <code>user_id</code> we just created.</p></blockquote>\n<p>The index prevents us from inserting a document whose <code>user_id</code> is already in the collections:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">new_profile &#x3D; &#123;&#39;user_id&#39;: 213, &#39;name&#39;: &#39;Drew&#39;&#125;\nduplicate_profile &#x3D; &#123;&#39;user_id&#39;: 212, &#39;name&#39;: &#39;Tommy&#39;&#125;\nresult &#x3D; db.profiles.insert_one(new_profile)  # This is fine.\nresult &#x3D; db.profiles.insert_one(duplicate_profile)\n# output:\nTraceback (most recent call last):\nDuplicateKeyError: E11000 duplicate key error index: test_database.profiles.$user_id_1 dup key: &#123; : 212 &#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Indexes</strong></p></blockquote>\n<p>Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of document it must inspect.</p>\n<p>Indexes are special data structures that store a small portion of the collection's data set in an easy to traverse form. The index stores the value of a specific field or set of fields, ordered by the value of the field. The ordering of the index entries supports efficient equality matches and range-based query operarions. In addition, MongoDB can return sorted results by using the ordering in the index.</p>\n<p>The following diagram illustrates a query that selects and orders the matching document using an index:</p>\n<figure>\n<img src=\"https://docs.mongodb.com/manual/images/index-for-sort.bakedsvg.svg\" alt=\"\" /><figcaption>index1</figcaption>\n</figure>\n<h2 id=\"examples\">Examples</h2>\n<ul>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/aggregation.html\">Aggregation Examples</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/authentication.html\">Authentication Examples</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/collations.html\">Collations</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/copydb.html\">Copying a Database</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/custom_type.html\">Custom Type Example</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/bulk.html\">Bulk Write Operations</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/datetimes.html\">Datetimes and Timezones</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/geo.html\">Geospatial Indexing Example</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/gevent.html\">Gevent</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/gridfs.html\">GridFS Example</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/high_availability.html\">High Availability and PyMongo</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/mod_wsgi.html\">PyMongo and mod_wsgi</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/server_selection.html\">Server Selector Example</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/tailable.html\">Tailable Cursors</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/tls.html\">TLS/SSL and PyMongo</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/encryption.html\">Client-Side Field Level Encryption</a></li>\n<li><a href=\"https://pymongo.readthedocs.io/en/stable/examples/uuid.html\">Handling UUID Data</a></li>\n</ul>\n","text":"PyMongo Python 要连接 MongoDB 需要MongoDB 驱动，这里使用 PyMongo 驱动连接。 pip 安装 $ pip install pymongo 安装指定版本： $ pip install pymongo==3.5.1 测试PyMongo impor...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Python","slug":"Python","count":5,"path":"api/categories/Python.json"}],"tags":[{"name":"Python tips","slug":"Python-tips","count":5,"path":"api/tags/Python-tips.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pymongo\"><span class=\"toc-text\">PyMongo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pip-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">pip 安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95pymongo\"><span class=\"toc-text\">测试PyMongo</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">创建数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">创建一个数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">判断数据库是否存在·</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%9B%86%E5%90%88\"><span class=\"toc-text\">创建集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88\"><span class=\"toc-text\">创建一个集合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">判断集合是否存在</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%AD%89%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">增、删、改、查等操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E9%9B%86%E5%90%88\"><span class=\"toc-text\">插入集合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E-_id-%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">返回 _id 字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E5%A4%9A%E4%B8%AA%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">插入多个文档</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%8C%87%E5%AE%9A-_id-%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">插入指定 _id 的多个文档</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E9%9B%86%E5%90%88%E4%B8%AD%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">查询集合中所有数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">查询指定字段的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E6%8C%87%E5%AE%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">根据指定条件查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">高级查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">使用正则表达式查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E6%9D%A1%E6%95%B0%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">返回指定条数记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">删除集合中的所有文档</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%9B%86%E5%90%88\"><span class=\"toc-text\">删除集合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#counting\"><span class=\"toc-text\">Counting</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#range-queries\"><span class=\"toc-text\">Range Queries</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#indexing\"><span class=\"toc-text\">Indexing</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#examples\"><span class=\"toc-text\">Examples</span></a></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"矩阵的导数运算(1)","uid":"d97c1a68285e6aac869410b1223c6673","slug":"Math/矩阵的导数运算1","date":"2023-02-10T08:37:00.000Z","updated":"2023-04-17T07:50:26.463Z","comments":true,"path":"api/articles/Math/矩阵的导数运算1.json","keywords":null,"cover":"/img/bg/math.jpg","text":"矩阵的导数运算 (1) 标量方程对向量的导数： 定义： - 标量 [] - 向量 [] 求导结果的行数与分母相同，称为分母布局(Denominator Layout) 行数和分子相同，称为分子布局(Numerator Layout) 例 ， 分母布局 分子布局 向量方程对向量的导...","link":"","photos":[],"count_time":{"symbolsCount":241,"symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":3,"path":"api/categories/数学.json"}],"tags":[{"name":"矩阵求导","slug":"矩阵求导","count":1,"path":"api/tags/矩阵求导.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"STM32 DMA","uid":"da1a2b22445c6e9d06b74da423642c5e","slug":"MCU/STM32-DMA","date":"2022-10-14T16:00:00.000Z","updated":"2023-05-11T12:11:10.447Z","comments":true,"path":"api/articles/MCU/STM32-DMA.json","keywords":null,"cover":"/img/STM32-GPIO/STM32-logo.jpg","text":"DMA 的介绍 直接内存访问(Direct memory accesss，DMA) 用于在外设和内存之间以及内存到内存之间提供高速的数据传输。数据可以通过 DMA 快速传输，不需要任何 CPU 操作。这样可以节约 CPU 资源。 两个 DMA 控制器总共有 12 个通道（7 个用...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"单片机","slug":"单片机","count":4,"path":"api/categories/单片机.json"}],"tags":[{"name":"STM32","slug":"STM32","count":4,"path":"api/tags/STM32.json"},{"name":"DMA","slug":"DMA","count":1,"path":"api/tags/DMA.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}