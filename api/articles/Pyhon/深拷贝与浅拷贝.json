{"title":"Python 的深拷贝和浅拷贝","uid":"5badb916fa8f30fce64229fc7b4b0982","slug":"Pyhon/深拷贝与浅拷贝","date":"2022-09-27T11:01:00.000Z","updated":"2023-05-05T08:22:12.120Z","comments":true,"path":"api/articles/Pyhon/深拷贝与浅拷贝.json","keywords":null,"cover":"/img/python/logo.png","content":"<h1 id=\"python-的深拷贝和浅拷贝\">Python 的深拷贝和浅拷贝</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [1, 2, 3, [1, 2, 3, [4, 5]]]\nb &#x3D; a</code></pre>\n<p>当使用赋值运算符 <code>=</code>，a 和 b\n两个变量指向的同一个地址：</p>\n<p><img src=\"/img/python/2022-9-27-1.png\" /></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [1, 2, 3, [1, 2, 3, [4, 5]]]\nc &#x3D; a.cope()</code></pre>\n<p>当列表具有多层时，<code>copy()</code>\n仅拷贝一层(<strong>浅拷贝</strong>)，而深层的列表依然指向原列表的地址：</p>\n<p><img src=\"/img/python/2022-09-27-2.png\" /></p>\n<p>修改第一层列表的值并不会影响原有列表，但是修改深层列表的原有列表：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c[3][0] &#x3D; 10</code></pre>\n<p><img src=\"/img/python/2022-09-27-3.png\" /></p>\n<p>若要完全拷贝(<strong>深拷贝</strong>)多层列表 a，则需要使用\n<code>copy</code> 库中的 <code>deepcopy()</code> 函数实现：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import copy\nd &#x3D; copy.deepcopy(a)</code></pre>\n<p><img src=\"/img/python/2022-09-27-4.png\" /></p>\n<p>此时，对于 列表 d 的修改不会对原有列表 a 产生任何影响。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Python\n中的拷贝仅对于可变量如列表、字典等，而不可变的量如常量、元组等，则没有拷贝的属性。</p></blockquote>\n","text":"Python 的深拷贝和浅拷贝 a &#x3D; [1, 2, 3, [1, 2, 3, [4, 5]]] b &#x3D; a 当使用赋值运算符 =，a 和 b 两个变量指向的同一个地址： a &#x3D; [1, 2, 3, [1, 2, 3, [4, 5]]] c &#x3...","link":"","photos":[],"count_time":{"symbolsCount":431,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":5,"path":"api/categories/Python.json"}],"tags":[{"name":"Python tips","slug":"Python-tips","count":5,"path":"api/tags/Python-tips.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python-%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">Python 的深拷贝和浅拷贝</span></a></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Python 高级应用","uid":"b3283c8479bedbfcba4845761e4e6510","slug":"Pyhon/Python高级","date":"2022-09-28T07:00:00.000Z","updated":"2023-08-19T06:41:45.390Z","comments":true,"path":"api/articles/Pyhon/Python高级.json","keywords":null,"cover":"/img/python/logo.png","text":"语法糖 语法糖(Syntactic suger)，也译为语法糖衣，是由英国计算机科学家Peter J.Landin发明的一个术语，指计算机语言中添加某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少代码出错的机会。就相...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Python","slug":"Python","count":5,"path":"api/categories/Python.json"}],"tags":[{"name":"Python tips","slug":"Python-tips","count":5,"path":"api/tags/Python-tips.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"AD20 使用笔记","uid":"c1235f99efb341252757b2cde16e8265","slug":"Altium-Designer/AD20使用笔记","date":"2022-09-19T06:48:00.000Z","updated":"2023-04-15T05:03:15.450Z","comments":true,"path":"api/articles/Altium-Designer/AD20使用笔记.json","keywords":null,"cover":"/img/EDA2AD/AD logo.jpg","text":"AD20 使用笔记 网格设置 Altium Designer 20 一共有 3 种栅格：Grids、Gudies 和 Axes。 Grids 是最常用的普通栅格。 Grids 栅格的设置有： G 键设置栅格大小 Ctrl + G 设置栅格属性 自定义区域栅格 栅格捕捉开关： Gu...","link":"","photos":[],"count_time":{"symbolsCount":761,"symbolsTime":"1 mins."},"categories":[{"name":"电子技术","slug":"电子技术","count":3,"path":"api/categories/电子技术.json"}],"tags":[{"name":"Altium Designer","slug":"Altium-Designer","count":2,"path":"api/tags/Altium-Designer.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}