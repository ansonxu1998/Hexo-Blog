{"title":"Python 的深拷贝和浅拷贝","uid":"5badb916fa8f30fce64229fc7b4b0982","slug":"Pyhon/深拷贝与浅拷贝","date":"2022-09-27T11:01:00.000Z","updated":"2022-09-27T11:39:49.340Z","comments":true,"path":"api/articles/Pyhon/深拷贝与浅拷贝.json","keywords":null,"cover":[],"content":"<h1 id=\"python-的深拷贝和浅拷贝\">Python 的深拷贝和浅拷贝</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]]]<br>b = a<br></code></pre></div></td></tr></table></figure>\n<p>当使用赋值运算符 <code>=</code>，a 和 b\n两个变量指向的同一个地址：</p>\n<p><img src=\"/img/python/2022-9-27-1.png\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]]]<br>c = a.cope()<br></code></pre></div></td></tr></table></figure>\n<p>当列表具有多层时，<code>copy()</code>\n仅拷贝一层(<strong>浅拷贝</strong>)，而深层的列表依然指向原列表的地址：</p>\n<p><img src=\"/img/python/2022-09-27-2.png\" /></p>\n<p>修改第一层列表的值并不会影响原有列表，但是修改深层列表的原有列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">c[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">10</span><br></code></pre></div></td></tr></table></figure>\n<p><img src=\"/img/python/2022-09-27-3.png\" /></p>\n<p>若要完全拷贝(<strong>深拷贝</strong>)多层列表 a，则需要使用\n<code>copy</code> 库中的 <code>deepcopy()</code> 函数实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> copy<br>d = copy.deepcopy(a)<br></code></pre></div></td></tr></table></figure>\n<p><img src=\"/img/python/2022-09-27-4.png\" /></p>\n<p>此时，对于 列表 d 的修改不会对原有列表 a 产生任何影响。</p>\n<blockquote>\n<p>Python\n中的拷贝仅对于可变量如列表、字典等，而不可变的量如常量、元组等，则没有拷贝的属性。</p>\n</blockquote>\n","text":"Python 的深拷贝和浅拷贝 12a = [1, 2, 3, [1, 2, 3, [4, 5]]]b = a 当使用赋值运算符 =，a 和 b 两个变量指向的同一个地址： 12a = [1, 2, 3, [1, 2, 3, [4, 5]]]c = a.cope() 当列表具有多...","link":"","photos":[],"count_time":{"symbolsCount":398,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":1,"path":"api/categories/Python.json"}],"tags":[{"name":"Python tips","slug":"Python-tips","count":1,"path":"api/tags/Python-tips.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python-%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">Python 的深拷贝和浅拷贝</span></a></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Amesim 与 Simulink 的联合仿真","uid":"51d61b1e82665e319117cf3815ca2bc7","slug":"Amesim/Amesim与Simulink联合仿真","date":"2022-09-28T07:12:00.000Z","updated":"2023-02-10T09:13:34.660Z","comments":true,"path":"api/articles/Amesim/Amesim与Simulink联合仿真.json","keywords":null,"cover":[],"text":"Amesim 与 Simulink 的联合仿真 环境配置 软件版本为：Matlab 2020b 和 Amesim 2021.1，编译器使用 MinGW-w64 附件安装： 首先需要在 Matlab 中安装附件 MATLAB Support for MinGW-w64 C/C++ ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"Amesim","slug":"Amesim","count":1,"path":"api/categories/Amesim.json"}],"tags":[{"name":"Amesim","slug":"Amesim","count":1,"path":"api/tags/Amesim.json"},{"name":"Simulink","slug":"Simulink","count":1,"path":"api/tags/Simulink.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"AD20 使用笔记","uid":"c1235f99efb341252757b2cde16e8265","slug":"Altium-Designer/AD20使用笔记","date":"2022-09-19T06:48:00.000Z","updated":"2022-09-27T12:25:24.280Z","comments":true,"path":"api/articles/Altium-Designer/AD20使用笔记.json","keywords":null,"cover":[],"text":"AD20 使用笔记 网格设置 Altium Designer 20 一共有 3 种栅格：Grids、Gudies 和 Axes。 Grids 是最常用的普通栅格。 Grids 栅格的设置有： G 键设置栅格大小 Ctrl + G 设置栅格属性 自定义区域栅格 栅格捕捉开关： Gu...","link":"","photos":[],"count_time":{"symbolsCount":807,"symbolsTime":"1 mins."},"categories":[{"name":"Altium Designer","slug":"Altium-Designer","count":2,"path":"api/categories/Altium-Designer.json"}],"tags":[{"name":"Note","slug":"Note","count":2,"path":"api/tags/Note.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}