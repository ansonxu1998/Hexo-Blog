{"title":"CAN 总线协议","uid":"386d227c4f88ed4186d8b0b65da86630","slug":"Communication Protocol/CAN 总线","date":"2023-04-01T09:02:00.000Z","updated":"2023-04-14T12:31:54.140Z","comments":true,"path":"api/articles/Communication Protocol/CAN 总线.json","keywords":null,"cover":[],"content":"<h1 id=\"can-总线协议\">CAN 总线协议</h1>\n<p><strong>Controller Area Network (CAN bus)</strong>\n是一种车辆总线标准，允许为控制器和设备在没有主机的情况下与彼此的应用程序进行通信（没有主从关系）。它是一种基于消息的协议，最初设计用于汽车内的多路复用电线以节省铜线，但它也可以许多其他情况。对于每个设备，帧中的数据是串行传输的，但如果多个设备同时传输，最高优先级的设备可以继续传输，而其他设备则推出。<em>帧被所有设备接受，包括发送设备</em>。</p>\n<h2 id=\"can-总线的历史\">CAN 总线的历史</h2>\n<h3 id=\"can-总线的诞生和发展\">1983-1991: CAN 总线的诞生和发展</h3>\n<p>CAN 总线最初是由德国博世公司（Bosch），在 1983 年开发，并于 1986\n年首次发布。CAN\n总线最初用于汽车电子系统的通信，并逐渐得到其他领域的广泛应用。在这一时期，CAN\n总线标准得到了进一步完善和发展，包括 CAN 2.0A 和 CAN 2.0B\n等版本的发布。</p>\n<h3 id=\"年-can-总线的普及和标准化\">1991-2000年: CAN\n总线的普及和标准化</h3>\n<p>CAN\n总线在这一时期得到了广泛的应用和推广，成为汽车电子系统、工业控制和自动化领域的主流通信协议。CAN\n总线标准也到了进一步的标准化和完善，包括 ISO 11898 等标准的发布。</p>\n<h3 id=\"年至今-can-总线的进一步发展和应用扩展\">2000年至今: CAN\n总线的进一步发展和应用扩展</h3>\n<p>2012 年，博世发布了CAN FD1.0，即 CAN with Flexible\nData-Rate。该规范使用不同的帧格式，允许不同的数据长度，并在仲裁决定后可选择切换到更快的比特率。CAN\nFD 与现有的 CAN 2.0 网络兼容，因此新的 CAN FD 设备可以与现有的 CAN\n设备在同一网络中共存。截至 2018 年，博世积极扩展 CAN 标准。</p>\n<h2 id=\"can-总线的标准\">CAN 总线的标准</h2>\n<h3 id=\"can-2.0a-和-2.0b\">1. CAN 2.0A 和 2.0B</h3>\n<p>CAN 2.0A 和 2.0B 是最基本的 CAN 标准，定义了 CAN\n总线上数据的帧格式、速率、物理层等特性，能够支持最高 1 Mbps\n的数据传输速率。其中，CAN 2.0A 标准采用 11\n位标识符（ID）进行帧的识别和过滤，而 CAN 2.0B 标准则采用 29\n位标识符进行帧的识别和过滤。</p>\n<h3 id=\"iso-11898-2\">2. ISO 11898-2</h3>\n<p>ISO 11898-2 是 CAN 总线的物理层规范，主要定义了 CAN\n总线在电气特性方面的规范，包括电压、电流、传输速率、传输距离等。此规范还定义了两根差分信号线（CAN_H\n和 CAN_L）以及地线的连接方式，以保证 CAN 总线的抗干扰能力和可靠性。</p>\n<h3 id=\"iso-11898-3\">3. ISO 11898-3</h3>\n<p>ISO 11898-3 是高速 CAN 总线的物理层规范，定义了在高速传输模式下 CAN\n总线的电气特性和信号波形。在该标准下，CAN 总线的最高传输速率可以达到 1\nMbps，传输距离可以达到 40 米。</p>\n<h3 id=\"iso-11898-4\">4. ISO 11898-4</h3>\n<p>ISO 11898-4 是低速 CAN 总线的物理层规范，定义了在低速传输模式下 CAN\n总线的电气特性和信号波形。在该标准下，CAN 总线的最高传输速率为 125\nKbps，传输距离可以达到 500 米。</p>\n<h3 id=\"sae-j1939\">5. SAE J1939</h3>\n<p>SAE J1939 是一种 CAN\n总线协议，主要用于商用车辆和重型机械设备的通信。它定义了 CAN\n总线上的数据格式、物理层、协议等方面的规范，能够实现多节点、高速、实时的数据交换。</p>\n<h3 id=\"devicenet\">6. DeviceNet</h3>\n<p>DeviceNet 是一种 CAN\n总线协议，主要用于工业自动化领域的设备通信。它定义了 CAN\n总线上的数据格式、物理层、协议等方面的规范，能够实现设备的控制和信息交换。'</p>\n<h2 id=\"物理层标准\">物理层标准</h2>\n<h3 id=\"iso-11898-2-1\">ISO 11898-2</h3>\n<blockquote>\n<p><strong>High-speed medium access unit</strong>:</p>\n<p>定义了 CAN\n的高速物理介质附件(HS-PMA)，广泛用于汽车行业的串行通信协议，支持分布式实时控制和多路传输。</p>\n</blockquote>\n<p>HS-PMA\n包括一个传输和一个接受实体。它应能够使连接的物理介质，即两线电缆，相对于公共接地偏压。发送单元在\nCAN_H 和 CAN_L 两根信号线上施加差分电压，以表示逻辑信号 0\n(dominant)，不施加差分电压时，表示逻辑信号 1\n(recessive)，这些信号将被连接在完全相同介质的其他节点所接收。这两个信号是物理介质相关子层的接口。</p>\n<p>HS-PMA 应当提供一个 AUI 给物理编码子层。它包括 TXD 和 RXD 信号以及\nGND。TXD 信号接受来自物理编码子层的 bit 流，并传输给 MDI。RXD 信号将来自\nMDI 的 bit 流发送给物理编码子层。</p>\n<blockquote>\n<p>AUI: attachment unit interface 附件单元接口</p>\n<p>MDI: media dependent interface 介质相关接口</p>\n</blockquote>\n<p>由一个或多个 HS-PMA\n组成的应用至少应支持正常功率运行模式。实现低功耗模式是可选的。</p>\n<table>\n<colgroup>\n<col style=\"width: 21%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Operating mode</th>\n<th>Bus biasing behaviour</th>\n<th>Transmitter behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Normal</td>\n<td>Bus biasing active</td>\n<td>Dominant or recessive</td>\n</tr>\n<tr class=\"even\">\n<td>Low-power</td>\n<td>Bus biasing active or inactive</td>\n<td>Recessive</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"hs-pma-测试回路\">HS-PMA 测试回路</h4>\n<p>HS-PMA 输出 CAN 信号是由 CAN_H 和 CAN_L 实现的，TXD\n是传输数据输入，RXD\n是接收数据输出。下图展示的外围电路定义所有必需电压电流参数的测量条件。<span\nclass=\"math inline\">\\(R_L\\)</span> 表示 HS-PMA\n在网络中使用时的有效阻性负载（总线负载），<span\nclass=\"math inline\">\\(C_1\\)</span>代表可选的分立终端电容器。</p>\n<p><img src=\"/img/CAN/test circuit.png\" style=\"zoom:20%;\" /></p>\n<center>\nHS-PMA test circuit\n</center>\n<blockquote>\n<p><span class=\"math inline\">\\(V_\\text{Diff}\\)</span> differential\nvoltage between CAN_H and CAN_L wires</p>\n<p><span class=\"math inline\">\\(V_{\\text{CAN_H}}\\)</span> single ended\nvoltage on CAN_H wire</p>\n<p><span class=\"math inline\">\\(V_{\\text{CAN_L}}\\)</span> single ended\nvoltage on CAN_L wire</p>\n<p><span class=\"math inline\">\\(C_{\\text{RXD}}\\)</span> capacitive load\non RXD</p>\n</blockquote>\n<p><img src=\"/img/CAN/dominant output characteristics.png\" style=\"zoom:50%;\" /></p>\n<h4 id=\"发送特性\">发送特性</h4>\n<p><img src=\"/img/CAN/dominant output characteristics 2.png\" style=\"zoom:50%;\" /></p>\n<p>为了达到可接受的低射频发射水平，发送端应满足下表所要求的驱动信号对称性：</p>\n<p><img src=\"/img/CAN/driver symmetry.png\" style=\"zoom:60%;\" /></p>\n<p>发送端的最大输出电流的限制如下：</p>\n<p><img src=\"/img/CAN/driver output current.png\" style=\"zoom:60%;\" /></p>\n<p>表5详细说明了总线偏置激活时的隐性输出特性：</p>\n<p><img src=\"/img/CAN/recessive output characteritics.png\" style=\"zoom:60%;\" /></p>\n<p>表6详细说明了总线偏置未激活时的隐性输出特性：</p>\n<p><img src=\"/img/CAN/recessive output characteristics 2.png\" style=\"zoom:60%;\" /></p>\n<p>HS-PMA 可以限制显性传输的持续时间，防止 TXD\n因为故障持续输出显性，从而干扰其他节点的通信。HS-PMA\n应该在表7中指定的限制范围内实现超时：</p>\n<p><img src=\"/img/CAN/transmit dominant timeout.png\" style=\"zoom:60%;\" /></p>\n<blockquote>\n<p><span class=\"math inline\">\\(\\text{t}_{\\text{dom}}\\)</span>\n的最小值与最小的比特率之间存在一定的关系。<span\nclass=\"math inline\">\\(\\text{t}_{\\text{dom}}\\)</span> 的最小值为 0.8\nms，bit 流大于或等于 21.6 kbit/s 时，可以容纳 17 个连续的显性位；当 bit\n流大于或等于 45.8 kbit/s 时，可以容纳 36 个连续的显性位。值 17 表明 PMA\n尝试发送一个显性位，并且每次在接收数据输入时都看到一个隐性电平。当前五次尝试的最后一位有位错误时，值\n36 反映连续 6 个错误帧。</p>\n</blockquote>\n<h4 id=\"接收特性\">接收特性</h4>\n<p>当 HS-PMA\n处于低功耗模式，并且总线偏置被激活时，隐性和显性状态的差分输入电压范围如表\n8 所示：</p>\n<p><img src=\"/img/CAN/receiver input characteristics.png\" style=\"zoom:60%;\" /></p>\n<p>当 HS-PMA\n处于低功耗模式，并且总线偏置未被激活时，隐性和显性状态的差分输入电压范围如表\n9 所示：</p>\n<p><img src=\"/img/CAN/receiver input characteristics 2.png\" style=\"zoom:60%;\" /></p>\n<h4 id=\"接收机的输入阻抗\">接收机的输入阻抗</h4>\n<p><img src=\"/img/CAN/internal differential input resistance.png\" style=\"zoom:60%;\" /></p>\n<p>HS-PMA 应该具有表 10 给出的输入阻抗：</p>\n<p><img src=\"/img/CAN/receiver input resistance.png\" style=\"zoom:60%;\" /></p>\n<p>同时，内部阻抗应当满足表 11 的需求：</p>\n<p><img src=\"/img/CAN/receiver input resistance matching.png\" style=\"zoom:60%;\" /></p>\n<h4 id=\"发送和接收的时序特性\">发送和接收的时序特性</h4>\n<p>时序参数应在 HS-PMA 的 RXD 输出和 TXD 输入以及 CAN_H 和 CAN_L\n之间的差压上测量。</p>\n<p>图 5 展示了如何测量信号轨迹中的时序：</p>\n<p><img src=\"/img/CAN/timing diagram.png\" style=\"zoom:50%;\" /></p>\n<p>HS-PMA 的循环延时要求：</p>\n<p><img src=\"/img/CAN/loop delay.png\" style=\"zoom:60%;\" /></p>\n<blockquote>\n<p>从 TXD 输入端的信号边沿到 RXD\n输出端的下一个具有相同极性的信号边沿的时间跨度，需要考虑两个信号边沿的最大延迟。</p>\n</blockquote>\n<p><img src=\"/img/CAN/data signal timing.png\" style=\"zoom:60%;\" /></p>\n<p><img src=\"/img/CAN/data signal timing 2.png\" style=\"zoom:60%;\" /></p>\n<h4\nid=\"textv_textcan_htextv_textcan_l-和-textv_textdiff-的最大额定值\"><span\nclass=\"math inline\">\\(\\text{V}_{\\text{CAN_H}}\\)</span>，<span\nclass=\"math inline\">\\(\\text{V}_{\\text{CAN_L}}\\)</span> 和 <span\nclass=\"math inline\">\\(\\text{V}_{\\text{Diff}}\\)</span> 的最大额定值</h4>\n<p>表 15 反映了静态电压的上下限，可以连接到 CAN_H 和 CAN_L\n而不造成损坏，而 <span\nclass=\"math inline\">\\(\\text{V}_{\\text{diff}}\\)</span>\n则保持在其自身的最大额定值范围内。</p>\n<p><img src=\"/img/CAN/maximum ratings.png\" style=\"zoom:60%;\" /></p>\n<h4 id=\"can_h-和-can_l-的最大漏电流\">CAN_H 和 CAN_L 的最大漏电流</h4>\n<p>没有供电的 HS-PMA 不应干扰连接到同一媒介的其他 HS-PMA\n的通信，最大漏电流的要求如表 16 所示：</p>\n<p><img src=\"/img/CAN/maximum leakage currents.png\" style=\"zoom:60%;\" /></p>\n<h4 id=\"低功耗模式的唤醒\">低功耗模式的唤醒</h4>\n<p>当由一个或多个 HS-PMA 组成的网络实现低功耗模式时，HS-PMA\n应能够发出唤醒事件信号。表17列出了定义的 HS-PMA 类型所需的唤醒机制：</p>\n<p><img src=\"/img/CAN/wake-up implementations.png\" style=\"zoom:60%;\" /></p>\n<p>当一个 HS-PMA 有多个唤醒机制时，这写唤醒机制必须可配置。</p>\n<p><strong>基本的唤醒</strong>：</p>\n<p>当接收到一个持续时间至少为 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Filter}}\\)</span>\n的显性状态，就能够触发一个唤醒事件。</p>\n<p><strong>唤醒模式唤醒</strong>：</p>\n<p>当连续接收到两个持续时间至少为 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Filter}}\\)</span>\n的显性状态，并被一个持续时间至少为 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Filter}}\\)</span>\n的隐性状态隔开时，将发生唤醒事件。</p>\n<p><strong>选择唤醒</strong>：</p>\n<p>一旦检测到一个唤醒帧 (WUF)，将触发唤醒事件。在 CBFF 或 CEFF 中解码\nCAN 帧并接受为 WUF 是由 HS-PMA\n完成的。如果启用，在正常和低功耗模式下都可以解码 CAN 帧。</p>\n<p>在偏置反应时间 <span\nclass=\"math inline\">\\(\\text{t}_\\text{Bias}\\)</span> 过去后，可以忽略\nCBFF 和 CEFF 中最多 4 帧(当比特率高于 500 kbit/s 时最多 8\n帧)，并且不能忽略 CBFF 和 CEFF 中的任何后续帧。</p>\n<p>在错误通信的情况下，HS-PMA\n应在内部错误计数器溢出时或溢出后发出唤醒信号。</p>\n<ol type=\"1\">\n<li>正常模式到低功耗模式转换时的行为</li>\n</ol>\n<p>如果在模式更改之前启用了选择性唤醒，并且 HS-PMA\n不再忽略帧，则在模式转换期间也应支持 CAN\n数据和远程帧的解码，这些模式转换启用了帧检测 IP。 如果接收到的帧是有效的\nWUF，则收发器应指示唤醒。 如果启用，CAN\n数据的解码应在正常和低功耗模式下实现。</p>\n<ol start=\"2\" type=\"1\">\n<li>位解码</li>\n</ol>\n<p>当 CAN_H 和 CAN_L\n之间的差分电压时序符合以下两种信号之一时，接收到的经典 CAN\n帧应被正确解码:</p>\n<ul>\n<li>bit 流由信号形状A的多个实例组成 (用于处理振铃);</li>\n<li>bit 流可以由信号形状 B1\n的多个实例和信号形状B2的一个实例组装而成(以处理发送方时钟容差和仲裁损失)。</li>\n</ul>\n<p><img src=\"/img/CAN/Signal shape A and B.png\" style=\"zoom:60%;\" /></p>\n<ol start=\"3\" type=\"1\">\n<li>唤醒帧</li>\n</ol>\n<p>如果满足以下所有条件，一个有效的典型 CAN 将被认为是一个有效的\nWUF：</p>\n<ul>\n<li>当 DLC 匹配未禁用时，接收到的帧是典型 CAN 数据帧。当 DLC\n匹配被禁用时，帧也可能是远程帧。</li>\n<li>接收到的典型 CAN 帧的 ID 与相关 bit 位的配置 ID (在HS-PMA中)\n完全匹配。相关 bit 的位置是由一个 ID 掩码给出的。</li>\n<li>接收到的典型 CAN 数据帧的 DLC 与配置的 DLC 完全匹配。这个 DLC\n匹配条件可以通过 HS-PMA 实现中的配置禁用。</li>\n<li>当 DLC 大于 0 且启用 DLC\n匹配时，接收到的帧的数据字段在对应于配置的数据掩码中的设置的 bit\n位置上至少设置了一位。</li>\n<li>收到正确的循环冗余校验 (CRC)，包括隐性 CRC 分隔符，并且在确认 (ACK)\n之前未检测到错误。图7描述了被认为是“不关心”的 bit。</li>\n</ul>\n<blockquote>\n<p>DLC: data length code</p>\n</blockquote>\n<p><img src=\"/img/CAN/do not care bit.png\" style=\"zoom:60%;\" /></p>\n<ol start=\"4\" type=\"1\">\n<li>帧错误计数机制</li>\n</ol>\n<p>在激活选择唤醒功能和 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Silence}}\\)</span> 结束时，错误\nCAN 帧的计数器应设置为零。计数器的初始值为零。当检测到位填充、CRC 或 CRC\n分隔符形式错误时，该计数器将加1。如果已经接收到一个典型 CAN\n帧，并且计数器不为零，那么计数器将减1。在 CRC\n定界符和间歇字段结束之间的显性位不应增加帧错误计数器。</p>\n<p>在此计数器的每次递增或递减时，HS-PMA 中的解码器单元应等待 <span\nclass=\"math inline\">\\(\\text{n}_{\\text{Bit}\\_\\text{idle}}\\)</span>\n个隐性位，然后考虑一个显性位作为帧的开始。图8描述了在接收到典型 CAN\n帧和出现错误场景时，强制开始帧 (SOF) 检测的位置。</p>\n<p><img src=\"/img/CAN/Mandatory SOF detection.png\" style=\"zoom:60%;\" /></p>\n<p>当计数器达到阈值时，应立即或在下一次接收 WUP\n时进行唤醒。默认阈值是32，其他值可能是可配置的。</p>\n<p>在偏置反应时间 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Bias}}\\)</span> 结束后开始的连续 4\n个(比特率&gt; 500 kbit/s时最多 8 个)的典型 CAN\n数据和远程帧可能被忽略(失败时错误计数器没有增加)或被判断为错误(即使没有错误，错误计数器也会增加)。</p>\n<p>接收带有非标称保留位 (SRR, r0)的 CEFF\n帧不会导致错误计数器的增加。</p>\n<ol start=\"5\" type=\"1\">\n<li>唤醒帧 ID</li>\n</ol>\n<p>支持 CAN-ID 掩码机制，以在比较中排除 ID 位。支持 11 位和 29 位的\nCAN-ID 和 ID 掩码。用户选择 WUF 是否必须出现在 CBFF 或 CEFF 中。IDE\n位不是 ID 掩码的一部分。在任何情况下都要进行判别。</p>\n<p>除 \"don't care\" 外，所有被掩码的 ID 位都与配置的 ID\n位完全匹配。如果掩码 ID 位配置为 \"don't care\"，则 “1” 和 “0”\n都将被接受。</p>\n<p><img src=\"/img/CAN/ID masking mechanism.png\" style=\"zoom:60%;\" /></p>\n<ol start=\"6\" type=\"1\">\n<li>唤醒帧 DLC</li>\n</ol>\n<p>如果启用了 DLC 匹配条件，则只有当接收帧的 DLC 与配置的 DLC\n完全匹配时，典型 CAN 帧才能是有效的 WUF。</p>\n<p>如果 DLC 匹配条件被禁用，则 DLC 和数据字段不被计算，当标识符匹配且\nCRC 正确时，典型 CAN 帧已经是有效的 WUF。</p>\n<ol start=\"7\" type=\"1\">\n<li>唤醒帧的数据域</li>\n</ol>\n<p>如果启用了 DLC 匹配条件，则只有在接收到的 WUF\n的数据字段中至少有一个逻辑 1 位与配置的 WUF 中的数据字段的逻辑 1\n位匹配时，典型 CAN 帧才能是有效的 WUF。</p>\n<p>如果 DLC 匹配条件被禁用，则 DLC 和数据字段不被计算，当标识符匹配且\nCRC 正确时，典型 CAN 帧已经是有效的 WUF。</p>\n<p><img src=\"/img/CAN/data field within a received Classical CAN data frame.png\" style=\"zoom:60%;\" /></p>\n<p>使用该机制，只需一个唤醒帧就可以唤醒 64 个独立的 ECU 组。</p>\n<h4 id=\"总线偏置-bus-biasing\">总线偏置 (Bus biasing)</h4>\n<p>当 HS-PMA\n具有低功耗模式和选择性唤醒时，需要自动电压偏置。对于所有其他\nHS-PMA，应实现正常偏置或自动电压偏置。</p>\n<ol type=\"1\">\n<li>正常偏置</li>\n</ol>\n<p>正常偏置意味着总线偏置在正常模式下激活，在低功率模式下不激活。</p>\n<ol start=\"2\" type=\"1\">\n<li>自动电压偏置</li>\n</ol>\n<p>自动电压偏置是指在正常模式下总线偏置是激活的，在低功耗模式下由 CAN_H\n和 CAN_L 之间的电压差控制。下面的状态机说明了这种机制。</p>\n<p><img src=\"/img/CAN/Bus biasing control for automatic voltage biasing.png\" style=\"zoom:30%;\" /></p>\n<p>图 11 中的状态机定义了所有操作模式的总线偏置行为。进入状态 1\n时，可选定时器 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Wake}}\\)</span>\n复位并重新启动；当进入状态 3 或 4 时，定时器 <span\nclass=\"math inline\">\\(\\text{t}_{\\text{Silence}}\\)</span>\n复位并重新启动。</p>\n<p>表 20 指定了总线偏置控制时间，图 12 为偏置反应时间。</p>\n<p><img src=\"/img/CAN/HS-PMA bus biasing control timings.png\" style=\"zoom:60%;\" /></p>\n<p><img src=\"/img/CAN/Test signal definition for bias reaction time measurement.png\" style=\"zoom:60%;\" /></p>\n<h2 id=\"数据链路层协议\">数据链路层协议</h2>\n<h3 id=\"can-的特点\">CAN 的特点</h3>\n<p><strong>（1） 多主控制</strong></p>\n<p>当总线处于空闲状态时，所有的节点都可向总线发送消息。最先访问总线的节点可获得总线的发送权。当有多个节点同时向总线发送消息时，发送高优先级\nID 消息的节点可获得总线的发送权。</p>\n<p><strong>（2）消息的发送</strong></p>\n<p>在 CAN\n协议中，所有的消息都以统一的格式发送。总线处于空闲状态时，总线上的所有节点都可以向总线发送消息。当有多个节点同时向总线发送消息时，根据标识符\n（Identifier, ID) 决定优先级。ID\n并不是标识消息发送的目的地址，而是表示访问总线的消息的优先级。两个以上的节点同时开始发送消息时，对各个消息\nID\n的每个位进行逐个仲裁比较。仲裁获胜（被判定为优先级最高）的节点继续发送消息，仲裁失利的节点则立刻停止发送而进行接收工作。</p>\n<p><strong>（3）系统的柔软性</strong></p>\n<p>与总线相连的节点没有类似于“地址”的信息。因此在总线上增加节点时，连接在总线上的其它节点的软硬件及应用层都不需要做任何改变。</p>\n<p><strong>（4）通信速度</strong></p>\n<p>根据整个网络的规模，可设定合适的通信速度。在同一网络的中，所有的节点必须设定为统一的速度。即使有一个节点的通信速度与其它节点不同，该节点也将会输出错误信号，妨碍整个网络的通信。不同的网络则可以设置不同的通信速度。</p>\n<p><strong>（5）远程数据请求</strong></p>\n<p>可通过发送 “遥控帧” 请求其它节点发送数据。</p>\n<p><strong>（6）错误检测功能·错误通知功能·错误恢复功能</strong></p>\n<p>所有节点都可以检测错误（错误检测功能）。检测出错误的节点会立即通知其它所有节点（错误通知功能）。正在发送消息的节点一旦检测出错误，会强制结束当前的发送。强制结束发送的节点会不断重新发送此消息直到成功为止（错误恢复功能）。</p>\n<p><strong>（7）故障封闭</strong></p>\n<p>CAN\n可以判断出错误的类型是总线上暂时的数据错误（如外部噪声）还是持续的数据错误（如节点内部故障、驱动器故障、断线等）。由此功能，当总线上发生持续数据错误时，可将引起此故障的节点从总线上隔离出去。</p>\n<p><strong>（8）连接</strong></p>\n<p>CAN\n总线是可同时连接多个节点的总线。可连接的节点总数在理论上是没有限制的。但实际应用的过程中，可连接的节点数受总线上的时间延迟及电气负载的限制。<em>降低通信速度，可连接的节点数增加；提高通信速度，则可连接的节点数减少。</em></p>\n<h3 id=\"can-的错误\">CAN 的错误</h3>\n<h4 id=\"错误的种类\">错误的种类</h4>\n<p>节点始终处于3 种状态之一。</p>\n<p><strong>（1）主动错误状态</strong></p>\n<p>主动错误状态是可以正常参加总线通信的状态。处于主动错误状态的节点检测出错误时，输出主动错误标志。</p>\n<p><strong>（2）被动错误状态</strong></p>\n<p>被动错误状态是易引起错误的状态。处于被动错误状态的节点虽然能够参加总线通信，但是为了不妨碍其它节点通信，接收时不能积极地发送错误通知。处于被动错误状态的节点即使检测出错误，而其它处于主动错误状态的节点如果没有发现错误，整个总线也被认为是没有错误的。处于被动错误状态的节点检测出错误时，输出被动错误标志。</p>\n<p>处于被动错误状态的节点在发送结束后不能立刻再次开始发送。在开始下次发送前，在间隔帧期间内必须插入\n“延迟传送”（8 个隐性位）</p>\n<p><strong>（3）总线关闭态</strong></p>\n<p>总线关闭态是不能参加总线上通信的状态。消息的接受和发送都是禁止的。</p>\n<blockquote>\n<p>这些状态依靠发送错误的计数和接收错误的计数来管理的，根据计数值决定进入那种状态。错误状态和计数值的关系如下：</p>\n</blockquote>\n<p><img src=\"/img/CAN/错误计数值.png\" style=\"zoom:20%;\" /></p>\n<p><img src=\"/img/CAN/节点错误状态.png\" style=\"zoom:20%;\" /></p>\n<h4 id=\"错误计算值\">错误计算值</h4>\n<p>发送错误计数值和接收错误计数值根据一定的条件发送变化。错误计数值的变动条件如下表所示。一次数据的接收和发送可能同时满足多个条件。错误计数器在错误标志的第一个位出现的时间点上开始计数。</p>\n<table>\n<colgroup>\n<col style=\"width: 44%\" />\n<col style=\"width: 14%\" />\n<col style=\"width: 40%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">接受和发送错误计数值的变动条件</th>\n<th style=\"text-align: center;\">发送错误计数值 (TEC)</th>\n<th style=\"text-align: center;\">接收错误计数值 (REC)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td\nstyle=\"text-align: left;\">接收节点检测出错误时。<br/>例外：接收单元在发送错误标志或过载标志中检测出“位错误”时，接收错误计数值不增加。</td>\n<td style=\"text-align: center;\">——</td>\n<td style=\"text-align: center;\">+1</td>\n</tr>\n<tr class=\"even\">\n<td\nstyle=\"text-align: left;\">接收节点在发送完错误标志后检测到的第一个位为显性电平时。</td>\n<td style=\"text-align: center;\">——</td>\n<td style=\"text-align: center;\">+8</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">发送节点在输出错误标志时。</td>\n<td style=\"text-align: center;\">+8</td>\n<td style=\"text-align: center;\">——</td>\n</tr>\n<tr class=\"even\">\n<td\nstyle=\"text-align: left;\">发送节点在发送主动错误标志或过载标志时，检测出位错误。</td>\n<td style=\"text-align: center;\">+8</td>\n<td style=\"text-align: center;\">——</td>\n</tr>\n<tr class=\"odd\">\n<td\nstyle=\"text-align: left;\">接收节点在发送主动错误标志或过载标志时，检测出位错误。</td>\n<td style=\"text-align: center;\">——</td>\n<td style=\"text-align: center;\">+8</td>\n</tr>\n<tr class=\"even\">\n<td\nstyle=\"text-align: left;\">各节点从主动错误标志、过载标志的最开始检测出连续\n14 个位的显性位时。之后，每检测出连续的 8 个位的显性位时。</td>\n<td style=\"text-align: center;\">发送时 +8</td>\n<td style=\"text-align: center;\">接收时 +8</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">检测出在被动错误标志后追加的连续 8\n个位的显性位时。</td>\n<td style=\"text-align: center;\">发送时 +8</td>\n<td style=\"text-align: center;\">接收时 +8</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">发送单元正常发送数据结束时（返回 ACK\n且到帧结束也未检测出错误时）。</td>\n<td style=\"text-align: center;\">-1 (TEC=0 时 <span\nclass=\"math inline\">\\(\\pm0\\)</span>)</td>\n<td style=\"text-align: center;\">——</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">接收单元正常接收数据结束时（到 CRC\n未检测出错误且正常返回 ACK 时）。</td>\n<td style=\"text-align: center;\">——</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(1≤REC≤127,-1\\)</span><br/><span\nclass=\"math inline\">\\(REC=0,±0\\)</span><br/><span\nclass=\"math inline\">\\(REC&gt;127,设 REC=127\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">处于总线关闭态的单元，检测到 128 次连续 11\n个位的隐性位。</td>\n<td style=\"text-align: center;\">TEC=0</td>\n<td style=\"text-align: center;\">REC=0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"can-协议\">CAN 协议</h3>\n<h4 id=\"帧的种类\">帧的种类</h4>\n<p>通信是通过以下 5 种类型的帧进行的。</p>\n<ul>\n<li>数据帧</li>\n<li>遥控帧</li>\n<li>错误帧</li>\n<li>过载帧</li>\n<li>帧间隔</li>\n</ul>\n<p><strong>数据帧</strong>和<strong>遥控帧</strong>有标准格式和扩展格式两种格式。标准格式有11\n个位的标识符 (ID)，扩展格式有 29 个位的 ID。</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>帧</th>\n<th>帧用途</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>数据帧</td>\n<td>用于发送节点向接收节点传送数据的帧。</td>\n</tr>\n<tr class=\"even\">\n<td>遥控帧</td>\n<td>用于接收节点向具有相同 ID 的发送节点请求数据的帧。</td>\n</tr>\n<tr class=\"odd\">\n<td>错误帧</td>\n<td>用于当检测出错误时向其它节点通知错误的帧。</td>\n</tr>\n<tr class=\"even\">\n<td>过载帧</td>\n<td>用于接收节点通知其尚未做好接收准备的帧。</td>\n</tr>\n<tr class=\"odd\">\n<td>帧间隔</td>\n<td>用于将数据帧及遥控帧与前面的帧分离开来的帧。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"数据帧\">数据帧</h5>\n<p>数据帧由 7 个段构成：</p>\n<ul>\n<li>帧起始：表示数据帧开始的段。</li>\n<li>仲裁段：表示该帧优先级的段。</li>\n<li>控制段：表示数据的字节数及保留位的段。</li>\n<li>数据段：数据的内容，可发送 0～8 个字节的数据。</li>\n<li>CRC 段：检查帧的传输错误的段。</li>\n<li>ACK 段：表示确认正常接收的段。</li>\n<li>帧结束：表示数据帧结束的段。</li>\n</ul>\n<p><img src=\"/img/CAN/数据帧.png\" style=\"zoom:30%;\" /></p>\n<p><strong>(1) 帧起始（标准、扩展格式相同）</strong></p>\n<p>表示帧开始的段，1\n个位<strong>显性位</strong>。只有在总线空闲期间节点才能够发送 SOF.</p>\n<p><strong>(2) 仲裁段</strong></p>\n<p>表示数据优先级的段。</p>\n<p>标准帧有 11 位 ID，扩展帧有 29 位 ID。</p>\n<p>RTR 位：用于区分数据帧和遥控帧</p>\n<ul>\n<li>0：数据帧</li>\n<li>1：遥控帧</li>\n</ul>\n<p>IDE 位：用于区分标准帧和扩展帧</p>\n<ul>\n<li>0：标准帧</li>\n<li>1：扩展帧</li>\n</ul>\n<p>SSR 位：表明该位置代替了标准帧中的 RTR（无实际意义，SSR永远置 1）</p>\n<blockquote>\n<p>标准帧的 ID 有 11 个位。从 ID28 到 ID18 被依次发送。禁止高7\n位都为隐性。（禁止设定：ID=1111111XXXX）</p>\n<p>扩展帧的 ID 有 29 个位。基本 ID 从 ID28 到 ID18，扩展 ID 由 ID17 到\nID0 表示。基本 ID 和标准帧的 ID 相同。禁止高 7\n位都为隐性。（禁止设定：基本 ID=1111111XXXX）</p>\n</blockquote>\n<p><strong>(3) 控制段</strong></p>\n<p>控制段由 6\n个位构成，表示数据段的字节数。标准帧和扩展帧的构成有所不同。</p>\n<blockquote>\n<ol type=\"1\">\n<li><p>保留位（r0、r1）</p>\n<p>保留位必须全部以显性电平发送。但接收方可以接收显性、隐性及其任意组合的电平。</p></li>\n<li><p>数据长度码（DLC）\n数据长度码与数据的字节数的对应关系如下表所示。数据的字节数必须为 0～8\n字节。但接收方对 DLC = 9～15 的情况并不视为错误。</p>\n<p><img src=\"/img/CAN/数据长度码和字节数的关系.png\" style=\"zoom:50%;\" /></p></li>\n</ol>\n</blockquote>\n<p><strong>(4) 数据场（标准帧和扩展帧相同）</strong></p>\n<ul>\n<li>具有 0-8 个字节长度，由 DLC 确定</li>\n<li>包含 CAN 数据帧发送的内容</li>\n</ul>\n<p><strong>(5) CRC 段（标准/扩展格式相同）</strong></p>\n<p>CRC 段是检查帧传输错误的帧。由15 个位的 CRC 顺序和 1 个位的 CRC\n界定符（用于分隔的位）构成。</p>\n<blockquote>\n<p>CRC 顺序是根据多项式生成的 CRC 值，CRC\n的计算范围包括<strong>帧起始、仲裁段、控制段、数据段</strong>。\n接收方以同样的算法计算 CRC 值并进行比较，不一致时会通报错误。</p>\n</blockquote>\n<p><strong>(6) ACK 段</strong> ACK 段用来确认是否正常接收。由 ACK 槽\n(ACK Slot)和 ACK 界定符 2 个位构成。</p>\n<blockquote>\n<ol type=\"1\">\n<li>发送节点的ACK 段 发送节点在 ACK 段发送 2 个位的隐性位。</li>\n<li>接收节点的 ACK 段 接收到正确消息的节点在 ACK 槽(ACK\nSlot)发送显性位，通知发送节点正常接收结束。这称作“发送ACK”或者“返回ACK”。</li>\n</ol>\n</blockquote>\n<p><strong>(7) 帧结束</strong> 帧结束是表示该该帧的结束的段。由 7\n个位的<strong>隐性位</strong>构成。</p>\n<h5 id=\"遥控帧\">遥控帧</h5>\n<p>接收节点向发送节点请求发送数据所用的帧。遥控帧由 6\n个段组成。遥控帧没有数据帧的数据段。</p>\n<ul>\n<li>帧起始（SOF）：表示帧开始的段。</li>\n<li>仲裁段：表示该帧优先级的段。可请求具有相同 ID 的数据帧。</li>\n<li>控制段：表示数据的字节数及保留位的段。</li>\n<li>CRC 段：检查帧的传输错误的段。</li>\n<li>ACK 段：表示确认正常接收的段。</li>\n<li>帧结束：表示遥控帧结束的段。</li>\n</ul>\n<p><img src=\"/img/CAN/遥控帧.png\" style=\"zoom:30%;\" /></p>\n<blockquote>\n<p>遥控帧和数据帧</p>\n<ul>\n<li>数据帧和遥控帧的不同\n<ul>\n<li>遥控帧的 RTR 位为隐性位，没有数据段</li>\n<li>没有数据的数据帧和遥控帧可通过 RTR 位来区分</li>\n</ul></li>\n<li>遥控帧没有数据段，数据长度码该如何表示？\n<ul>\n<li>遥控帧的数据长度码以所请求数据帧的数据长度码表示。</li>\n</ul></li>\n<li>没有数据段的数据帧有何用途？\n<ul>\n<li>可用于各节点的定期连接确认/应答、或仲裁段本身带有实质性信息的情况下。</li>\n</ul></li>\n</ul>\n</blockquote>\n<h5 id=\"错误帧\">错误帧</h5>\n<p>用于在接收和发送消息时检测出错误通知错误的帧。错误帧由错误标志和错误界定符构成。</p>\n<p><strong>(1) 错误标志</strong></p>\n<p>错误标志包括<em>主动错误标志</em>和<em>被动错误标志</em>两种。</p>\n<ul>\n<li>主动错误标志：6 个位的<strong>显性位</strong>。</li>\n<li>被动错误标志：6 个位的<strong>隐性位</strong>。</li>\n</ul>\n<p><strong>(2) 错误界定符</strong> 错误界定符由 8\n个位的<strong>隐性位</strong>构成。</p>\n<p><img src=\"/img/CAN/错误帧.png\" style=\"zoom:50%;\" /></p>\n<blockquote>\n<ol type=\"1\">\n<li>主动错误标志：处于主动错误状态的节点检测出错误时输出的错误标志。</li>\n<li>被动错误标志：处于被动错误状态的节点检测出错误时输出的错误标志。</li>\n</ol>\n</blockquote>\n<h5 id=\"过载帧\">过载帧</h5>\n<p>过载帧是用于接收节点通知其尚未完成接收准备的帧。过载帧由过载标志和过载界定符构成。</p>\n<p><strong>(1) 过载标志</strong></p>\n<p>6 个位的<strong>显性位</strong>。\n过载标志的构成与主动错误标志的构成相同。</p>\n<p><strong>(2) 过载界定符</strong></p>\n<p>8 个位的<strong>隐性位</strong>。\n过载界定符的构成与错误界定符的构成相同。</p>\n<p><img src=\"/img/CAN/过载帧.png\" style=\"zoom:50%;\" /></p>\n<h5 id=\"帧间隔\">帧间隔</h5>\n<p>帧间隔是用于分隔数据帧和遥控帧的帧。数据帧和遥控帧可通过插入帧间隔将本帧与前面的任何帧（数据帧、遥控帧、错误帧、过载帧）分开。</p>\n<p><strong>过载帧和错误帧前不能插入帧间隔。</strong></p>\n<p><img src=\"/img/CAN/帧间隔.png\" style=\"zoom:50%;\" /></p>\n<p><strong>(1) 间隔</strong></p>\n<p>3 个位的<strong>隐性位</strong>。</p>\n<p><strong>(2) 总线空闲</strong></p>\n<p><strong>隐性电平</strong>，无长度限制（0\n亦可）。本状态下，可视为总线空闲，要发送的节点可开始访问总线。</p>\n<p><strong>(3) 延迟传送（发送暂时停止）</strong></p>\n<p>8\n个位的<strong>隐性位</strong>。只在处于被动错误状态的节点刚发送一个消息后的帧间隔中包含的段。</p>\n<h5 id=\"优先级仲裁\">优先级仲裁</h5>\n<p>在总线空闲态，最先开始发送消息的节点获得发送权。</p>\n<p>多个节点同时开始发送时，各发送节点从仲裁段的第一位开始进行仲裁。连续输出显性电平最多的节点可继续发送。</p>\n<p><img src=\"/img/CAN/仲裁过程.png\" style=\"zoom:30%;\" /></p>\n<p><strong>(1) 数据帧何遥控帧的优先级</strong></p>\n<p>具有相同 ID\n的数据帧和遥控帧在总线上竞争时，仲裁段的最后一位（RTR）为显性位的数据帧具有优先权，可继续发送。</p>\n<p><strong>(2) 标准帧和扩展帧的优先级</strong></p>\n<p>标准格式 ID 与具有相同 ID\n的遥控帧或者扩展格式的数据帧在总线上竞争时，标准格式的 RTR\n位为显性位的具有优先权，可继续发送。</p>\n<h5 id=\"位填充\">位填充</h5>\n<p>位填充是为防止突发错误而设定的功能。当连续输出 5\n个相同极性的数据时，插入一个反极性的数据。</p>\n<p><img src=\"/img/CAN/位填充.png\" style=\"zoom:30%;\" /></p>\n<p><strong>(1) 发送节点的工作</strong></p>\n<p>在发送数据帧和遥控帧时，SOF～CRC 段间的数据，输出 5\n个相同极性的电平，插入一个反极性的电平。</p>\n<p><strong>(2) 接收节点的工作</strong></p>\n<p>在接收数据帧和遥控帧时，SOF～CRC 段间的数据，如果接收连续 5\n个极性相同的位，则删除下一位，再继续接收。如果受到连续 6\n个相同极性的电平，将被视为错误并发送错误帧。</p>\n<h5 id=\"错误的种类-1\">错误的种类</h5>\n<p>错误共有 5 种。多种错误可能同时发生。</p>\n<ul>\n<li>位错误</li>\n<li>填充错误</li>\n<li>CRC 错误</li>\n<li>格式错误</li>\n<li>ACK 错误</li>\n</ul>\n<p><img src=\"/img/CAN/错误的种类.png\" style=\"zoom:60%;\" /></p>\n<p><strong>(1) 位错误</strong></p>\n<ul>\n<li>位错误由向总线上输出数据帧、遥控帧、错误帧、过载帧的节点和输出 ACK\n的节点、输出错误的节点来检测。</li>\n<li>在仲裁段输出隐性电平，但检测出显性电平时，将被视为仲裁失利，而不是位错误。</li>\n<li>在仲裁段作为填充位输出隐性电平时，但检测出显性电平时，将不视为位错误，而是填充错误。</li>\n<li>发送单元在 ACK\n段输出隐性电平，但检测到显性电平时，将被判断为其它节点的 ACK\n应答，而非位错误。</li>\n<li>输出被动错误标志（6\n个位隐性位）但检测出显性电平时，将遵从错误标志的结束条件，等待检测出连续相同6\n个位的值（显性或隐性），并不视为位错误。</li>\n</ul>\n<p><strong>(2) 格式错误</strong></p>\n<ul>\n<li>即使接收节点检测出 EOF（7 个位的隐性位）的最后一位（第8\n个位）为显性电平，也不视为格式错误。</li>\n<li>即使接收节点检测出数据长度码 (DLC) 中 9∼15\n的值时，也不视为格式错误。</li>\n</ul>\n<h5 id=\"错误帧的输出\">错误帧的输出</h5>\n<p>检测出满足错误条件的节点输出错误标志通报错误。</p>\n<p>处于主动错误状态的节点输出的错误标志为主动错误标志；处于被动错误状态的节点输出的错误标志为被动错误标志。</p>\n<p>发送节点发送完错误帧后，将再次发送数据帧或遥控帧。</p>\n<p><img src=\"/img/CAN/错误标志输出时序.png\" style=\"zoom:60%;\" /></p>\n<h5 id=\"位时序\">位时序</h5>\n<p>由发送节点在非同步的情况下发送的每秒钟的位数称为位速率。一个位可分为\n4 段。</p>\n<ul>\n<li><p>同步段（SS）</p></li>\n<li><p>传播时间段（PTS）</p></li>\n<li><p>相位缓冲段1（PBS1）</p></li>\n<li><p>相位缓冲段2（PBS2）</p></li>\n</ul>\n<p>这些段又由可称为 Time Quantum（以下称为 Tq）的最小时间单位构成。</p>\n<p>1 位分为 4 个段，每个段又由若干个 Tq\n构成，这称为<strong>位时序</strong>。</p>\n<p>1 位由多少个 Tq 构成、每个段又由多少个 Tq\n构成等，可以任意设定位时序。通过设定位时序，多个节点可同时采样，也可任意设定采样点。</p>\n<p><img src=\"/img/CAN/段及其作用.png\" style=\"zoom:60%;\" /></p>\n<p><img src=\"/img/CAN/位时序.png\" style=\"zoom:30%;\" /></p>\n<blockquote>\n<p>采样点就是读取总线电平，并将读到的电平作为位值的点。</p>\n</blockquote>\n<h5 id=\"同步方法\">同步方法</h5>\n<p>CAN 协议的通信方法为 NRZ（Non-Return to\nZero）方式。各个位的开头或者结尾都没有附加同步信号。发送节点以与位时序同步的方式开始发送数据。另外，接收节点根据总线上电平的变化进行同步并进行接收工作。</p>\n<p>但是，发送节点和接收节点存在的时钟频率误差及传输路径上的（电缆、驱动器等）相位延迟会引起同步偏差。因此接收节点通过硬件同步或者再同步的方法调整时序进行接收。</p>\n<h5 id=\"硬件同步\">硬件同步</h5>\n<p>接收节点在总线空闲状态检测出帧起始时进行的同步调整。</p>\n<p>在检测出边沿的地方不考虑 SJW 的值而认为是 SS 段。</p>\n<blockquote>\n<p>SJW: reSynchronization Jump Width 再同步补偿宽度</p>\n</blockquote>\n<p><img src=\"/img/CAN/硬件同步.png\" style=\"zoom:30%;\" /></p>\n<h5 id=\"再同步\">再同步</h5>\n<p>在接收过程中检测出总线上的电平变化时进行的同步调整。</p>\n<p>每当检测出边沿时，根据 SJW 值通过加长 PBS1 段，或缩短 PBS2\n段，以调整同步。但如果发生了超出 SJW 值的误差时，最大调整量不能超过 SJW\n值。</p>\n<p><img src=\"/img/CAN/再同步.png\" style=\"zoom:30%;\" /></p>\n<h5 id=\"调整同步的规则\">调整同步的规则</h5>\n<ol type=\"1\">\n<li><p>1 个位中只进行一次同步调整。</p></li>\n<li><p>只有当上次采样点的总线值和边沿后的总线值不同时，该边沿才能用于调整同步。</p></li>\n<li><p>在总线空闲且存在隐性电平到显性电平的边沿时，则一定要进行硬件同步。</p></li>\n<li><p>在总线非空闲时检测到的隐性电平到显性电平的边沿如果满足条件 (1) 和\n(2)，将进行再同步。但还要满足下面条件。</p></li>\n<li><p>发送节点观测到自身输出的显性电平有延迟时不进行再同步。</p></li>\n<li><p>发送节点在帧起始到仲裁段有多个单元同时发送的情况下，对延迟边沿不进行再同步。</p></li>\n</ol>\n","text":"CAN 总线协议 Controller Area Network (CAN bus) 是一种车辆总线标准，允许为控制器和设备在没有主机的情况下与彼此的应用程序进行通信（没有主从关系）。它是一种基于消息的协议，最初设计用于汽车内的多路复用电线以节省铜线，但它也可以许多其他情况。对于...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"通信协议","slug":"通信协议","count":1,"path":"api/categories/通信协议.json"}],"tags":[{"name":"CAN 总线","slug":"CAN-总线","count":1,"path":"api/tags/CAN-总线.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#can-%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">CAN 总线协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#can-%E6%80%BB%E7%BA%BF%E7%9A%84%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">CAN 总线的历史</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#can-%E6%80%BB%E7%BA%BF%E7%9A%84%E8%AF%9E%E7%94%9F%E5%92%8C%E5%8F%91%E5%B1%95\"><span class=\"toc-text\">1983-1991: CAN 总线的诞生和发展</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B4-can-%E6%80%BB%E7%BA%BF%E7%9A%84%E6%99%AE%E5%8F%8A%E5%92%8C%E6%A0%87%E5%87%86%E5%8C%96\"><span class=\"toc-text\">1991-2000年: CAN\n总线的普及和标准化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B4%E8%87%B3%E4%BB%8A-can-%E6%80%BB%E7%BA%BF%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%8F%91%E5%B1%95%E5%92%8C%E5%BA%94%E7%94%A8%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">2000年至今: CAN\n总线的进一步发展和应用扩展</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#can-%E6%80%BB%E7%BA%BF%E7%9A%84%E6%A0%87%E5%87%86\"><span class=\"toc-text\">CAN 总线的标准</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#can-2.0a-%E5%92%8C-2.0b\"><span class=\"toc-text\">1. CAN 2.0A 和 2.0B</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iso-11898-2\"><span class=\"toc-text\">2. ISO 11898-2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iso-11898-3\"><span class=\"toc-text\">3. ISO 11898-3</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iso-11898-4\"><span class=\"toc-text\">4. ISO 11898-4</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sae-j1939\"><span class=\"toc-text\">5. SAE J1939</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#devicenet\"><span class=\"toc-text\">6. DeviceNet</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%A9%E7%90%86%E5%B1%82%E6%A0%87%E5%87%86\"><span class=\"toc-text\">物理层标准</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iso-11898-2-1\"><span class=\"toc-text\">ISO 11898-2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hs-pma-%E6%B5%8B%E8%AF%95%E5%9B%9E%E8%B7%AF\"><span class=\"toc-text\">HS-PMA 测试回路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">发送特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">接收特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E6%9C%BA%E7%9A%84%E8%BE%93%E5%85%A5%E9%98%BB%E6%8A%97\"><span class=\"toc-text\">接收机的输入阻抗</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E7%9A%84%E6%97%B6%E5%BA%8F%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">发送和接收的时序特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#textv_textcan_htextv_textcan_l-%E5%92%8C-textv_textdiff-%E7%9A%84%E6%9C%80%E5%A4%A7%E9%A2%9D%E5%AE%9A%E5%80%BC\"><span class=\"toc-text\">\\(\\text{V}_{\\text{CAN_H}}\\)，\\(\\text{V}_{\\text{CAN_L}}\\) 和 \\(\\text{V}_{\\text{Diff}}\\) 的最大额定值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#can_h-%E5%92%8C-can_l-%E7%9A%84%E6%9C%80%E5%A4%A7%E6%BC%8F%E7%94%B5%E6%B5%81\"><span class=\"toc-text\">CAN_H 和 CAN_L 的最大漏电流</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%8E%E5%8A%9F%E8%80%97%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%94%A4%E9%86%92\"><span class=\"toc-text\">低功耗模式的唤醒</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E5%81%8F%E7%BD%AE-bus-biasing\"><span class=\"toc-text\">总线偏置 (Bus biasing)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">数据链路层协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#can-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">CAN 的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#can-%E7%9A%84%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">CAN 的错误</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">错误的种类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E8%AE%A1%E7%AE%97%E5%80%BC\"><span class=\"toc-text\">错误计算值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#can-%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">CAN 协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%A7%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">帧的种类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%B8%A7\"><span class=\"toc-text\">数据帧</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%81%A5%E6%8E%A7%E5%B8%A7\"><span class=\"toc-text\">遥控帧</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%B8%A7\"><span class=\"toc-text\">错误帧</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%87%E8%BD%BD%E5%B8%A7\"><span class=\"toc-text\">过载帧</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%A7%E9%97%B4%E9%9A%94\"><span class=\"toc-text\">帧间隔</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E4%BB%B2%E8%A3%81\"><span class=\"toc-text\">优先级仲裁</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E5%A1%AB%E5%85%85\"><span class=\"toc-text\">位填充</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%9A%84%E7%A7%8D%E7%B1%BB-1\"><span class=\"toc-text\">错误的种类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%B8%A7%E7%9A%84%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">错误帧的输出</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E6%97%B6%E5%BA%8F\"><span class=\"toc-text\">位时序</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">同步方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">硬件同步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%8D%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">再同步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B0%83%E6%95%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E8%A7%84%E5%88%99\"><span class=\"toc-text\">调整同步的规则</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"链表 linked list","uid":"0d8865dd6f5b4fb80b5a9df16b916aeb","slug":"DSAA/链表","date":"2023-04-14T12:00:00.000Z","updated":"2023-04-14T12:17:15.577Z","comments":true,"path":"api/articles/DSAA/链表.json","keywords":null,"cover":null,"text":"链表 linked list 什么是链表 链表是数据元素的线性集合，其顺序不是由它们在内存中的物理位置给出的。每个元素都指向下一个元素。它是一种数据结构，由一组节点组成，这些节点共同表示一个序列。在其最基本的形式中，每个节点都包含：数据和指向序列中下一个节点的指针（链接）。这种结...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"计算机","slug":"计算机","count":1,"path":"api/tags/计算机.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"E96 系列电阻标称阻值","uid":"5446d073459d8b66ad572b884caef029","slug":"Electronic/E96系列电阻标称阻值","date":"2023-03-21T03:10:00.000Z","updated":"2023-04-14T12:30:22.567Z","comments":true,"path":"api/articles/Electronic/E96系列电阻标称阻值.json","keywords":null,"cover":null,"text":"E96系列电阻标称阻值 ","link":"","photos":[],"count_time":{"symbolsCount":18,"symbolsTime":"1 mins."},"categories":[{"name":"阻值表","slug":"阻值表","count":1,"path":"api/categories/阻值表.json"}],"tags":[{"name":"电子技术","slug":"电子技术","count":1,"path":"api/tags/电子技术.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}