{"title":"Simulink 编译动态链接库","uid":"72c8bb50db339fd6a5c5fe75ad80519f","slug":"Simulink/Simulink 编译动态链接库","date":"2023-06-05T13:20:00.000Z","updated":"2023-08-30T01:32:54.945Z","comments":true,"path":"api/articles/Simulink/Simulink 编译动态链接库.json","keywords":null,"cover":"/img/bg/Simulink.png","content":"<h2 id=\"一创建输入输出变量\">一、创建输入输出变量</h2>\n<p><img src=\"/img/2023-8-28/Input.png\" /></p>\n<p><img src=\"/img/2023-8-28/Output.png\" /></p>\n<p>将变量设置为全局变量：</p>\n<p>右击信号线，选择 <code>Properties</code></p>\n<p><img src=\"/img/2023-8-28/Properties.png\" /></p>\n<pre class=\"line-numbers language-matlab\" data-language=\"matlab\"><code class=\"language-matlab\">Current &#x3D; Simulink.Signal;\nCurrent.CoderInfo.StorageClass &#x3D; &quot;ExportedGlobal&quot;;</code></pre>\n<p>编译之后的 C 语言变量为:</p>\n<p><img src=\"/img/2023-8-28/signals.png\" /></p>\n<h2 id=\"二设置编译器\">二、设置编译器</h2>\n<h3 id=\"设置求解器为固定步长\">设置求解器为固定步长</h3>\n<p><img src=\"/img/2023-8-28/Solver.png\" /></p>\n<h3 id=\"设置代码生成\">设置代码生成</h3>\n<p><img src=\"/img/2023-8-28/Code-Generation.png\" /></p>\n<p><img src=\"/img/2023-8-28/Interface.png\" /></p>\n<h3 id=\"生成代码\">生成代码</h3>\n<p><img src=\"/img/2023-8-28/Apps.png\" /></p>\n<p><img src=\"/img/2023-8-28/C-Code.png\" /></p>\n<h3 id=\"生成的动态链接库\">生成的动态链接库</h3>\n<p><img src=\"/img/2023-8-28/dll.png\" /></p>\n<h2 id=\"python-调用动态链接库\">Python 调用动态链接库</h2>\n<h3 id=\"变量类型映射\">变量类型映射</h3>\n<p>动态库的变量类型是按照 Simulink 中定义的，如 <code>real_T</code>，需要将 Simulink 中的类型映射到 Python 中的变量类型。映射文件为 <code>rtwtypes.py</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import ctypes\n\n&quot;&quot;&quot;\n&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;\n&quot;&quot;&quot;\nint8_T &#x3D; ctypes.c_byte\nuint8_T &#x3D; ctypes.c_ubyte\nint16_T &#x3D; ctypes.c_short\nuint16_T &#x3D; ctypes.c_ushort\nint32_T &#x3D; ctypes.c_int\nuint32_T &#x3D; ctypes.c_uint\nint64_T &#x3D; ctypes.c_longlong\nuint64_T &#x3D; ctypes.c_ulonglong\nreal32_T &#x3D; ctypes.c_float\nreal64_T &#x3D; ctypes.c_double\n&quot;&quot;&quot;\n&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\n *&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;\n&quot;&quot;&quot;\nreal_T &#x3D; ctypes.c_double\ntime_T &#x3D; ctypes.c_double\nboolean_T &#x3D; ctypes.c_ubyte\nint_T &#x3D; ctypes.c_int\nuint_T &#x3D; ctypes.c_uint\nulong_T &#x3D; ctypes.c_ulong\nulonglong_T &#x3D; ctypes.c_ulonglong\nchar_T &#x3D; ctypes.c_char\nuchar_T &#x3D; ctypes.c_ubyte\nchar_T &#x3D; ctypes.c_byte\n&quot;&quot;&quot;\n&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*\n * Complex number type definitions                                           *\n *&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;\n&quot;&quot;&quot;\n\n\nclass creal32_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, real32_T),\n        (&quot;im&quot;, real32_T),\n    ]\n\n\nclass creal64_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, real64_T),\n        (&quot;im&quot;, real64_T),\n    ]\n\n\nclass creal_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, real_T),\n        (&quot;im&quot;, real_T),\n    ]\n\n\nclass cint8_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, int8_T),\n        (&quot;im&quot;, int8_T),\n    ]\n\n\nclass cuint8_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, uint8_T),\n        (&quot;im&quot;, uint8_T),\n    ]\n\n\nclass cint16_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, int16_T),\n        (&quot;im&quot;, int16_T),\n    ]\n\n\nclass cuint16_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, uint16_T),\n        (&quot;im&quot;, uint16_T),\n    ]\n\n\nclass cint32_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, int32_T),\n        (&quot;im&quot;, int32_T),\n    ]\n\n\nclass cuint32_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, uint32_T),\n        (&quot;im&quot;, uint32_T),\n    ]\n\n\nclass cint64_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, int64_T),\n        (&quot;im&quot;, int64_T),\n    ]\n\n\nclass cuint64_T(ctypes.Structure):\n    _fields_ &#x3D; [\n        (&quot;re&quot;, uint64_T),\n        (&quot;im&quot;, uint64_T),\n    ]</code></pre>\n<h3 id=\"函数调用\">函数调用</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import ctypes\nimport os\nfrom rtwtypes import *\n\ncathode_pressure_in &#x3D; 2.3967033719742803\nrh_cathode &#x3D; 0.9249641277501583\noer &#x3D; 1.614672377913217\ntemperature &#x3D; 378.9999999270832\n\npath &#x3D; &quot;Optimize1_win64.dll&quot;\nmodel_dll_path &#x3D; os.path.abspath(path)\nmodel_dll &#x3D; ctypes.windll.LoadLibrary(model_dll_path)\nmodel_initialize &#x3D; model_dll.Optimize1_initialize\nmodel_step &#x3D; model_dll.Optimize1_step\nmodel_terminate &#x3D; model_dll.Optimize1_terminate\n# Input Signals\nCurrent &#x3D; real_T.in_dll(model_dll, &quot;Current&quot;)\nTemperature &#x3D; real_T.in_dll(model_dll, &quot;Temperature&quot;)\nPressureAnode &#x3D; real_T.in_dll(model_dll, &quot;PressureAnode&quot;)\nOER &#x3D; real_T.in_dll(model_dll, &quot;OER&quot;)\nPressureCathode &#x3D; real_T.in_dll(model_dll, &quot;PressureCathode&quot;)\nRH_Cathode &#x3D; real_T.in_dll(model_dll, &quot;RH_Cathode&quot;)\n# Output Signals\nNetPower &#x3D; real_T.in_dll(model_dll, &quot;NetPower&quot;)\n# Input Parameters\nCurrent.value &#x3D; 200\nPressureCathode.value &#x3D; cathode_pressure_in * 101325\nPressureAnode.value &#x3D; cathode_pressure_in * 101325\nOER.value &#x3D; oer\nRH_Cathode.value &#x3D; rh_cathode\nTemperature.value &#x3D; temperature\n# Simulation\nmodel_initialize()\nfor _ in range(1000):\n    model_step()\nmodel_terminate()\n# OutPut Parameters\nnetpower &#x3D; NetPower.value\nprint(netpower)</code></pre>\n<p>使用 <code>ctypes</code> 库调用 <code>dll</code> 动态库文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 导入 dll 文件\nmodel_dll_path &#x3D; os.path.abspath(path)\nmodel_dll &#x3D; ctypes.windll.LoadLibrary(model_dll_path)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 模型初始化\nmodel_initialize &#x3D; model_dll.Optimize1_initialize\n# 单步仿真\nmodel_step &#x3D; model_dll.Optimize1_step\n# 终止仿真\nmodel_terminate &#x3D; model_dll.Optimize1_terminate</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 变量映射\nCurrent &#x3D; real_T.in_dll(model_dll, &quot;Current&quot;)\nTemperature &#x3D; real_T.in_dll(model_dll, &quot;Temperature&quot;)\nPressureAnode &#x3D; real_T.in_dll(model_dll, &quot;PressureAnode&quot;)</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 变量赋值\nCurrent.value &#x3D; 200\nPressureCathode.value &#x3D; cathode_pressure_in * 101325\nPressureAnode.value &#x3D; cathode_pressure_in * 101325</code></pre>\n","text":"一、创建输入输出变量 将变量设置为全局变量： 右击信号线，选择 Properties Current &#x3D; Simulink.Signal; Current.CoderInfo.StorageClass &#x3D; &quot;ExportedGlobal&quot;;...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"Simulink","slug":"Simulink","count":1,"path":"api/categories/Simulink.json"}],"tags":[{"name":"代码生成","slug":"代码生成","count":1,"path":"api/tags/代码生成.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%88%9B%E5%BB%BA%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">一、创建输入输出变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E8%AF%91%E5%99%A8\"><span class=\"toc-text\">二、设置编译器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E6%B1%82%E8%A7%A3%E5%99%A8%E4%B8%BA%E5%9B%BA%E5%AE%9A%E6%AD%A5%E9%95%BF\"><span class=\"toc-text\">设置求解器为固定步长</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90\"><span class=\"toc-text\">设置代码生成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">生成代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93\"><span class=\"toc-text\">生成的动态链接库</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E8%B0%83%E7%94%A8%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93\"><span class=\"toc-text\">Python 调用动态链接库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">变量类型映射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数调用</span></a></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CubeMX 添加 DSP 库","uid":"bf8918495fd2885b956948d83a291295","slug":"MCU/CubeMX-DSP","date":"2023-06-08T02:30:00.000Z","updated":"2023-08-30T02:42:09.978Z","comments":true,"path":"api/articles/MCU/CubeMX-DSP.json","keywords":null,"cover":"/img/STM32-GPIO/STM32-logo.jpg","text":" 添加宏定义： 在 keil 中添加宏定义： 调用 arm_math.h ","link":"","photos":[],"count_time":{"symbolsCount":42,"symbolsTime":"1 mins."},"categories":[{"name":"STM32","slug":"STM32","count":1,"path":"api/categories/STM32.json"}],"tags":[{"name":"DSP 库","slug":"DSP-库","count":1,"path":"api/tags/DSP-库.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"FreeRTOS 的定时器 (Timer)","uid":"0de178335a5288a6c84f26e77dfbea47","slug":"FreeRTOS/Timer","date":"2023-05-07T09:24:00.000Z","updated":"2023-05-07T09:36:40.877Z","comments":true,"path":"api/articles/FreeRTOS/Timer.json","keywords":null,"cover":"/img/FreeRTOS/logo.jpg","text":"软件定时器用于在将来一个设定的时间或以固定频率定期的执行函数。软件定时器所执行的函数被称为软件定时器的回调函数。 软件定时器由 FreeRTOS 内核实现，并受其控制。它不需要硬件支持，也与硬件定时器或硬件计数器无关。软件计时器不使用任何处理时间，除非软件计时器回调函数正在实际执...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":3,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"FreeRTOS","slug":"FreeRTOS","count":3,"path":"api/tags/FreeRTOS.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}