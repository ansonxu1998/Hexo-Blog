{"title":"路径规划算法","uid":"2b59eb5778e5da9b12f5210e8d61016e","slug":"Self-Driving/PathPlan","date":"2022-05-03T16:00:00.000Z","updated":"2022-06-20T02:41:15.487Z","comments":true,"path":"api/articles/Self-Driving/PathPlan.json","keywords":null,"cover":[],"content":"<h1 id=\"自动驾驶汽车定位-感知-规划-决策-控制概述\">1.\n自动驾驶汽车定位-感知-规划-决策-控制概述</h1>\n<h3 id=\"定位\">定位</h3>\n<ul>\n<li>定位，即通过GPS、惯导、激光雷达等传感器，获取车辆的位置和航向信息。</li>\n<li><strong>绝对定位</strong>是指通过GPS实现，采用双天线，通过卫星获得车辆在地球上的绝对位置和航向信息。</li>\n<li><strong>相对定位</strong>是指根据车辆的初始位姿，通过惯导、里程计等传感器获得加速度信息，将其对时间进行积分，即可得到相对初始位姿的当前位姿信息。</li>\n</ul>\n<h3 id=\"感知\">感知</h3>\n<ul>\n<li>环境感知，即通过<strong>摄像头、激光雷达、毫米波雷达、超声波雷达</strong>等队中传感器，感知周围环境信息和车辆状态信息。</li>\n<li>环境信息包括：道路、方向、曲率、坡度、交通标志，信号灯；车辆状态信息包括：车辆前进的速度、加速度、转向角度、车身位置及姿态。</li>\n<li>多种传感器虽然可以获得丰富、细致的环境信息，但如何对多种传感器的信息进行<strong>融合统一处理</strong></li>\n</ul>\n<h3 id=\"规划\">规划</h3>\n<ul>\n<li>规划是对未来时域、空域的车辆一系列动作的计划。从涉及的时空大小全局（宏观）路径规划和局部（微观）路径规划。</li>\n<li><strong>全局路径规划</strong>指在已知全局地图的情况下，从车辆当前位置规划出一条到目的地的全局路径。</li>\n<li><strong>局部路径规划</strong>指根据环境感知的信息在环道、转弯、躲避障碍物等情况下，实时规划出一条安全、平顺、舒适的行驶路径。</li>\n</ul>\n<h3 id=\"决策控制\">决策控制</h3>\n<ul>\n<li>决策控制，包括决策和控制两部分</li>\n<li>决策，在整个无人驾驶系统中，扮演<strong>驾驶员大脑</strong>的角色，根据定位、感知、路径规划的信息，决定无人车的形式策略。包括：选取哪条车道、是否换道、是否跟车行驶、是否绕道、是否停车等。</li>\n<li>控制，主要包括<strong>转向、驱动、制动</strong>三方面的控制，执行规划决策模块下发的期望速度和期望转向角度，也包括转向灯、喇叭、门窗等的控制。</li>\n</ul>\n<h1\nid=\"全局路径规划算法dijkstra算法\">2.全局路径规划算法——Dijkstra算法</h1>\n<h2 id=\"算法简介\">算法简介</h2>\n<p>迪杰斯特拉算法(Dijkstra)是由荷兰计算机科学家狄克斯特拉于1959年提出的，因此又叫狄克斯特拉算法。是从一个节点遍历其余各节点的最短路径算法，解决的是有权图中最短路径问题</p>\n<h2 id=\"算法思想\">算法思想</h2>\n<ul>\n<li>设<span\nclass=\"math inline\">\\(G=(V,E)\\)</span>是一个带权有向图，把图中节点集合V分成两组，<font color='green'>第一组为已求出最短路径的集合</font>,(用S表示，初始时S中只有一个源点，以后每求得一条最短路径，就将该节点加入到集合S中，直到全部节点都加入到S中，算法结束)</li>\n<li><font color='green'>第二组为区域未确定最短路径的节点集合</font>（用U表示），按最短路径长度的递增次序依次把第二组的节点加入S中。在加入的过程中，总保持从源点v到S中各节点的最短路径长度不大于从源点v到U中任何节点的最短路径长度。</li>\n<li>此外，每个节点对应一个距离，S中的节点的距离就是从v到此节点的最短距离路径长度，U中的节点的距离，是从v到此节点只包括S中的节点为中间节点的当前最短路径长度。</li>\n</ul>\n<p><img src=\"/img/PathPlaning/Dijkstra.png\" /></p>\n<h2 id=\"算法精讲\">算法精讲</h2>\n<ul>\n<li>初始时，S只包含起点s；U包含除s外的其他节点，且U中节点的距离为”起点s到该节点的距离“[例如，U中节点v的距离为(s,v)的长度，然后s和v不相邻，则v的距离为<span\nclass=\"math inline\">\\(\\infty\\)</span>].</li>\n<li>从U中选出”距离最短的节点k“，并将节点k加入到S中；同时，从U中移除节点k。</li>\n<li>更新U中各节点到起点s的距离。之所以更新U中节点的距离，是因为上一步确定了k是求出最短路径的节点，从而可以利用k来更新其他节点的距离；例如，<span\nclass=\"math inline\">\\((s,v)\\)</span>的距离可能大于<span\nclass=\"math inline\">\\((s,k)+(k,v)\\)</span>的距离。</li>\n<li>重复步骤(2)和(3)，直到遍历完所有节点。</li>\n</ul>\n<p><img src=\"/img/PathPlaning/Dijkstra1.png\" /></p>\n<p><strong>选取节点<span class=\"math inline\">\\(D\\)</span>，<span\nclass=\"math inline\">\\(S=\\{D(0)\\}\\)</span> <span\nclass=\"math inline\">\\(U=\\{A(\\infty),B(\\infty),{\\color{Red}C(3)},E(4),F(\\infty),G(\\infty)\\}\\)</span></strong></p>\n<p><img src=\"/img/PathPlaning/Dijkstra2.png\" /></p>\n<p><strong>选取节点<span class=\"math inline\">\\(C\\)</span>，<span\nclass=\"math inline\">\\(S=\\{D(0),C(3)\\}\\)</span>，<span\nclass=\"math inline\">\\(\\{A(\\infty),B(13),{\\color{Red}E(4)},F(9),G(\\infty)\\}\\)</span>.</strong></p>\n<p><img src=\"/img/PathPlaning/Dijkstra3.png\" /></p>\n<p><strong>选取节点<span class=\"math inline\">\\(E\\)</span>，<span\nclass=\"math inline\">\\(S=\\{D(0),C(3),E(4)\\}\\)</span>，<span\nclass=\"math inline\">\\(U=\\{A(\\infty),B(13),{\\color{Red}F(6)},G(12)\\}\\)</span>.</strong></p>\n<p><img src=\"/img/PathPlaning/Dijkstra4.png\" /></p>\n<p><strong>选取节点<span class=\"math inline\">\\(F\\)</span>，<span\nclass=\"math inline\">\\(S=\\{D(0),C(3),E(4),F(6)\\}\\)</span>，<span\nclass=\"math inline\">\\(U=\\{A(2),B(13),{\\color{Red}G(12)}\\}\\)</span>.</strong></p>\n<p><img src=\"/img/PathPlaning/Dijkstra5.png\" /></p>\n<p><span\nclass=\"math inline\">\\(S=\\{D(0),C(3),E(4),F(6),G(12)\\}\\)</span>，<span\nclass=\"math inline\">\\(U=\\{A(22),{\\color{Red}B(13)}\\}\\)</span>.</p>\n<p><img src=\"/img/PathPlaning/Dijkstra6.png\" /></p>\n<p><span\nclass=\"math inline\">\\(S=\\{D(0),C(3),E(4),F(6),G(12),B(13)\\}\\)</span>，<span\nclass=\"math inline\">\\(U=\\{\\color{Red}A(22)\\}\\)</span>.</p>\n<p><img src=\"/img/PathPlaning/Dijkstra7.png\" /></p>\n<p><span\nclass=\"math inline\">\\(S=\\{D(0),C(3),E(4),F(6),G(12),B(13),A(22)\\}\\)</span>，<span\nclass=\"math inline\">\\(U=\\varnothing\\)</span>.</p>\n<p><img src=\"/img/PathPlaning/Dijkstra8.png\" /></p>\n<p><span class=\"math inline\">\\(D\\rightarrow A\\)</span>的最优路径为<span\nclass=\"math inline\">\\(D\\rightarrow E \\rightarrow F \\rightarrow\nA\\)</span></p>\n<p>最短距离为22</p>\n<h2 id=\"matlab实现\">Matlab实现</h2>\n<pre class=\"line-numbers language-matlab\" data-language=\"matlab\"><code class=\"language-matlab\">clc\nclear\nclose all\n%% 图定义\n% 根据节点的邻近节点表及字母点-数字节点对应表，构造节点元胞数组\nnodes_dist &#x3D; cell(0);\nnodes_dist(1,:) &#x3D; &#123;1, [2, 6, 7], [12, 16, 14]&#125;;\nnodes_dist(2,:) &#x3D; &#123;2, [1, 3, 6], [12, 10, 7]&#125;;\nnodes_dist(3,:) &#x3D; &#123;3, [2, 4, 5, 6], [10, 3, 5, 6]&#125;;\nnodes_dist(4,:) &#x3D; &#123;4, [3, 5], [3, 4]&#125;;\nnodes_dist(5,:) &#x3D; &#123;5, [3, 4, 6, 7], [5, 4, 2, 8]&#125;;\nnodes_dist(6,:) &#x3D; &#123;6, [1, 2, 3, 5, 7], [16, 7, 6, 2, 9]&#125;;\nnodes_dist(7,:) &#x3D; &#123;7, [1, 5, 6], [14, 8, 9]&#125;;\n\n%% 算法初始化\n% S&#x2F;U的第一列表示节点编号\n% 对于S,第二列表示从源节点到本节点已求得的最小距离，不再变更；\n% 对于U,第二列表示从源节点到本节点暂时求得的最小距离，可能会变更\nS &#x3D; [4, 0];\nU(:,1) &#x3D; [1, 2, 3, 5, 6, 7];\nU(:,2) &#x3D; [inf, inf, 3, 4, inf, inf]&#125;;\n\n% 最优路径及暂时的最优路径的初始化\npath_opt &#x3D; cell(7, 2);\npath_opt(4,:) &#x3D; &#123;4, 4&#125;;\n\npath_temp &#x3D; cell(7, 2);\npath_temp(3,:) &#x3D; &#123;3, [4, 3]&#125;;\npath_temp(4,:) &#x3D; &#123;4, 4&#125;;\npath_temp(5,:) &#x3D; &#123;5, [4, 5]&#125;;\n\n%% 循环遍历所有节点\nwhile ~isempty(U)\n[dist_min, idx] &#x3D; min(U(:,2));\nnode_min &#x3D; U(idx, 1);\nS(end+1,:) &#x3D; [node_min, dist_min];\nU(idx,:) &#x3D; [];\n\n% 将最小的距离值的节点添加到到最优路径集合\npath_opt(node_min,:) &#x3D; path_temp(node_min,:);\n\n%% 依次遍历最小距离节点的邻节点，判断是否在U集合中更新邻节点的距离值\nfor i &#x3D; 1:length(nodes_dist&#123;node_min, 2&#125;)\n\ti &#x3D; 1;\n\t% 需要判断的节点\n\tnode_temp &#x3D; nodes_dist&#123;node_min, 2&#125;(i);\n\t\n\t% 找出U集合中节点node_temp的索引值\n\tidx_temp &#x3D; find(node_temp &#x3D;&#x3D; U(:,1));\n\t\n\t% 判断是否更新\n\tif ~isempty(idx_temp)\n\t\tif dist_min + node_dist&#123;node_min, 3&#125;(i) &lt; U(idx_temp, 2)\n\t\t\tU(idx_temp, 2) &#x3D; dist_min + nodes_dist&#123;node_min, 3&#125;(i)\n\t\t\t\n\t\t\t% 更新暂时最优路径\n\t\t\tpath_temp&#123;node_temp, 1&#125; &#x3D; node_temp;\n            path_temp&#123;node_temp, 2&#125; &#x3D; [path_opt&#123;node_min, 2&#125;, node_temp];\n            end        </code></pre>\n<h2 id=\"python实现\">Python实现</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 图定义\n# 根据节点的邻近节点表-数字对应表，构造图\nnodes_dist &#x3D; dict()\nnodes_dist[1] &#x3D; &#123;2: 12, 6: 16, 7: 14&#125;\nnodes_dist[2] &#x3D; &#123;1: 12, 3: 10, 6: 7&#125;\nnodes_dist[3] &#x3D; &#123;2: 10, 4: 3, 5: 5, 6: 6&#125;\nnodes_dist[4] &#x3D; &#123;3: 3, 5: 4&#125;\nnodes_dist[5] &#x3D; &#123;3: 5, 4: 4, 6: 2, 7: 8&#125;\nnodes_dist[6] &#x3D; &#123;1: 16, 2: 7, 3: 6, 5: 2, 7: 9&#125;\nnodes_dist[7] &#x3D; &#123;1: 14, 5: 8, 6: 9&#125;\n\n# S 集合\nS &#x3D; dict()\n\n# U 集合\nU &#x3D; dict()\nU[1] &#x3D; float(&#39;inf&#39;)\nU[2] &#x3D; float(&#39;inf&#39;)\nU[3] &#x3D; float(&#39;inf&#39;)\nU[4] &#x3D; 0\nU[5] &#x3D; float(&#39;inf&#39;)\nU[6] &#x3D; float(&#39;inf&#39;)\nU[7] &#x3D; float(&#39;inf&#39;)\n\n# 当前最优路径\nkeys &#x3D; [i for i in range(1, 8)]\npath_temp &#x3D; dict([(k, []) for k in keys])\n\n\n# 最终最优路径\npath_opt &#x3D; dict([(k, []) for k in keys])\n\n# 循环遍历U集合，直到所有节点被确定，并移出集合\nwhile U:\n    # 寻找U集合中的最小值，及其对应的节点\n    dist_min &#x3D; min(U.values())\n    node_min &#x3D; min(U, key&#x3D;U.get)\n    # 将最小值节点移出U集合，移入S集合\n    S[node_min] &#x3D; dist_min\n    del U[node_min]\n\n    # 确定该最小值节点的最终最优路径\n    path_opt[node_min] +&#x3D; path_temp[node_min]\n    path_opt[node_min].append(node_min)\n\n    # 围绕该最小值节点，循环遍历其相邻节点\n    for node_temp in nodes_dist[node_min].keys():\n        # 判断该相邻节点是否在集合U中，即该节点是否已经被确定。若已确定，则不做考虑\n        if node_temp in list(U.keys()):\n            # 判断该路径是否比原有路径短\n            if (dist_min + nodes_dist[node_min][node_temp]) &lt; U[node_temp]:\n                # 更新最短距离\n                U[node_temp] &#x3D; dist_min + nodes_dist[node_min][node_temp]\n                # 该最短距离所对应的新路径\n                path_temp[node_temp] &#x3D; path_opt[node_min]\n\nprint(S, U)\nprint(path_opt)</code></pre>\n<h1 id=\"全局路径规划算法蚁群算法\">3.全局路径规划算法——蚁群算法</h1>\n<h2 id=\"算法简介-1\">算法简介</h2>\n<p>蚁群算法是一种智能算法，它是由一群无智能或有微智能的个体(Agent)通过相互协作表现出智能行为，从而为求解复杂问题提供了一个新的可能性。</p>\n<ul>\n<li>蚁群算法(Ant Colony Algorithm, ACA)\n于1992年首次提出，该算法模拟了自然界中<font color='green'>蚂蚁的觅食行为</font>.</li>\n<li>蚂蚁在寻找食物源时，会在其经过的路径上释放一种信息素，并能够感知其他蚂蚁释放的信息素，信息素<font color='green'>浓度的大小表征路径的远近</font>，信息素浓度越高，表示对应的路径距离越短。</li>\n<li>通常，蚂蚁会以较大的概率优先选择信息素浓度较大路径，并释放一定量的信息素，以增强该条路径上的信息素浓度，这样，会形成正反馈。最终，蚂蚁能够找到一条从巢穴到食物源的最佳路径，即距离最短。</li>\n</ul>\n<h3 id=\"tsp问题描述\">TSP问题描述</h3>\n<p>蚁群算法最早用来解决TSP问题，并且表现出很大的优越性，因为它有分布式特性、鲁棒性强并且容易与其他算法结合，但是同时也存在收敛速度慢，容易陷入局部最优等缺点。</p>\n<p>TSP问题(Travel Salesperson\nProblem，即旅行商问题或者称为中国邮递员问题)，是一种NP-hard问题，此类问题用一般的算法很难得到最优解的，所以一般需要借助一些启发式算法求解，例如遗传算法(GA)，蚁群算法(ACO)，微粒群算法(PSO)等。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TSP问题（旅行商问题）是指旅行家旅行n个城市，要求<strong>各个城市经历且仅经历一次</strong>然后回到出发城市，并要求所走路程最短。</p></blockquote>\n<p>一个TSP问题可以表达为：求解遍历图<span\nclass=\"math inline\">\\(G=(V,E,C)\\)</span>，所有的节点一次并且回到起始节点，使得连接这些节点的路径成本最低。</p>\n<h2 id=\"算法思想-1\">算法思想</h2>\n<ul>\n<li>用蚂蚁的行走路径并表示待优化问题的可行解，整个蚂蚁群的所有路径构成待优化问题的解空间。</li>\n<li>路径较短的，蚂蚁会释放较多的信息素，随着时间的推进，<font color='green'>较短的路径上积累的信息素浓度逐渐增高</font>，选择该路径的蚂蚁个数也愈来愈多。</li>\n<li>最终，整个蚂蚁会在正反馈的作用下集中到最佳的路径上，此时对应的便是待优化问题的最优解。</li>\n</ul>\n<p><img src=\"/img/PathPlaning/ACA.jpg\" /></p>\n<h2 id=\"算法精讲-1\">算法精讲</h2>\n<h3 id=\"原理\">原理</h3>\n<p>假如蚁群中所有蚂蚁的数量为<span\nclass=\"math inline\">\\(m\\)</span>，所有城市之间的信息素用矩阵<span\nclass=\"math inline\">\\(pheromone\\)</span>表示，最短路径为<span\nclass=\"math inline\">\\(bestLength\\)</span></p>\n<p>，最佳路径为<span\nclass=\"math inline\">\\(bestTour\\)</span>。每只蚂蚁都有自己的内存，内存中用一个禁忌表(Tabu)来存储蚂蚁已经访问过的城市，表示以后的搜索将不能访问这些城市；还有用另外一个允许访问的城市表(Allowed)来存储它还可以访问的城市；另外还用矩阵(Delta)来储存它在一个循环（或者迭代）中经过的路径释放的信息素；还有另外一些数据，例如一些控制参数<span\nclass=\"math inline\">\\((\\alpha,\\beta,\\rho,Q)\\)</span>，该蚂蚁行走完全程的总成本或距离(tourLength)，等等。假定算法总共运行MAX_GEN次，运行时间为t.</p>\n<p>蚁群算法计算过程如下：</p>\n<ol type=\"1\">\n<li><p>初始化</p></li>\n<li><p>为每只蚂蚁选择下一个节点。</p></li>\n<li><p>更新信息素矩阵</p></li>\n<li><p>检查终止条件</p></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果达到最大迭代数MAX_GEN，算法终止，转到第(5)步；否则，重新初始化所有蚂蚁的Delta矩阵所有元素初始化为0，Tabu表清空，Allowed表加入所有城市节点。随机选择它们的起始位置（也可以人为指定）。在Tabu表中加入起始节点，Allowed表中删除该起始节点，重复执行(2),(3),(4)步。</p></blockquote>\n<ol start=\"5\" type=\"1\">\n<li>输出最优值</li>\n</ol>\n<hr />\n<p>不失一般性，设整个蚂蚁群体中蚂蚁的数量为<span\nclass=\"math inline\">\\(m\\)</span>，城市的数量为<span\nclass=\"math inline\">\\(n\\)</span>，城市<span\nclass=\"math inline\">\\(i\\)</span>与城市<span\nclass=\"math inline\">\\(j\\)</span>之间的相互距离为<span\nclass=\"math inline\">\\(d_{ij}(i,j=1,2,...,n)\\)</span>，<span\nclass=\"math inline\">\\(t\\)</span>时刻城市<span\nclass=\"math inline\">\\(i\\)</span>与城市<span\nclass=\"math inline\">\\(j\\)</span>连接路径上的信息素浓度为<span\nclass=\"math inline\">\\(\\tau_{ij}(t)\\)</span>。初始时刻，各个城市间连接路径上的信息素浓度相同，不妨设为<span\nclass=\"math inline\">\\(\\tau_{ij}(0)=\\tau_0\\)</span>。</p>\n<p>蚂蚁<span\nclass=\"math inline\">\\(k(k=1,2,...,m)\\)</span>根据各个城市间连接路径上的信息素浓度决定其下一个访问的城市，设<span\nclass=\"math inline\">\\(P^k_{ij}(t)\\)</span>表示<span\nclass=\"math inline\">\\(t\\)</span>时刻蚂蚁<span\nclass=\"math inline\">\\(k\\)</span>从城市<span\nclass=\"math inline\">\\(i\\)</span>转移到城市<span\nclass=\"math inline\">\\(j\\)</span>的概率，其计算公式如下：</p>\n<p>​ <span\nclass=\"math display\">\\[P^K_{ij}=\\begin{cases}\\dfrac{[\\tau_{ij}(t)]^\\alpha\n\\cdot [\\eta_{ij}(t)]^\\beta}{\\sum\\limits_{S \\in\nallow_k}[\\tau_{is}(t)]^\\alpha\\cdot [\\eta_{is}(t)]^\\beta},&amp;S \\in\nallow_k \\\\ 0, &amp;S \\notin allow_k\\end{cases}\\]</span></p>\n<p>其中，<span\nclass=\"math inline\">\\(\\eta_{ij}(t)\\)</span>为启发函数，<span\nclass=\"math inline\">\\(\\eta_{ij}(t)=\\frac{1}{d_{ij}}\\)</span>，表示蚂蚁从城市<span\nclass=\"math inline\">\\(i\\)</span>转移到城市<span\nclass=\"math inline\">\\(j\\)</span>的期望程度，<span\nclass=\"math inline\">\\(allow_k(k=1,2,...,m)\\)</span>蚂蚁<span\nclass=\"math inline\">\\(k\\)</span>待访问城市的集合。开始时，<span\nclass=\"math inline\">\\(allow_k\\)</span>中有<span\nclass=\"math inline\">\\((n-1)\\)</span>个元素，即包括除了蚂蚁<span\nclass=\"math inline\">\\(k\\)</span>出发城市的其他所有城市，随着时间的推进，<span\nclass=\"math inline\">\\(allow_k\\)</span>中的元素不断减少，直至为空，即表示所有的城市均访问完毕。<span\nclass=\"math inline\">\\(\\alpha\\)</span>为信息素重要程度因子，其值越大，表示信息素的浓度在转移中起的作用越大；<span\nclass=\"math inline\">\\(\\beta\\)</span>为启发函数重要程度因子，其值越大，表示启发函数转移中的作用越大，即蚂蚁会以较大的概率转移到距离短的城市。</p>\n<p>在蚂蚁释放信息素的同时，各个城市间连接路径上的信息素逐渐消失，设参数<span\nclass=\"math inline\">\\(\\rho(0&lt;\\rho&lt;1)\\)</span>表示信息挥发程度。因此，当所有蚂蚁完成一次循环后，各个城市间连接路径上的信息素浓度需要进行实时更新，具体公式如下：</p>\n<p>​ <span class=\"math display\">\\[\\begin{cases}\\tau_{ij}(t+1) =\n(1-\\rho)*\\tau_{ij}(t)+\\Delta\\tau_{ij} \\\\\n\\Delta\\tau_{ij}=\\sum\\limits_{k=1}^m \\Delta\\tau^k_{ij}, &amp;\n0&lt;\\rho&lt;1\\end{cases}\\]</span></p>\n<p>其中，<span\nclass=\"math inline\">\\(\\Delta\\tau^k_{ij}\\)</span>表示第<span\nclass=\"math inline\">\\(k\\)</span>只蚂蚁在城市<span\nclass=\"math inline\">\\(i\\)</span>与城市<span\nclass=\"math inline\">\\(j\\)</span>连接路径上释放的信息素浓度，<span\nclass=\"math inline\">\\(\\Delta\\tau_{ij}\\)</span>表示所有蚂蚁在城市<span\nclass=\"math inline\">\\(i\\)</span>与城市<span\nclass=\"math inline\">\\(j\\)</span>连接路径上释放的信息素浓度之和。</p>\n<p>ant cycle system 模型中，<span\nclass=\"math inline\">\\(\\Delta\\tau^k_{ij}\\)</span>的计算公式如下：</p>\n<p>​ <span class=\"math display\">\\[\\Delta\\tau^k_{ij}=\\begin{cases}Q/L_k,\n&amp; 第k只蚂蚁从城市i访问城市j \\\\ 0, &amp; 其它\\end{cases}\\]</span></p>\n<table>\n<colgroup>\n<col style=\"width: 9%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 56%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th></th>\n<th style=\"text-align: center;\">定义</th>\n<th style=\"text-align: center;\">参数影响分析</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><span class=\"math inline\">\\(\\alpha\\)</span></td>\n<td style=\"text-align: center;\">信息启发式因子</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(\\alpha\\)</span>值越大，蚂蚁选择之前走过的路径可能性就越大，搜索路径的随机性减弱，<span\nclass=\"math inline\">\\(\\alpha\\)</span>越小，蚁群搜索范围就会减少，容易陷入局部最优</td>\n</tr>\n<tr class=\"even\">\n<td><span class=\"math inline\">\\(\\beta\\)</span></td>\n<td style=\"text-align: center;\">期望启发式因子</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(\\beta\\)</span>值越大，蚁群越容易选择局部较短路径，这时算法的收敛速度是加快了，但是随机性却不高，容易得到局部最优解</td>\n</tr>\n<tr class=\"odd\">\n<td><span class=\"math inline\">\\(m\\)</span></td>\n<td style=\"text-align: center;\">蚁群数量</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(m\\)</span>数目越多，得到的最优解就越精确，但是会产生不少重复解，随着算法接近最优解的收敛，信息正反馈作用降低，大量的重复工作，消耗了资源，增加了时间复杂度</td>\n</tr>\n<tr class=\"even\">\n<td><span class=\"math inline\">\\(\\rho\\)</span></td>\n<td style=\"text-align: center;\">信息挥发因子，<span\nclass=\"math inline\">\\(1-\\rho\\)</span>表示残留因子</td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(\\rho\\)</span>过小时，在各路径上残留的信息素过多，导致无效的路径继续被搜索，影响到算法的收敛速率；<span\nclass=\"math inline\">\\(\\rho\\)</span>过大，无效的路径虽然可以被排除搜索，但是不能保证有效的路径也会被搜索，影响到最优值的搜索。</td>\n</tr>\n</tbody>\n</table>\n<p>蚁群算法中主要参数的理想选择如下：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">参数</th>\n<th style=\"text-align: center;\">取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(\\alpha\\)</span></td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\([0,5]\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(\\beta\\)</span></td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\([0,5]\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(Q\\)</span></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\([10,\n10000]\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\(\\rho\\)</span></td>\n<td style=\"text-align: center;\"><span\nclass=\"math inline\">\\([0.1,0.99]\\)</span></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p><strong>流程图</strong>：</p>\n<p><img src=\"/img/PathPlaning/aca.png\" /></p>\n<h2 id=\"文献\">文献</h2>\n<h3 id=\"蚁群算法中参数-αβ-ρ设置的研究-以-tsp-问题为例\">1.蚁群算法中参数\nα、β 、ρ设置的研究 ———以 TSP 问题为例</h3>\n<p>蚁群算法在TSP问题应用中取得了良好的效果，但也存在一些不足：</p>\n<ul>\n<li>如果参数<span class=\"math inline\">\\(\\alpha 、\\beta\n、\\rho\\)</span>设置不当，导致求解速度很慢且所得的解质量特别差；</li>\n<li>基本蚁群算法计算量大，求解所需要的时间较长；</li>\n<li>基本蚁群算法中理论上要求所有的蚂蚁选择同一路线，该线路即为所求的最优线路；但在实际计算中，在给定一定循环次数的条件下很难实现这种情况。</li>\n<li>另一方面，在其他实际应用中，如图像处理中寻求最优模板问题，并不要求所有的蚂蚁都能找到最优的模板，而只需要一只找到即可。</li>\n</ul>\n<p><span class=\"math inline\">\\((t+n)\\)</span>时刻在<span\nclass=\"math inline\">\\(ij\\)</span>路径上的信息素浓度为：</p>\n<p>​ <span\nclass=\"math display\">\\[\\tau_{ij}(t+n)=(1-\\rho)\\tau_{ij}(t)+\\Delta\\tau_{ij}(t+n)\\]</span></p>\n<p><span class=\"math inline\">\\(\\Delta\\tau_{ij}\\)</span>表示蚂蚁<span\nclass=\"math inline\">\\(k\\)</span>在时间段<span\nclass=\"math inline\">\\(t\\)</span>到<span\nclass=\"math inline\">\\((t+n)\\)</span>的过程中，在<span\nclass=\"math inline\">\\(i\\)</span>到<span\nclass=\"math inline\">\\(j\\)</span>的路径上留下的残留信息浓度。根据信息素更新策略的不同，有3种不同的蚁群算法模型：</p>\n<ol type=\"1\">\n<li><p>ant-quantity模型</p>\n<p><span\nclass=\"math display\">\\[\\Delta\\tau_{ij}(t,t+1)=\\begin{cases}\\dfrac{Q_1}{d_{ij}}，\n&amp;如果蚂蚁k经过ij \\\\ 0， &amp;如果蚂蚁k不经过ij\n\\end{cases}\\]</span></p>\n<p>式中，<span\nclass=\"math inline\">\\(Q_1\\)</span>是常量，信息素的增量与<span\nclass=\"math inline\">\\(ij\\)</span>之间的距离有关。</p></li>\n<li><p>ant-density模型</p>\n<p><span\nclass=\"math display\">\\[\\Delta\\tau_(t,t+1)=\\begin{cases}Q_2，&amp;如果蚂蚁k经过ij\n\\\\ 0，&amp; 如果蚂蚁k不经过ij \\end{cases}\\]</span></p>\n<p>式中，<span\nclass=\"math inline\">\\(Q_2\\)</span>是常量，则信息素增加一个固定值，与<span\nclass=\"math inline\">\\(ij\\)</span>之间的距离无关</p></li>\n<li><p>ant-cycle模型</p>\n<p><span\nclass=\"math display\">\\[\\Delta\\tau_{ij}(t,t+1)=\\begin{cases}Q_3/L^k，&amp;如果蚂蚁k在巡回中经过ij\n\\\\ 0，&amp;如果蚂蚁k在巡回中不经过ij \\end{cases}\\]</span></p>\n<p>式中，<span class=\"math inline\">\\(Q_3\\)</span>是常量；<span\nclass=\"math inline\">\\(L^k\\)</span>表示第<span\nclass=\"math inline\">\\(k\\)</span>只蚂蚁的循环路线，即如果蚂蚁经过<span\nclass=\"math inline\">\\(ij\\)</span>，则信息素增量为一个常量除以蚂蚁<span\nclass=\"math inline\">\\(k\\)</span>的巡回路线长。这里，信息素增量只与蚂蚁的巡回路线和<span\nclass=\"math inline\">\\(Q_3\\)</span>有关系，而和具体的<span\nclass=\"math inline\">\\(d_{ij}\\)</span>无关。</p></li>\n</ol>\n<h2 id=\"代码实现\">代码实现</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import random\nimport copy\nimport time\nimport sys\nimport math\nimport tkinter\nimport threading\nfrom functools import reduce\n\n# 参数\n&#39;&#39;&#39;\nAlpha:信息启发因子，值越大，则蚂蚁选择之前走过的路径可能性就越大，值越小，则蚁群搜索范围就会减少，容易陷入局部最优\nBeta:值越大，蚁群就越容易选择局部最短路径，这时算法收敛速度加快，但是随机性不高，容易得到局部的相对最优\n&#39;&#39;&#39;\n(Alpha, Beta, Rho, Q) &#x3D; (1.0, 2.0, 0.5, 100.0)\n# 城市数，蚁群\n(city_num, ant_num) &#x3D; (50, 50)\ndistance_x &#x3D; [\n    178,272,176,171,650,499,267,703,408,437,491,74,532,\n    416,626,42,271,359,163,508,229,576,147,560,35,714,\n    757,517,64,314,675,690,391,628,87,240,705,699,258,\n    428,614,36,360,482,666,597,209,201,492,294]\ndistance_y &#x3D; [\n    170,395,198,151,242,556,57,401,305,421,267,105,525,\n    381,244,330,395,169,141,380,153,442,528,329,232,48,\n    498,265,343,120,165,50,433,63,491,275,348,222,288,\n    490,213,524,244,114,104,552,70,425,227,331]\n\n# 城市距离和信息素\ndistance_graph &#x3D; [[0.0 for col in range(city_num)] for raw in range(city_num)]\npheromone_graph &#x3D; [[1.0 for col in range(city_num)] for raw in range(city_num)]\n\n\n#----------蚂蚁-----------\nclass Ant(object):\n    def  __init__(self, ID):\n        self.ID &#x3D; ID                    # ID\n        self.__clean_data()             # 随机初始化出生点</code></pre>\n<h1\nid=\"全局路径规划算法动态规划算法\">4.全局路径规划算法——动态规划算法</h1>\n<h2 id=\"算法简介-2\">算法简介</h2>\n<ul>\n<li>动态规划是运筹学的一个分支，是求解<strong>多阶段决策过程</strong>最优化问题的数学方法。</li>\n<li>各个阶段决策的选取不是任意确定的，它依赖于<strong>当前面临的状态</strong>，又<strong>影响以后的发展</strong>。当各个阶段的决策确定以后，就组成一个<strong>决策序列</strong>，因而也就决定了整个过程的一条活动路线，这样的一个前后关联具有链状结构的多阶段过程就称为多阶段决策问题。</li>\n<li>动态规划在车辆工程技术领域有着广泛的应用，如“<strong>两档变速器的最优换挡规律</strong>”、“<strong>混合动力汽车最优能量管理策略</strong>”、“<strong>栅格地图最优路径搜索</strong>”等。</li>\n</ul>\n<p>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。动态规划算法的基本思想与分治法类似，也是将待求解问题分解为若干子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，最后一个子问题就是初始问题的解。</p>\n<h2 id=\"算法思想-2\">算法思想</h2>\n<ul>\n<li>美国数学家Bellman等人在20世纪50年代初提出了著名的最优化原理，把多阶段决策问题转化为<strong>一系列单阶段最优化</strong>问题。</li>\n<li>对最佳路径（最佳决策过程）所经过的各个阶段，其中每各阶段起始点到全过程终点的路径，必定是该阶段起始点到全过程终点的一切可能路径中的最佳路径（最优决策），这就是Bellman提出的著名的最优化原理。</li>\n<li>简言之，<strong>一个最优决策的子决策必然是最优的</strong>。</li>\n</ul>\n<p><img src=\"/img/PathPlaning/多阶段决策过程示意图.png\" /></p>\n<h2 id=\"算法精讲-2\">算法精讲</h2>\n<ul>\n<li>逆向寻优，正向求解</li>\n<li>DP算法本质由三层循环构成</li>\n<li>第一层遍历每一个阶段；</li>\n<li>第二层遍历第i个阶段的每个状态；</li>\n<li>第三层循环遍历第i+1个阶段的每一个状态。</li>\n</ul>\n<p><img src=\"/img/PathPlaning/多阶段决策过程示意图2.png\" /></p>\n<hr />\n<p>第四阶段 (D-&gt;E): D有两条路线到终点E。</p>\n<p><span class=\"math display\">\\[f_4(D_1)=5, f_4(D_2)=2\\]</span></p>\n<hr />\n<p>第三阶段(C-&gt;D): C到D有6条路线</p>\n<p>第3阶段的C有3个状态值，分别讨论经过该状态值的最优路线</p>\n<p><strong>经过C1</strong></p>\n<p><span\nclass=\"math display\">\\[f_3(C_1)=min\\begin{Bmatrix}d(C_1,D_1)+f_4(D_1)\\\\d(C_1,D_2)+f_4(D_2)\n\\end{Bmatrix}=min\\begin{Bmatrix}3+5 \\\\ 9+2 \\end{Bmatrix} =\n8\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[C_1 \\rightarrow D_1\n\\rightarrow E\\]</span></p>\n<p><strong>经过C2</strong></p>\n<p><span class=\"math display\">\\[f_3(C_2)=min \\begin{Bmatrix}d(C_2,\nD_1)+f_4(D_1) \\\\ d(C_2,D_2)+f_4(D_2) \\end{Bmatrix} = min\n\\begin{Bmatrix}6+5 \\\\ 5+2 \\end{Bmatrix} = 7\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[C_2 \\rightarrow D_2\n\\rightarrow E\\]</span></p>\n<p><strong>经过C3</strong></p>\n<p><span class=\"math display\">\\[f_3(C_3)=min \\begin{Bmatrix}d(C_3,D_1) +\nf_4(D_1) \\\\ d(C_3, D_2)+f_4(D_2) \\end{Bmatrix} = min\n\\begin{Bmatrix}8+5  \\\\ 10+2 \\end{Bmatrix}=12\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[C_3 \\rightarrow D_2\n\\rightarrow E\\]</span></p>\n<hr />\n<p>第二阶段(B-&gt;C): B到C有9条路线。</p>\n<p>第2阶段的B有3个状态值，分别讨论经过该状态值的最优路线</p>\n<p><strong>经过B1</strong></p>\n<p><span class=\"math display\">\\[f_2(B_1)=min \\begin{Bmatrix}d(B_1, C_1)\n+ f_3(C_1) \\\\ d(B_1,C_2) + f_3(C_2) \\\\ d(B_1, C_3) + f_3(C_3)\n\\end{Bmatrix} = min \\begin{Bmatrix}12+8 \\\\ 14+7\\\\10+12 \\end{Bmatrix} =\n20\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[B_1 \\rightarrow C_1\n\\rightarrow D_1 \\rightarrow E\\]</span></p>\n<p><strong>经过B2</strong></p>\n<p><span class=\"math display\">\\[f_2(B_2)=min \\begin{Bmatrix}d(B_2, C_1)\n+ f_3(C_1) \\\\ d(B_2,C_2) + f_3(C_2) \\\\ d(B_2, C_3) + f_3(C_3)\n\\end{Bmatrix} = min \\begin{Bmatrix}6+8 \\\\ 10+7\\\\4+12 \\end{Bmatrix} =\n14\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[B_2 \\rightarrow C_1\n\\rightarrow D_1 \\rightarrow E\\]</span></p>\n<p><strong>经过C3</strong></p>\n<p><span class=\"math display\">\\[f_2(B_3)=min \\begin{Bmatrix}d(B_3, C_1)\n+ f_3(C_1) \\\\ d(B_3,C_2) + f_3(C_2) \\\\ d(B_3, C_3) + f_3(C_3)\n\\end{Bmatrix} = min \\begin{Bmatrix}13+8 \\\\ 12+7\\\\11+12 \\end{Bmatrix} =\n19\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[B_3 \\rightarrow C_2\n\\rightarrow D_2 \\rightarrow E\\]</span></p>\n<hr />\n<p>第一阶段(A-&gt;B)：A到B有3条路线</p>\n<p><span class=\"math display\">\\[f_1(A)=min \\begin{Bmatrix}d(A, B_1) +\nf_2(B_1) \\\\ d(A,B_2) + f_2(B_2) \\\\ d(A, B_3) + f_2(B_3) \\end{Bmatrix} =\nmin \\begin{Bmatrix}2+20 \\\\ 5+14\\\\1+19 \\end{Bmatrix} = 19\\]</span></p>\n<p>最短路线为<span class=\"math display\">\\[A \\rightarrow B_2 \\rightarrow\nC_1 \\rightarrow D_1 \\rightarrow E\\]</span></p>\n<h1 id=\"全局路径规划算法a算法\">5.全局路径规划算法——A*算法</h1>\n<h2 id=\"算法简介-3\">算法简介</h2>\n<ul>\n<li>A*(A-Star)算法是一种静态路网求解最短路径最有效的直接搜索方法，也是解决许多搜索问题的有效算法，</li>\n<li>广泛应用于室内机器人路径搜索、游戏动画路径搜索等。</li>\n</ul>\n<h2 id=\"算法思想-3\">算法思想</h2>\n<ul>\n<li><p>A*算法结合了贪心算法（深度优先）和Dijkstra算法（广度优先），是一种启发是搜索算法。</p></li>\n<li><p>路径优劣的评价公式为：<span\nclass=\"math inline\">\\(\\color{Red}f(n)=g(n) + h(n)\\)</span></p></li>\n<li><p><span\nclass=\"math inline\">\\(f(n)\\)</span>是从初始状态经由状态<span\nclass=\"math inline\">\\(n\\)</span>到目标状态的代价估计，</p>\n<p><span\nclass=\"math inline\">\\(g(n)\\)</span>是在状态空间中从初始状态到状态<span\nclass=\"math inline\">\\(n\\)</span>的实际代价</p>\n<p><span class=\"math inline\">\\(h(n)\\)</span>是从状态<span\nclass=\"math inline\">\\(n\\)</span>到目标状态的最佳路径的估计代价</p></li>\n<li><p>使用了两个状态表，分别称为<strong>openList表和closeList表</strong>。openList表由待考察的节点组成，closeList表由已经考察过节点组成。</p></li>\n</ul>\n<h2 id=\"算法精讲预处理\">算法精讲——预处理</h2>\n<ul>\n<li>将地图栅格化，把每一个正方形格子的中央称为节点；</li>\n<li>确定栅格属性，即每一个格子有两种状态：可走和不可走（体现障碍物）。</li>\n<li>定义两个列表集合：openList和closeList。openList表由待考察的节点组成，closeList由已经考察的节点组成。类似Dijkstra算法的U集合和S集合。</li>\n<li>确定起始节点和目标节点。</li>\n</ul>\n<p><img src=\"/img/PathPlaning/A-Star-1.png\" /></p>\n<p><img src=\"/img/PathPlaning/A-Star-2.png\" /></p>\n<p>初始时，定义A为父节点，节点A离自身的距离为0，路径完全确定，移入closeList中；</p>\n<p>父节点周围共有8个节点，定义为子节点。将子节点放入openList中，成为待考察对象。</p>\n<p>若某个节点既未在openList，也没在closeList中，则表明还有未搜索到该节点。</p>\n<p>路径优劣的判断依据是移动代价，单步移动代价采取<font color='red'>Manhattan\n计算方式</font>，即把横向和纵向移动一个节点的定义为10。斜向移动代价参考等腰三角形计算斜边的方式，距离为14。</p>\n<h2 id=\"算法精讲开始搜索\">算法精讲——开始搜索</h2>\n<ul>\n<li>移动代价评价函数为：<span\nclass=\"math inline\">\\(f(n)=g(n)+h(n)\\)</span>。<span\nclass=\"math inline\">\\(f(n)\\)</span>是初始状态经由状态<span\nclass=\"math inline\">\\(n\\)</span>到目标状态的代价估计，<span\nclass=\"math inline\">\\(g(n)\\)</span>是在状态空间中从初始状态到状态<span\nclass=\"math inline\">\\(n\\)</span>的实际代价，<span\nclass=\"math inline\">\\(h(n)\\)</span>是从状态<span\nclass=\"math inline\">\\(n\\)</span>到目标状态的最佳路径的估计代价。<font color='red'>以节点<span\nclass=\"math inline\">\\(I\\)</span>为例。</font></li>\n<li>首先考察<span\nclass=\"math inline\">\\(g\\)</span>，由于从A到该格子是斜向移动，单步移动距离为14，故<span\nclass=\"math inline\">\\(g=14\\)</span></li>\n<li>在考察估计代价<span\nclass=\"math inline\">\\(h\\)</span>。估计的含义是忽略剩下的路径是否包含有障碍物（不可走），完全按照Manhattan计算方式，计算<font color='red'>只做横向或纵向移动</font>的累计代价：横向向右移动3步，纵向向上移动1步，总共4步，故为<span\nclass=\"math inline\">\\(h=40\\)</span>.</li>\n<li>因此从A节点移动I节点的总移动代价为：<span\nclass=\"math inline\">\\(f=54\\)</span></li>\n<li>以此类推，分别计算当前openList中余下的7个子节点的移动代价，挑选最小代价节点F，移动到closeList中。</li>\n<li>现在<span\nclass=\"math inline\">\\(openList=\\{B,C,D,E,G,H,I\\},closeList=\\{A,F\\}\\)</span></li>\n</ul>\n<p><img src=\"/img/PathPlaning/A-Star-3.png\" /></p>\n","text":"1. 自动驾驶汽车定位-感知-规划-决策-控制概述 定位 定位，即通过GPS、惯导、激光雷达等传感器，获取车辆的位置和航向信息。 绝对定位是指通过GPS实现，采用双天线，通过卫星获得车辆在地球上的绝对位置和航向信息。 相对定位是指根据车辆的初始位姿，通过惯导、里程计等传感器获得加...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Self-Driving","slug":"Self-Driving","count":1,"path":"api/categories/Self-Driving.json"}],"tags":[{"name":"note","slug":"note","count":4,"path":"api/tags/note.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E6%B1%BD%E8%BD%A6%E5%AE%9A%E4%BD%8D-%E6%84%9F%E7%9F%A5-%E8%A7%84%E5%88%92-%E5%86%B3%E7%AD%96-%E6%8E%A7%E5%88%B6%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.\n自动驾驶汽车定位-感知-规划-决策-控制概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">定位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%84%9F%E7%9F%A5\"><span class=\"toc-text\">感知</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E5%88%92\"><span class=\"toc-text\">规划</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%B3%E7%AD%96%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">决策控制</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95dijkstra%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.全局路径规划算法——Dijkstra算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">算法简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">算法思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%B2%BE%E8%AE%B2\"><span class=\"toc-text\">算法精讲</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#matlab%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Matlab实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Python实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.全局路径规划算法——蚁群算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B-1\"><span class=\"toc-text\">算法简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#tsp%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">TSP问题描述</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3-1\"><span class=\"toc-text\">算法思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%B2%BE%E8%AE%B2-1\"><span class=\"toc-text\">算法精讲</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">文献</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95%E4%B8%AD%E5%8F%82%E6%95%B0-%CE%B1%CE%B2-%CF%81%E8%AE%BE%E7%BD%AE%E7%9A%84%E7%A0%94%E7%A9%B6-%E4%BB%A5-tsp-%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BE%8B\"><span class=\"toc-text\">1.蚁群算法中参数\nα、β 、ρ设置的研究 ———以 TSP 问题为例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">4.全局路径规划算法——动态规划算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B-2\"><span class=\"toc-text\">算法简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3-2\"><span class=\"toc-text\">算法思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%B2%BE%E8%AE%B2-2\"><span class=\"toc-text\">算法精讲</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95a%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">5.全局路径规划算法——A*算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B-3\"><span class=\"toc-text\">算法简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3-3\"><span class=\"toc-text\">算法思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%B2%BE%E8%AE%B2%E9%A2%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">算法精讲——预处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%B2%BE%E8%AE%B2%E5%BC%80%E5%A7%8B%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">算法精讲——开始搜索</span></a></li></ol></li></ol>","author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Linux 服务","uid":"d8ed3ff70bac5529479cf8a31499ebd5","slug":"Linux/service","date":"2022-05-04T04:05:00.000Z","updated":"2022-06-19T06:17:55.673Z","comments":true,"path":"api/articles/Linux/service.json","keywords":null,"cover":[],"text":"Linux 服务 daemon与服务 系统为了某些功能必须要提供一些服务（系统本身或者网络方面），这个服务就称为service。service 的提供需要程序来运行，完成这个 service 的程序就称之为 daemon。 服务的名称被建立之后，在 Linux 中使用时，通常在服...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"note","slug":"note","count":4,"path":"api/tags/note.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"pacman 文档","uid":"b64cd93b72faed23ef520531eb71c1e8","slug":"Linux/pacman","date":"2022-04-28T07:42:04.000Z","updated":"2022-05-04T11:42:06.923Z","comments":true,"path":"api/articles/Linux/pacman.json","keywords":null,"cover":null,"text":"pacman - Arch Linux 软件管理器 SYNOPSIS pacman &lt;operation&gt; [options] [targets] DESCRIPTION Pacman 是一个包管理的使用程序，用于跟踪 Linux 系统上以安装的包。它具有依赖性支持、...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"note","slug":"note","count":4,"path":"api/tags/note.json"}],"author":{"name":"爱慢跑的乌龟","slug":"blog-author","avatar":"/img/avatar1.jpg","link":"/","description":"求知若饥，虚心若愚！","socials":{"github":"https://github.com/ansonxu1998","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}